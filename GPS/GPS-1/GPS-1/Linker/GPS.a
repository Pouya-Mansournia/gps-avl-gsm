;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Advanced
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 09/25/2011
;Author  : www.Eca.ir *** www.Webkade.ir
;Company :
;Comments:
;
;
;Chip type               : ATmega64
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega64.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <string.h>
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;
;
;bit data_ready=0,trueData=0;
;unsigned char caller_id[20];
;float Kp,Ki,Kd,T,err,err1,err2,U,temperature;
;unsigned char setpoint;
;int Tocr;
;//------------------------------------------------------------------
;eeprom unsigned char sms_in_e2prom[256],setpoint_saved,gps_in_e2prom[256];
;
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 200
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 0059 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 005A char status,data;
; 0000 005B status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 005C data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 005D if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 005E    {
; 0000 005F    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0060 #if RX_BUFFER_SIZE0 == 256
; 0000 0061    // special case for receiver buffer size=256
; 0000 0062    if (++rx_counter0 == 0)
; 0000 0063       {
; 0000 0064 #else
; 0000 0065    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0066    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0067       {
; 0000 0068       rx_counter0=0;
;PCODE: $00000026 VOL: 0
; 0000 0069 #endif
; 0000 006A       rx_buffer_overflow0=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 006B       }
; 0000 006C    }
;PCODE: $0000002A VOL: 0
; 0000 006D }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0074 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0075 char data;
; 0000 0076 while (rx_counter0==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0077 data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0078 #if RX_BUFFER_SIZE0 != 256
; 0000 0079 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 007A #endif
; 0000 007B #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 007C --rx_counter0;
;PCODE: $00000044 VOL: 0
; 0000 007D #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 007E return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 007F }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 200
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
;#else
;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
;#endif
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void)
; 0000 008F {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0090 if (tx_counter0)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0091    {
; 0000 0092    --tx_counter0;
;PCODE: $0000004F VOL: 0
; 0000 0093    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0094 #if TX_BUFFER_SIZE0 != 256
; 0000 0095    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0096 #endif
; 0000 0097    }
;PCODE: $0000005A VOL: 0
; 0000 0098 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 009F {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00A0 while (tx_counter0 == TX_BUFFER_SIZE0);
;	c -> Y+0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00A1 #asm("cli")
;PCODE: $00000067 VOL: 0
	cli
;PCODE: $00000068 VOL: 0
; 0000 00A2 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00A3    {
; 0000 00A4    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00A5 #if TX_BUFFER_SIZE0 != 256
; 0000 00A6    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00A7 #endif
; 0000 00A8    ++tx_counter0;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00A9    }
; 0000 00AA else
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00AB    UDR0=c;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00AC #asm("sei")
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
	sei
;PCODE: $00000082 VOL: 0
; 0000 00AD }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;#pragma used-
;#endif
;
;// USART1 Receiver buffer
;#define RX_BUFFER_SIZE1 200
;char rx_buffer1[RX_BUFFER_SIZE1];
;
;#if RX_BUFFER_SIZE1 <= 256
;unsigned char rx_wr_index1,rx_rd_index1,rx_counter1;
;#else
;unsigned int rx_wr_index1,rx_rd_index1,rx_counter1;
;#endif
;
;// This flag is set on USART1 Receiver buffer overflow
;bit rx_buffer_overflow1;
;
;// USART1 Receiver interrupt service routine
;interrupt [USART1_RXC] void usart1_rx_isr(void)
; 0000 00C0 {
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00C1 char status,data;
; 0000 00C2 status=UCSR1A;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00C3 data=UDR1;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00C4 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00C5    {
; 0000 00C6    rx_buffer1[rx_wr_index1++]=data;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00C7 #if RX_BUFFER_SIZE1 == 256
; 0000 00C8    // special case for receiver buffer size=256
; 0000 00C9    if (++rx_counter1 == 0)
; 0000 00CA       {
; 0000 00CB #else
; 0000 00CC    if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00CD    if (++rx_counter1 == RX_BUFFER_SIZE1)
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00CE       {
; 0000 00CF       rx_counter1=0;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00D0 #endif
; 0000 00D1       rx_buffer_overflow1=1;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00D2       }
; 0000 00D3    }
;PCODE: $000000A5 VOL: 0
; 0000 00D4 }
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;
;// Get a character from the USART1 Receiver buffer
;#pragma used+
;char getchar1(void)
; 0000 00D9 {
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00DA char data;
; 0000 00DB while (rx_counter1==0);
;PCODE: $000000AD VOL: 0
;	data -> R17
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00DC data=rx_buffer1[rx_rd_index1++];
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00DD #if RX_BUFFER_SIZE1 != 256
; 0000 00DE if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00DF #endif
; 0000 00E0 #asm("cli")
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
	cli
;PCODE: $000000C2 VOL: 0
; 0000 00E1 --rx_counter1;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00E2 #asm("sei")
;PCODE: $000000C6 VOL: 0
	sei
;PCODE: $000000C7 VOL: 0
; 0000 00E3 return data;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00E4 }
;PCODE: $000000CB VOL: 0
;#pragma used-
;// USART1 Transmitter buffer
;#define TX_BUFFER_SIZE1 200
;char tx_buffer1[TX_BUFFER_SIZE1];
;
;#if TX_BUFFER_SIZE1 <= 256
;unsigned char tx_wr_index1,tx_rd_index1,tx_counter1;
;#else
;unsigned int tx_wr_index1,tx_rd_index1,tx_counter1;
;#endif
;
;// USART1 Transmitter interrupt service routine
;interrupt [USART1_TXC] void usart1_tx_isr(void)
; 0000 00F2 {
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00F3 if (tx_counter1)
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00F4    {
; 0000 00F5    --tx_counter1;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00F6    UDR1=tx_buffer1[tx_rd_index1++];
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00F7 #if TX_BUFFER_SIZE1 != 256
; 0000 00F8    if (tx_rd_index1 == TX_BUFFER_SIZE1) tx_rd_index1=0;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00F9 #endif
; 0000 00FA    }
;PCODE: $000000E1 VOL: 0
; 0000 00FB }
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;
;// Write a character to the USART1 Transmitter buffer
;#pragma used+
;void putchar1(char c)
; 0000 0100 {
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0101 while (tx_counter1 == TX_BUFFER_SIZE1);
;	c -> Y+0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0102 #asm("cli")
;PCODE: $000000EE VOL: 0
	cli
;PCODE: $000000EF VOL: 0
; 0000 0103 if (tx_counter1 || ((UCSR1A & DATA_REGISTER_EMPTY)==0))
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0104    {
; 0000 0105    tx_buffer1[tx_wr_index1++]=c;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0106 #if TX_BUFFER_SIZE1 != 256
; 0000 0107    if (tx_wr_index1 == TX_BUFFER_SIZE1) tx_wr_index1=0;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0108 #endif
; 0000 0109    ++tx_counter1;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 010A    }
; 0000 010B else
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 010C    UDR1=c;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 010D #asm("sei")
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
	sei
;PCODE: $0000010F VOL: 0
; 0000 010E }
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;#pragma used-
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;typedef char * CHAR;
;//*******************************************************************************************************
;//*******************************************************************************************************
;int GPSPosition(CHAR input)
; 0000 0119 {
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 011A     if ( strlen(input) >= 10 )
;	*input -> Y+0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 011B     {
; 0000 011C         if (input[5] == 'C' || input[5] == 'c')
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 011D             return 1;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 011E         else return 0;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 011F     }
;PCODE: $0000012D VOL: 0
; 0000 0120 }
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;int GPSAnten(CHAR input)
; 0000 0122 {
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0123     if ( strlen(input) >= 10 )
;	*input -> Y+0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0124     {
; 0000 0125         if (input[5] == 'A' || input[5] == 'a')
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0126             return 1;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0127         else return 0;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0128     }
;PCODE: $0000014C VOL: 0
; 0000 0129 }
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;void process_gps()
; 0000 012B {
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 012C     char GPSData[256];
; 0000 012D     unsigned char chread;
; 0000 012E     unsigned int  loopcount,index=0;
; 0000 012F     unsigned int  pkindex;
; 0000 0130     loopcount = 0;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;	GPSData -> Y+8
;	chread -> R17
;	loopcount -> R18,R19
;	index -> R20,R21
;	pkindex -> Y+6
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0131     pkindex = 0;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0132     while (rx_counter1>0)
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0133 	{
; 0000 0134 	    chread=getchar();
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0135 	    if ((chread=='$'))
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0136         {
; 0000 0137             loopcount++;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0138             if (loopcount == 2)
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0139             {
; 0000 013A                  if (GPSPosition(GPSData))
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 013B                  {
; 0000 013C                     if (strlen(GPSData) > 10)
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 013D                     {
; 0000 013E                         for (;pkindex >= index;index++)
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 013F                             gps_in_e2prom[index]=GPSData[index];
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0140 trueData = 1;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0141                     }
; 0000 0142                     else
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0143                     {
; 0000 0144                         trueData = 0;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0145                     }
;PCODE: $0000018F VOL: 0
; 0000 0146                     break;
;PCODE: $00000190 VOL: 0
; 0000 0147                  }
; 0000 0148                  else
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0149                  {
; 0000 014A                         strcpy(GPSData,"");
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 014B                         pkindex = 0;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 014C                  }
;PCODE: $0000019B VOL: 0
; 0000 014D             }
; 0000 014E             else
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 014F             {
; 0000 0150                 GPSData[pkindex] = chread;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 0151             }
;PCODE: $000001A2 VOL: 0
; 0000 0152 
; 0000 0153         }
; 0000 0154 	}
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0155 
; 0000 0156 }
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0

	.DSEG
_0x3B:
	.BYTE 0x1
;
;
;CHAR Split (CHAR input, char tag, int Index)
; 0000 015A {

	.CSEG
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 015B       CHAR tmpstr;
; 0000 015C       int  CountIndex = 0;
; 0000 015D       int Count;
; 0000 015E       for (Count = 0 ; Count < strlen (input); Count++)
;PCODE: $000001AC VOL: 0
;	*input -> Y+9
;	tag -> Y+8
;	Index -> Y+6
;	*tmpstr -> R16,R17
;	CountIndex -> R18,R19
;	Count -> R20,R21
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 015F       {
; 0000 0160             if (input [Count] == tag)
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 0161             {
; 0000 0162                if (CountIndex == Index)
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0163                {
; 0000 0164                     return tmpstr;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0165                }
; 0000 0166                else
;PCODE: $000001C8 VOL: 0
; 0000 0167                {
; 0000 0168                     strcpy (tmpstr,"");
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 0169                     CountIndex++;
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 016A                }
;PCODE: $000001D0 VOL: 0
; 0000 016B             }
; 0000 016C             else
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 016D             {
; 0000 016E                 strcat(tmpstr,(CHAR)(input[Count]));
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 016F             }
;PCODE: $000001DB VOL: 0
; 0000 0170       }
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0171       return tmpstr;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0172 }
;PCODE: $000001E5 VOL: 0

	.DSEG
_0x43:
	.BYTE 0x1
;float GPSGetAntenQ (CHAR input)
; 0000 0174 {

	.CSEG
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 0175     float Anten = 0.0;
; 0000 0176     if ( strlen(input) >= 10 )
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;	*input -> Y+4
;	Anten -> Y+0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0177     {
; 0000 0178         if (input[5] == 'A' || input[5] == 'a')
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0179         {
; 0000 017A                 Anten = atof(Split(input,',',9));
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 017B         }
; 0000 017C         else
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 017D         {
; 0000 017E                 Anten = 0.0;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 017F         }
;PCODE: $00000210 VOL: 0
; 0000 0180     }
; 0000 0181 }
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;void CLSSMS ()
; 0000 0183 {
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0184         puts("AT+CMGD=1 \r");
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0185         delay_ms(1000);
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 0186         puts("AT+CMGD=2 \r");
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0187         delay_ms(1000);
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 0188         puts("AT+CMGD=3 \r");
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 0189         delay_ms(1000);
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 018A 
; 0000 018B         puts("AT+CMGD=4 \r");
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 018C         delay_ms(1000);
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 018D 
; 0000 018E         puts("AT+CMGD=5 \r");
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 018F         delay_ms(1000);
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0190 
; 0000 0191         puts("AT+CMGD=6 \r");
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0192         delay_ms(1000);
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 0193 
; 0000 0194         puts("AT+CMGD=7 \r");
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 0195         delay_ms(1000);
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 0196 
; 0000 0197         puts("AT+CMGD=8 \r");
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 0198         delay_ms(1000);
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 0199 
; 0000 019A         puts("AT+CMGD=9 \r");
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 019B         delay_ms(1000);
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 019C 
; 0000 019D         puts("AT+CMGD=10 \r");
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 019E         delay_ms(1000);
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 019F 
; 0000 01A0         puts("AT+CMGD=11 \r");
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 01A1         delay_ms(1000);
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 01A2 
; 0000 01A3         puts("AT+CMGD=12 \r");
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 01A4         delay_ms(1000);
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 01A5 
; 0000 01A6         puts("AT+CMGD=13 \r");
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 01A7         delay_ms(1000);
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 01A8 
; 0000 01A9         puts("AT+CMGD=14 \r");
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 01AA         delay_ms(1000);
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 01AB 
; 0000 01AC         puts("AT+CMGD=15 \r");
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 01AD         delay_ms(1000);
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 01AE 
; 0000 01AF }
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0

	.DSEG
_0x4A:
	.BYTE 0xBA
;void poweron(void)
; 0000 01B1 {

	.CSEG
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 01B2     unsigned char i,ch1,ch2;
; 0000 01B3 
; 0000 01B4     while (rx_counter0>0)	getchar();
;PCODE: $00000284 VOL: 0
;	i -> R17
;	ch1 -> R16
;	ch2 -> R19
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 01B5 while (1)
;PCODE: $0000028C VOL: 0
; 0000 01B6 	{
; 0000 01B7 	    for (i=0;i<20;i++)
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 01B8 		{
; 0000 01B9 		    putchar('a');
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 01BA 		    putchar('t');
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 01BB 		    putchar(13);
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 01BC 		    putchar (10);
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 01BD 		    delay_ms(50);
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 01BE 		}
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 01BF 	    while (rx_counter0>0)
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 01C0 		{
; 0000 01C1 		    ch1=ch2;
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 01C2 		    ch2=getchar();
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 01C3 		    if ((ch1=='O') && (ch2=='K'))
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 01C4 			{
; 0000 01C5 			    while (rx_counter0>0)	getchar();
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 01C6 return;
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 01C7 			}
; 0000 01C8 		}
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 01C9 	    PORTC.1=1;
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 01CA 	    delay_ms(2000);
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 01CB 	    PORTC.1=0;
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 01CC 	    delay_ms(100);
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 01CD 	}
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 01CE }
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;void init(void)
; 0000 01D0 {
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 01D1     unsigned char ch1,ch2,i,flag;
; 0000 01D2     delay_ms(100);
;PCODE: $000002DB VOL: 0
;	ch1 -> R17
;	ch2 -> R16
;	i -> R19
;	flag -> R18
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 01D3 
; 0000 01D4     poweron();
;PCODE: $000002DF VOL: 0
; 0000 01D5 
; 0000 01D6     flag=1;
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 01D7     while (flag)
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 01D8 	{
; 0000 01D9 	    putchar ('A');
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 01DA 	    putchar ('T');
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 01DB 	    putchar ('E');
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 01DC 	    putchar ('0');
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 01DD 	    putchar (13);
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 01DE 	    putchar (10);
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 01DF 	    delay_ms(50);
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 01E0 	    while (rx_counter0>0)
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 01E1 		{
; 0000 01E2 		    ch1=ch2;
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 01E3 		    ch2=getchar();
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
; 0000 01E4 		    if ((ch1=='O') && (ch2=='K'))	{flag=0;break;}
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 01E5 		}
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0000 01E6 	    while (rx_counter0>0)	getchar();
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 01E7 }
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 01E8     flag=1;
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 01E9     while (flag)
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 01EA 	{
; 0000 01EB 	    putchar ('A');
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 01EC 	    putchar ('T');
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 01ED 	    putchar ('+');
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 01EE 	    putchar ('C');
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 01EF 	    putchar ('M');
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 01F0 	    putchar ('G');
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 01F1 	    putchar ('F');
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 01F2 	    putchar ('=');
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0000 01F3 	    putchar ('1');
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 01F4 	    putchar (13);
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
; 0000 01F5 	    putchar (10);
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 01F6 	    delay_ms(100);
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 01F7 	    while (rx_counter0>0)
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 01F8 		{
; 0000 01F9 		    ch1=ch2;
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 01FA 		    ch2=getchar();
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0000 01FB 		    if ((ch1=='O') && (ch2=='K'))	{flag=0;break;}
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 01FC 		}
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
; 0000 01FD 	    while (rx_counter0>0)	getchar();
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
; 0000 01FE }
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0000 01FF     for (i=1;i<=9;i++)
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
; 0000 0200 	{
; 0000 0201 	    putchar ('A');
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0000 0202 	    putchar ('T');
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
; 0000 0203 	    putchar ('+');
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0000 0204 	    putchar ('C');
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 0205 	    putchar ('M');
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0000 0206 	    putchar ('G');
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
; 0000 0207 	    putchar ('D');
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0000 0208 	    putchar ('=');
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 0209 	    putchar (i+48);
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
; 0000 020A 	    putchar (13);
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0000 020B 	    putchar (10);
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 020C 	    delay_ms(50);
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0000 020D 	}
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 020E 
; 0000 020F     while (rx_counter0>0)	getchar();
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
; 0000 0210 }
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;void SendSMS(CHAR Massage)
; 0000 0212 {
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
; 0000 0213      puts("AT \r");
;	*Massage -> Y+0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 0214      delay_ms(20);
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 0215      puts("AT+CMGF=1 \r");
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 0216      delay_ms(20);
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
; 0000 0217      puts("AT+CMGS=\"09355756651\" \r");
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0000 0218      delay_ms(300);
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0000 0219      puts(Massage);
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0000 021A      putchar(0x1A);
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0000 021B      delay_ms(20);
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
; 0000 021C      puts("AT+CMGD=1 \r");
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
; 0000 021D      delay_ms(1000);
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
; 0000 021E      puts("AT+CMGD=2 \r");
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
; 0000 021F      delay_ms(1000);
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
; 0000 0220      puts("AT+CMGD=3 \r");
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
; 0000 0221      delay_ms(1000);
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
; 0000 0222      puts("AT+CMGD=4 \r");
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
; 0000 0223      delay_ms(1000);
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 0224      puts("AT+CMGD=5 \r");
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
; 0000 0225      delay_ms(1000);
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
; 0000 0226      puts("AT+CMGD=6 \r");
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
; 0000 0227      delay_ms(1000);
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0000 0228 
; 0000 0229 }
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0

	.DSEG
_0x7F:
	.BYTE 0x71
;
;void SendSMSToNum(CHAR tel,CHAR Massage)
; 0000 022C {

	.CSEG
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
; 0000 022D      char tmp [];
; 0000 022E      puts("AT \r");
;	*tel -> Y+2
;	*Massage -> Y+0
;	tmp -> Y+0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 022F      delay_ms(20);
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
; 0000 0230      puts("AT+CMGF=1 \r");
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
; 0000 0231      delay_ms(20);
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
; 0000 0232      tmp[0] = 'A';
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
; 0000 0233      tmp[1] = 'T';
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0000 0234      tmp[2] = '+';
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
; 0000 0235      tmp[3] = 'C';
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
; 0000 0236      tmp[4] = 'M';
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
; 0000 0237      tmp[5] = 'G';
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
; 0000 0238      tmp[6] = 'S';
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; 0000 0239      tmp[7] = '=';
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
; 0000 023A      tmp[8] = '"';
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0000 023B      tmp[9] = tel[0];
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0000 023C      tmp[10] = tel[1];
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0000 023D      tmp[11] = tel[2];
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
; 0000 023E      tmp[12] = tel[3];
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0000 023F      tmp[13] = tel[4];
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
; 0000 0240      tmp[14] = tel[5];
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
; 0000 0241      tmp[15] = tel[6];
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
; 0000 0242      tmp[16] = tel[7];
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0000 0243      tmp[17] = tel[8];
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0000 0244      tmp[18] = tel[9];
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 0245      tmp[19] = tel[10];
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
; 0000 0246      tmp[20] = '"';
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
; 0000 0247      tmp[21] = ' ';
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
; 0000 0248      tmp[22] = '\r';
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 0249      puts(tmp);
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
; 0000 024A      delay_ms(300);
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
; 0000 024B      puts(Massage);
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
; 0000 024C      putchar(0x1A);
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
; 0000 024D      delay_ms(20);
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
; 0000 024E      puts("AT+CMGD=1 \r");
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
; 0000 024F      delay_ms(1000);
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
; 0000 0250      puts("AT+CMGD=2 \r");
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
; 0000 0251      delay_ms(1000);
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
; 0000 0252      puts("AT+CMGD=3 \r");
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
; 0000 0253      delay_ms(1000);
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
; 0000 0254      puts("AT+CMGD=4 \r");
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
; 0000 0255      delay_ms(1000);
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
; 0000 0256      puts("AT+CMGD=5 \r");
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
; 0000 0257      delay_ms(1000);
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
; 0000 0258      puts("AT+CMGD=6 \r");
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
; 0000 0259      delay_ms(1000);
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
; 0000 025A 
; 0000 025B }
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0

	.DSEG
_0x80:
	.BYTE 0x59
;
;void process_sms(void)
; 0000 025E {

	.CSEG
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
; 0000 025F     unsigned char tmp [];
; 0000 0260     unsigned char pos [];
; 0000 0261     unsigned char ch1,ch2,ch3,ch4,ch5;
; 0000 0262     unsigned char i,temp,sms_valid=0;
; 0000 0263     unsigned int data_length, index,tagpos;
; 0000 0264 
; 0000 0265     data_length=sms_in_e2prom[0];
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;	tmp -> Y+14
;	pos -> Y+14
;	ch1 -> R17
;	ch2 -> R16
;	ch3 -> R19
;	ch4 -> R18
;	ch5 -> R21
;	i -> R20
;	temp -> Y+13
;	sms_valid -> Y+12
;	data_length -> Y+10
;	index -> Y+8
;	tagpos -> Y+6
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
; 0000 0266     if (data_length>16) data_length=10;
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
; 0000 0267     delay_ms(5000);
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
; 0000 0268     data_length=sms_in_e2prom[0];
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
; 0000 0269     for (i=1;i<=data_length;i++)
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
; 0000 026A 	{
; 0000 026B 	    ch1=ch2;
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
; 0000 026C 	    ch2=ch3;
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
; 0000 026D 	    ch3=ch4;
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 0000 026E 	    ch4=ch5;
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0000 026F 	    ch5=sms_in_e2prom[i];
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
; 0000 0270 
; 0000 0271 	    if ((ch1=='X') && (ch2=='1') && (ch3=='1') && (ch4=='0') && (ch5=='0'))	{sms_valid=1;break;}
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
; 0000 0272 	}
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
; 0000 0273 
; 0000 0274     if (!sms_valid)
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
; 0000 0275     {
; 0000 0276         CLSSMS();
;PCODE: $000004CD VOL: 0
; 0000 0277         delay_ms(1000);
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
; 0000 0278         return;
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0000 0279     }
; 0000 027A 
; 0000 027B     tmp [0]=sms_in_e2prom[i+1];
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0000 027C     tmp [1]=sms_in_e2prom[i+2];
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
; 0000 027D     tmp [2]=sms_in_e2prom[i+3];
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
; 0000 027E     if (tmp[0] == 'p' && tmp[1] == 'o' && tmp[2] == 's')
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
; 0000 027F     {
; 0000 0280         index  = -1;
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
; 0000 0281         tagpos = 0;
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
; 0000 0282         while (1)
;PCODE: $000004FB VOL: 0
; 0000 0283         {
; 0000 0284 
; 0000 0285             ch1 = getchar1();
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
; 0000 0286             if (ch1 == '$' && tagpos == 1)
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
; 0000 0287             {
; 0000 0288                     if(GPSPosition(pos))
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
; 0000 0289                         break;
;PCODE: $0000050D VOL: 0
; 0000 028A                     else
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
; 0000 028B                     {
; 0000 028C                         index  = 0;
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
; 0000 028D                         tagpos = 0;
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
; 0000 028E                     }
;PCODE: $00000514 VOL: 0
; 0000 028F             }
; 0000 0290             else if (ch1 == '$')
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
; 0000 0291             {
; 0000 0292                 tagpos++;
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
; 0000 0293                 index = 0;
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
; 0000 0294             }
; 0000 0295             else
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
; 0000 0296                 index++;
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
; 0000 0297             pos[index] = ch1;
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
; 0000 0298         }
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
; 0000 0299             SendSMS(pos);
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
; 0000 029A             //SendSMSToNum(caller_id,pos);
; 0000 029B     }
; 0000 029C     else
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
; 0000 029D     {
; 0000 029E         SendSMS(tmp);
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
; 0000 029F     }
;PCODE: $00000534 VOL: 0
; 0000 02A0 
; 0000 02A1 }
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;void process_data(void)
; 0000 02A3 {
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
; 0000 02A4     unsigned char ch1,ch2,ch3,ch4,ch5,ch6;
; 0000 02A5     unsigned char i=0,memory_index,temp,sms_ready=0;
; 0000 02A6 
; 0000 02A7     data_ready=0;
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;	ch1 -> R17
;	ch2 -> R16
;	ch3 -> R19
;	ch4 -> R18
;	ch5 -> R21
;	ch6 -> R20
;	i -> Y+9
;	memory_index -> Y+8
;	temp -> Y+7
;	sms_ready -> Y+6
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
; 0000 02A8     delay_ms(1000);
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
; 0000 02A9 
; 0000 02AA     while (rx_counter0>0)
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
; 0000 02AB 	{
; 0000 02AC 	    ch1=ch2;
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
; 0000 02AD 	    ch2=ch3;
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
; 0000 02AE 	    ch3=ch4;
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
; 0000 02AF 	    ch4=ch5;
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
; 0000 02B0 	    ch5=ch6;
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
; 0000 02B1 	    ch6=getchar();
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
; 0000 02B2 	    if ((ch1=='+') && (ch2=='C') && (ch3=='M') && (ch4=='T') && (ch5=='I') && (ch6==':'))	{sms_ready=1;break;}
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
; 0000 02B3 	}
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
; 0000 02B4     if (!sms_ready)	return;
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
; 0000 02B5     delay_ms(1000);
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
; 0000 02B6     while (rx_counter0>0)	getchar();
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
; 0000 02B7 putchar('a');
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
; 0000 02B8     putchar('t');
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
; 0000 02B9     putchar('+');
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
; 0000 02BA     putchar('c');
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
; 0000 02BB     putchar('m');
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
; 0000 02BC     putchar('g');
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
; 0000 02BD     putchar('r');
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
; 0000 02BE     putchar('=');
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
; 0000 02BF     putchar('1');
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
; 0000 02C0     putchar(13);
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
; 0000 02C1     putchar(10);
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
; 0000 02C2 
; 0000 02C3     for (i=0;i<3;i++)	while(getchar()!='"');
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
; 0000 02C4     for (i=0;i<20;i++) caller_id[i]=0;
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
; 0000 02C5 for (i=1;i<20;i++)
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
; 0000 02C6 	{
; 0000 02C7 	    temp=getchar();
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
; 0000 02C8 	    if (temp=='"') break;
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
; 0000 02C9 	    caller_id[i]=temp;
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
; 0000 02CA 	}
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
; 0000 02CB     caller_id[0]=i-1;
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
; 0000 02CC     delay_ms(1000);
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
; 0000 02CD     while (rx_counter0!=0)
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
; 0000 02CE 	{
; 0000 02CF 	    ch1=ch2;
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
; 0000 02D0 	    ch2=getchar();
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
; 0000 02D1 	    if ((ch1==13)&&(ch2==10)) break;
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
; 0000 02D2 	}
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
; 0000 02D3 
; 0000 02D4     i=0;
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
; 0000 02D5     while (1)
;PCODE: $0000060E VOL: 0
; 0000 02D6 	{
; 0000 02D7 	    ch1=ch2;
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
; 0000 02D8 	    ch2=getchar();
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
; 0000 02D9 	    if ((ch1='O')&&(ch2=='K')) break;
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
; 0000 02DA 
; 0000 02DB 	    sms_in_e2prom[++i]=ch2;
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
; 0000 02DC 	}
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
; 0000 02DD     sms_in_e2prom[0]=i;
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
; 0000 02DE     while (rx_counter0>0)	getchar();
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
; 0000 02E0 for (i=1;i<=9;i++)
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
; 0000 02E1 	{
; 0000 02E2 	    putchar ('a');
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
; 0000 02E3     	putchar ('t');
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
; 0000 02E4 	    putchar ('+');
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
; 0000 02E5 	    putchar ('c');
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
; 0000 02E6 	    putchar ('m');
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
; 0000 02E7 	    putchar ('g');
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
; 0000 02E8 	    putchar ('d');
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
; 0000 02E9 	    putchar ('=');
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
; 0000 02EA 	    putchar (i+48);
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
; 0000 02EB 	    putchar (13);
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
; 0000 02EC 	    putchar (10);
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
; 0000 02ED 	}
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
; 0000 02EE     delay_ms(200);
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
; 0000 02EF     while (rx_counter0>0)	getchar();
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
; 0000 02F0 process_sms();
;PCODE: $00000670 VOL: 0
; 0000 02F1 }
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;
;void CallTest ()
; 0000 02F4 {
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
; 0000 02F5     puts("ATD 09384198683 \r");
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
; 0000 02F6 }
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0

	.DSEG
_0xC4:
	.BYTE 0x12
;
;void ClearBuffer ()
; 0000 02F9 {

	.CSEG
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
; 0000 02FA     int Count;
; 0000 02FB     for (Count = 0; Count < rx_counter0; Count++)
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;	Count -> R16,R17
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
; 0000 02FC     {
; 0000 02FD         rx_buffer0[Count] = '';
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
; 0000 02FE     }
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
; 0000 02FF }
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
;//*******************************************************************************************************
;//*******************************************************************************************************
;int count;
;char chr;
;int len;
;char read[];
;char *tmp;
;void main(void)
; 0000 0308 {
;PCODE: $00000698 VOL: 0
; 0000 0309 // Declare your local variables here
; 0000 030A 
; 0000 030B // Input/Output Ports initialization
; 0000 030C // Port A initialization
; 0000 030D // Func7=In Func6=Out Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 030E // State7=T State6=0 State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 030F PORTA=0x00;
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
; 0000 0310 DDRA=0x40;
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
; 0000 0311 
; 0000 0312 // Port B initialization
; 0000 0313 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0314 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0315 PORTB=0x00;
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
; 0000 0316 DDRB=0x00;
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
; 0000 0317 
; 0000 0318 // Port C initialization
; 0000 0319 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=Out
; 0000 031A // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=0
; 0000 031B PORTC=0x00;
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
; 0000 031C DDRC=0x01;
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
; 0000 031D 
; 0000 031E // Port D initialization
; 0000 031F // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0320 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0321 PORTD=0x00;
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
; 0000 0322 DDRD=0x00;
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
; 0000 0323 
; 0000 0324 // Port E initialization
; 0000 0325 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0326 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0327 PORTE=0x00;
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
; 0000 0328 DDRE=0x00;
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
; 0000 0329 
; 0000 032A // Port F initialization
; 0000 032B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 032C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 032D PORTF=0x00;
;PCODE: $000006AD VOL: 0
;PCODE: $000006AE VOL: 0
; 0000 032E DDRF=0x00;
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
; 0000 032F 
; 0000 0330 // Port G initialization
; 0000 0331 // Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0332 // State4=T State3=T State2=T State1=T State0=T
; 0000 0333 PORTG=0x00;
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
; 0000 0334 DDRG=0x00;
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
; 0000 0335 
; 0000 0336 // Timer/Counter 0 initialization
; 0000 0337 // Clock source: System Clock
; 0000 0338 // Clock value: Timer 0 Stopped
; 0000 0339 // Mode: Normal top=0xFF
; 0000 033A // OC0 output: Disconnected
; 0000 033B ASSR=0x00;
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
; 0000 033C TCCR0=0x00;
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
; 0000 033D TCNT0=0x00;
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
; 0000 033E OCR0=0x00;
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
; 0000 033F 
; 0000 0340 // Timer/Counter 1 initialization
; 0000 0341 // Clock source: System Clock
; 0000 0342 // Clock value: Timer1 Stopped
; 0000 0343 // Mode: Normal top=0xFFFF
; 0000 0344 // OC1A output: Discon.
; 0000 0345 // OC1B output: Discon.
; 0000 0346 // OC1C output: Discon.
; 0000 0347 // Noise Canceler: Off
; 0000 0348 // Input Capture on Falling Edge
; 0000 0349 // Timer1 Overflow Interrupt: Off
; 0000 034A // Input Capture Interrupt: Off
; 0000 034B // Compare A Match Interrupt: Off
; 0000 034C // Compare B Match Interrupt: Off
; 0000 034D // Compare C Match Interrupt: Off
; 0000 034E TCCR1A=0x00;
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
; 0000 034F TCCR1B=0x00;
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
; 0000 0350 TCNT1H=0x00;
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
; 0000 0351 TCNT1L=0x00;
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
; 0000 0352 ICR1H=0x00;
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
; 0000 0353 ICR1L=0x00;
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
; 0000 0354 OCR1AH=0x00;
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
; 0000 0355 OCR1AL=0x00;
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
; 0000 0356 OCR1BH=0x00;
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
; 0000 0357 OCR1BL=0x00;
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
; 0000 0358 OCR1CH=0x00;
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
; 0000 0359 OCR1CL=0x00;
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
; 0000 035A 
; 0000 035B // Timer/Counter 2 initialization
; 0000 035C // Clock source: System Clock
; 0000 035D // Clock value: Timer2 Stopped
; 0000 035E // Mode: Normal top=0xFF
; 0000 035F // OC2 output: Disconnected
; 0000 0360 TCCR2=0x00;
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
; 0000 0361 TCNT2=0x00;
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
; 0000 0362 OCR2=0x00;
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
; 0000 0363 
; 0000 0364 // Timer/Counter 3 initialization
; 0000 0365 // Clock source: System Clock
; 0000 0366 // Clock value: Timer3 Stopped
; 0000 0367 // Mode: Normal top=0xFFFF
; 0000 0368 // OC3A output: Discon.
; 0000 0369 // OC3B output: Discon.
; 0000 036A // OC3C output: Discon.
; 0000 036B // Noise Canceler: Off
; 0000 036C // Input Capture on Falling Edge
; 0000 036D // Timer3 Overflow Interrupt: Off
; 0000 036E // Input Capture Interrupt: Off
; 0000 036F // Compare A Match Interrupt: Off
; 0000 0370 // Compare B Match Interrupt: Off
; 0000 0371 // Compare C Match Interrupt: Off
; 0000 0372 TCCR3A=0x00;
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
; 0000 0373 TCCR3B=0x00;
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
; 0000 0374 TCNT3H=0x00;
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
; 0000 0375 TCNT3L=0x00;
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
; 0000 0376 ICR3H=0x00;
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
; 0000 0377 ICR3L=0x00;
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
; 0000 0378 OCR3AH=0x00;
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
; 0000 0379 OCR3AL=0x00;
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
; 0000 037A OCR3BH=0x00;
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
; 0000 037B OCR3BL=0x00;
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
; 0000 037C OCR3CH=0x00;
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
; 0000 037D OCR3CL=0x00;
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
; 0000 037E 
; 0000 037F // External Interrupt(s) initialization
; 0000 0380 // INT0: Off
; 0000 0381 // INT1: Off
; 0000 0382 // INT2: Off
; 0000 0383 // INT3: Off
; 0000 0384 // INT4: Off
; 0000 0385 // INT5: Off
; 0000 0386 // INT6: Off
; 0000 0387 // INT7: Off
; 0000 0388 EICRA=0x00;
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
; 0000 0389 EICRB=0x00;
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
; 0000 038A EIMSK=0x00;
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
; 0000 038B 
; 0000 038C // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 038D TIMSK=0x00;
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
; 0000 038E 
; 0000 038F ETIMSK=0x00;
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
; 0000 0390 
; 0000 0391 // USART0 initialization
; 0000 0392 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0393 // USART0 Receiver: On
; 0000 0394 // USART0 Transmitter: On
; 0000 0395 // USART0 Mode: Asynchronous
; 0000 0396 // USART0 Baud Rate: 9600 (Double Speed Mode)
; 0000 0397 UCSR0A=0x02;
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
; 0000 0398 UCSR0B=0xD8;
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
; 0000 0399 UCSR0C=0x06;
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
; 0000 039A UBRR0H=0x00;
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
; 0000 039B UBRR0L=0x67;
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
; 0000 039C 
; 0000 039D // USART1 initialization
; 0000 039E // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 039F // USART1 Receiver: On
; 0000 03A0 // USART1 Transmitter: On
; 0000 03A1 // USART1 Mode: Asynchronous
; 0000 03A2 // USART1 Baud Rate: 4800 (Double Speed Mode)
; 0000 03A3 UCSR1A=0x02;
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
; 0000 03A4 UCSR1B=0xD8;
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
; 0000 03A5 UCSR1C=0x06;
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
; 0000 03A6 UBRR1H=0x00;
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
; 0000 03A7 UBRR1L=0xCF;
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
; 0000 03A8 
; 0000 03A9 // Analog Comparator initialization
; 0000 03AA // Analog Comparator: Off
; 0000 03AB // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 03AC ACSR=0x80;
;PCODE: $00000711 VOL: 0
;PCODE: $00000712 VOL: 0
; 0000 03AD SFIOR=0x00;
;PCODE: $00000713 VOL: 0
;PCODE: $00000714 VOL: 0
; 0000 03AE 
; 0000 03AF // ADC initialization
; 0000 03B0 // ADC disabled
; 0000 03B1 ADCSRA=0x00;
;PCODE: $00000715 VOL: 0
;PCODE: $00000716 VOL: 0
; 0000 03B2 
; 0000 03B3 // SPI initialization
; 0000 03B4 // SPI disabled
; 0000 03B5 SPCR=0x00;
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
; 0000 03B6 
; 0000 03B7 // TWI initialization
; 0000 03B8 // TWI disabled
; 0000 03B9 TWCR=0x00;
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
; 0000 03BA 
; 0000 03BB // Global enable interrupts
; 0000 03BC #asm("sei")
;PCODE: $0000071B VOL: 0
	sei
;PCODE: $0000071C VOL: 0
; 0000 03BD PORTA.6=0;
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
; 0000 03BE delay_ms(2000);
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
;PCODE: $00000721 VOL: 0
; 0000 03BF PORTA.6=1;
;PCODE: $00000722 VOL: 0
;PCODE: $00000723 VOL: 0
; 0000 03C0 delay_ms(20000);
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
; 0000 03C1 count =0;
;PCODE: $00000727 VOL: 0
;PCODE: $00000728 VOL: 0
; 0000 03C2 len = 0;
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
; 0000 03C3 
; 0000 03C4 init();
;PCODE: $0000072B VOL: 0
; 0000 03C5 CLSSMS();
;PCODE: $0000072C VOL: 0
; 0000 03C6 
; 0000 03C7 delay_ms(1000);
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
;PCODE: $0000072F VOL: 0
; 0000 03C8 
; 0000 03C9 while (1)
;PCODE: $00000730 VOL: 0
; 0000 03CA       {
; 0000 03CB             PORTC.1=1;
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
; 0000 03CC             if (rx_counter0)
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
; 0000 03CD 		    {
; 0000 03CE 		        TCCR1A=0x03;
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
; 0000 03CF 		        delay_ms(2000);
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
;PCODE: $00000739 VOL: 0
; 0000 03D0 		        process_data();
;PCODE: $0000073A VOL: 0
; 0000 03D1 		        TCCR1A=0x83;
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
; 0000 03D2 		    }
; 0000 03D3             //if (rx_counter1)
; 0000 03D4             //{
; 0000 03D5             //    process_gps();
; 0000 03D6             //}
; 0000 03D7 
; 0000 03D8 
; 0000 03D9       }
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
;PCODE: $0000073F VOL: 0
; 0000 03DA }
;PCODE: $00000740 VOL: 0
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
