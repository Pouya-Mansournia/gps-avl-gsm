
AVRASM ver. 2.1.30  C:\Users\Pouya\Desktop\Sim 908\test\List\test-ver1.asm Wed May 16 13:10:32 2012

C:\Users\Pouya\Desktop\Sim 908\test\List\test-ver1.asm(1060): warning: Register r4 already defined by the .DEF directive
C:\Users\Pouya\Desktop\Sim 908\test\List\test-ver1.asm(1061): warning: Register r6 already defined by the .DEF directive
C:\Users\Pouya\Desktop\Sim 908\test\List\test-ver1.asm(1062): warning: Register r8 already defined by the .DEF directive
C:\Users\Pouya\Desktop\Sim 908\test\List\test-ver1.asm(1063): warning: Register r11 already defined by the .DEF directive
C:\Users\Pouya\Desktop\Sim 908\test\List\test-ver1.asm(1064): warning: Register r10 already defined by the .DEF directive
C:\Users\Pouya\Desktop\Sim 908\test\List\test-ver1.asm(1065): warning: Register r13 already defined by the .DEF directive
C:\Users\Pouya\Desktop\Sim 908\test\List\test-ver1.asm(1066): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Advanced
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega64
                 ;Program type             : Application
                 ;Clock frequency          : 7.372800 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Speed
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega64
                 	#pragma AVRPART MEMORY PROG_FLASH 65536
                 	#pragma AVRPART MEMORY EEPROM 2048
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _count=R4
                 	.DEF _len=R6
                 	.DEF _securityMode=R8
                 	.DEF _rx_wr_index0=R11
                 	.DEF _rx_rd_index0=R10
                 	.DEF _rx_counter0=R13
                 	.DEF _tx_wr_index0=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 017f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 01b1 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 01e5 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 022a 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00004f 0000      	.DW  0x0000
                 
                 _0x63:
000050 0000
000051 0000
000052 0000
000053 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
C:\Users\Pouya\Desktop\Sim 908\test\List\test-ver1.asm(1123): warning: .cseg .db misalignment - padding zero byte
000054 0000      	.DB  0x0
                 _0x13C:
000055 0500      	.DB  LOW(_0x3),HIGH(_0x3)
                 _0x0:
000056 464f
000057 0046
000058 5441
000059 432b      	.DB  0x4F,0x46,0x46,0x0,0x41,0x54,0x2B,0x43
00005a 474d
00005b 3d44
00005c 2031
00005d 000d      	.DB  0x4D,0x47,0x44,0x3D,0x31,0x20,0xD,0x0
00005e 5441
00005f 432b
000060 474d
000061 3d44      	.DB  0x41,0x54,0x2B,0x43,0x4D,0x47,0x44,0x3D
000062 2032
000063 000d
000064 5441
000065 432b      	.DB  0x32,0x20,0xD,0x0,0x41,0x54,0x2B,0x43
000066 474d
000067 3d44
000068 2033
000069 000d      	.DB  0x4D,0x47,0x44,0x3D,0x33,0x20,0xD,0x0
00006a 5441
00006b 432b
00006c 474d
00006d 3d44      	.DB  0x41,0x54,0x2B,0x43,0x4D,0x47,0x44,0x3D
00006e 2034
00006f 000d
000070 5441
000071 432b      	.DB  0x34,0x20,0xD,0x0,0x41,0x54,0x2B,0x43
000072 474d
000073 3d44
000074 2035
000075 000d      	.DB  0x4D,0x47,0x44,0x3D,0x35,0x20,0xD,0x0
000076 5441
000077 432b
000078 474d
000079 3d44      	.DB  0x41,0x54,0x2B,0x43,0x4D,0x47,0x44,0x3D
00007a 2036
00007b 000d
00007c 5441
00007d 432b      	.DB  0x36,0x20,0xD,0x0,0x41,0x54,0x2B,0x43
00007e 474d
00007f 3d44
000080 2037
000081 000d      	.DB  0x4D,0x47,0x44,0x3D,0x37,0x20,0xD,0x0
000082 5441
000083 432b
000084 474d
000085 3d44      	.DB  0x41,0x54,0x2B,0x43,0x4D,0x47,0x44,0x3D
000086 2038
000087 000d
000088 5441
000089 432b      	.DB  0x38,0x20,0xD,0x0,0x41,0x54,0x2B,0x43
00008a 474d
00008b 3d44
00008c 2039
00008d 000d      	.DB  0x4D,0x47,0x44,0x3D,0x39,0x20,0xD,0x0
00008e 5441
00008f 432b
000090 474d
000091 3d44      	.DB  0x41,0x54,0x2B,0x43,0x4D,0x47,0x44,0x3D
000092 3031
000093 0d20
000094 4100
000095 2b54      	.DB  0x31,0x30,0x20,0xD,0x0,0x41,0x54,0x2B
000096 4d43
000097 4447
000098 313d
000099 2031      	.DB  0x43,0x4D,0x47,0x44,0x3D,0x31,0x31,0x20
00009a 000d
00009b 5441
00009c 432b
00009d 474d      	.DB  0xD,0x0,0x41,0x54,0x2B,0x43,0x4D,0x47
00009e 3d44
00009f 3231
0000a0 0d20
0000a1 4100      	.DB  0x44,0x3D,0x31,0x32,0x20,0xD,0x0,0x41
0000a2 2b54
0000a3 4d43
0000a4 5347
0000a5 223d      	.DB  0x54,0x2B,0x43,0x4D,0x47,0x53,0x3D,0x22
0000a6 3930
0000a7 3833
0000a8 3134
0000a9 3839      	.DB  0x30,0x39,0x33,0x38,0x34,0x31,0x39,0x38
0000aa 3836
0000ab 2233
0000ac 0d20
0000ad 4700      	.DB  0x36,0x38,0x33,0x22,0x20,0xD,0x0,0x47
0000ae 4d53
0000af 4f20
0000b0 004e
0000b1 6e69      	.DB  0x53,0x4D,0x20,0x4F,0x4E,0x0,0x69,0x6E
0000b2 6176
0000b3 696c
0000b4 2064
0000b5 6f63      	.DB  0x76,0x61,0x6C,0x69,0x64,0x20,0x63,0x6F
0000b6 6d6d
0000b7 6e61
0000b8 2164
0000b9 6400      	.DB  0x6D,0x6D,0x61,0x6E,0x64,0x21,0x0,0x64
0000ba 7461
0000bb 2061
0000bc 7369
0000bd 6620      	.DB  0x61,0x74,0x61,0x20,0x69,0x73,0x20,0x66
0000be 6961
0000bf 646c
0000c0 2120
0000c1 2121      	.DB  0x61,0x69,0x6C,0x64,0x20,0x21,0x21,0x21
0000c2 4100
0000c3 616c
0000c4 6d72
0000c5 4f20      	.DB  0x0,0x41,0x6C,0x61,0x72,0x6D,0x20,0x4F
0000c6 004e
0000c7 6953
0000c8 656c
0000c9 746e      	.DB  0x4E,0x0,0x53,0x69,0x6C,0x65,0x6E,0x74
0000ca 4f20
0000cb 004e
0000cc 7453
0000cd 706f      	.DB  0x20,0x4F,0x4E,0x0,0x53,0x74,0x6F,0x70
0000ce 4f20
0000cf 004e
0000d0 4553
0000d1 5543      	.DB  0x20,0x4F,0x4E,0x0,0x53,0x45,0x43,0x55
0000d2 4952
0000d3 5954
0000d4 7720
0000d5 7361      	.DB  0x52,0x49,0x54,0x59,0x20,0x77,0x61,0x73
0000d6 4f20
0000d7 004e
0000d8 4553
0000d9 5543      	.DB  0x20,0x4F,0x4E,0x0,0x53,0x45,0x43,0x55
0000da 4952
0000db 5954
0000dc 6920
0000dd 2073      	.DB  0x52,0x49,0x54,0x59,0x20,0x69,0x73,0x20
0000de 4e4f
0000df 5300
0000e0 4345
0000e1 5255      	.DB  0x4F,0x4E,0x0,0x53,0x45,0x43,0x55,0x52
0000e2 5449
0000e3 2059
0000e4 7369
0000e5 4f20      	.DB  0x49,0x54,0x59,0x20,0x69,0x73,0x20,0x4F
0000e6 4646
0000e7 5300
0000e8 4345
0000e9 5255      	.DB  0x46,0x46,0x0,0x53,0x45,0x43,0x55,0x52
0000ea 5449
0000eb 2059
0000ec 6177
0000ed 2073      	.DB  0x49,0x54,0x59,0x20,0x77,0x61,0x73,0x20
0000ee 464f
0000ef 0046
0000f0 6e69
0000f1 6176      	.DB  0x4F,0x46,0x46,0x0,0x69,0x6E,0x76,0x61
0000f2 696c
0000f3 2064
0000f4 6f63
0000f5 6d6d      	.DB  0x6C,0x69,0x64,0x20,0x63,0x6F,0x6D,0x6D
0000f6 6e61
0000f7 0064
0000f8 6f44
0000f9 447a      	.DB  0x61,0x6E,0x64,0x0,0x44,0x6F,0x7A,0x44
0000fa 0021
0000fb 6f50
0000fc 6577
0000fd 2072      	.DB  0x21,0x0,0x50,0x6F,0x77,0x65,0x72,0x20
0000fe 7553
0000ff 7070
000100 796c
000101 6f20      	.DB  0x53,0x75,0x70,0x70,0x6C,0x79,0x20,0x6F
000102 6666
000103 2120
000104 5020
000105 656c      	.DB  0x66,0x66,0x20,0x21,0x20,0x50,0x6C,0x65
000106 7361
000107 2065
000108 6843
000109 6365      	.DB  0x61,0x73,0x65,0x20,0x43,0x68,0x65,0x63
00010a 206b
00010b 2061
00010c 6143
00010d 2072      	.DB  0x6B,0x20,0x61,0x20,0x43,0x61,0x72,0x20
00010e 6f56
00010f 746c
000110 5a61
000111 0068      	.DB  0x56,0x6F,0x6C,0x74,0x61,0x5A,0x68,0x0
                 _0x2020060:
C:\Users\Pouya\Desktop\Sim 908\test\List\test-ver1.asm(1175): warning: .cseg .db misalignment - padding zero byte
000112 0001      	.DB  0x1
                 _0x2020000:
000113 4e2d
000114 4e41
000115 4900
000116 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Pouya\Desktop\Sim 908\test\List\test-ver1.asm(1178): warning: .cseg .db misalignment - padding zero byte
000117 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000118 0001      	.DW  0x01
000119 0002      	.DW  0x02
00011a 009e      	.DW  __REG_BIT_VARS*2
                 
00011b 0004      	.DW  0x04
00011c 0500      	.DW  _0x3
00011d 00ac      	.DW  _0x0*2
                 
00011e 0001      	.DW  0x01
00011f 0504      	.DW  _0x2D
000120 00af      	.DW  _0x0*2+3
                 
000121 0001      	.DW  0x01
000122 0505      	.DW  _0x35
000123 00af      	.DW  _0x0*2+3
                 
000124 000c      	.DW  0x0C
000125 0506      	.DW  _0x54
000126 00b0      	.DW  _0x0*2+4
                 
000127 000c      	.DW  0x0C
000128 0512      	.DW  _0x54+12
000129 00bc      	.DW  _0x0*2+16
                 
00012a 000c      	.DW  0x0C
00012b 051e      	.DW  _0x54+24
00012c 00c8      	.DW  _0x0*2+28
                 
00012d 000c      	.DW  0x0C
00012e 052a      	.DW  _0x54+36
00012f 00d4      	.DW  _0x0*2+40
                 
000130 000c      	.DW  0x0C
000131 0536      	.DW  _0x54+48
000132 00e0      	.DW  _0x0*2+52
                 
000133 000c      	.DW  0x0C
000134 0542      	.DW  _0x54+60
000135 00ec      	.DW  _0x0*2+64
                 
000136 000c      	.DW  0x0C
000137 054e      	.DW  _0x54+72
000138 00f8      	.DW  _0x0*2+76
                 
000139 000c      	.DW  0x0C
00013a 055a      	.DW  _0x54+84
00013b 0104      	.DW  _0x0*2+88
                 
00013c 000c      	.DW  0x0C
00013d 0566      	.DW  _0x54+96
00013e 0110      	.DW  _0x0*2+100
                 
00013f 000d      	.DW  0x0D
000140 0572      	.DW  _0x54+108
000141 011c      	.DW  _0x0*2+112
                 
000142 000d      	.DW  0x0D
000143 057f      	.DW  _0x54+121
000144 0129      	.DW  _0x0*2+125
                 
000145 000d      	.DW  0x0D
000146 058c      	.DW  _0x54+134
000147 0136      	.DW  _0x0*2+138
                 
000148 000c      	.DW  0x0C
000149 0599      	.DW  _0x54+147
00014a 00b0      	.DW  _0x0*2+4
                 
00014b 0018      	.DW  0x18
00014c 05a5      	.DW  _0x61
00014d 0143      	.DW  _0x0*2+151
                 
00014e 0018      	.DW  0x18
00014f 05bd      	.DW  _0x62
000150 0143      	.DW  _0x0*2+151
                 
000151 0011      	.DW  0x11
000152 05d5      	.DW  _0x81
000153 0162      	.DW  _0x0*2+182
                 
000154 0012      	.DW  0x12
000155 05e6      	.DW  _0x81+17
000156 0173      	.DW  _0x0*2+199
                 
000157 0018      	.DW  0x18
000158 05f8      	.DW  _0x81+35
000159 0143      	.DW  _0x0*2+151
                 
00015a 0018      	.DW  0x18
00015b 0610      	.DW  _0x81+59
00015c 0143      	.DW  _0x0*2+151
                 
00015d 0018      	.DW  0x18
00015e 0628      	.DW  _0x81+83
00015f 0143      	.DW  _0x0*2+151
                 
000160 0018      	.DW  0x18
000161 0640      	.DW  _0x81+107
000162 0143      	.DW  _0x0*2+151
                 
000163 0018      	.DW  0x18
000164 0658      	.DW  _0x81+131
000165 0143      	.DW  _0x0*2+151
                 
000166 0010      	.DW  0x10
000167 0670      	.DW  _0x81+155
000168 01e0      	.DW  _0x0*2+308
                 
000169 000c      	.DW  0x0C
00016a 0680      	.DW  _0x101
00016b 00b0      	.DW  _0x0*2+4
                 
00016c 000c      	.DW  0x0C
00016d 068c      	.DW  _0x101+12
00016e 00b0      	.DW  _0x0*2+4
                 
00016f 000c      	.DW  0x0C
000170 0698      	.DW  _0x101+24
000171 00bc      	.DW  _0x0*2+16
                 
000172 0018      	.DW  0x18
000173 06a4      	.DW  _0x124
000174 0143      	.DW  _0x0*2+151
                 
000175 0018      	.DW  0x18
000176 06bc      	.DW  _0x131
000177 0143      	.DW  _0x0*2+151
                 
000178 0002      	.DW  0x02
000179 0008      	.DW  0x08
00017a 00aa      	.DW  _0x13C*2
                 
00017b 0001      	.DW  0x01
00017c 07c9      	.DW  __seed_G101
00017d 0224      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00017e 0000      	.DW  0
                 
                 __RESET:
00017f 94f8      	CLI
000180 27ee      	CLR  R30
000181 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000182 e0f1      	LDI  R31,1
000183 bff5      	OUT  MCUCR,R31
000184 bfe5      	OUT  MCUCR,R30
000185 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000187 e1f8      	LDI  R31,0x18
000188 bdf1      	OUT  WDTCR,R31
000189 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00018a e08d      	LDI  R24,(14-2)+1
00018b e0a2      	LDI  R26,2
00018c 27bb      	CLR  R27
                 __CLEAR_REG:
00018d 93ed      	ST   X+,R30
00018e 958a      	DEC  R24
00018f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000190 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000191 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000192 e0a0      	LDI  R26,LOW(__SRAM_START)
000193 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000194 93ed      	ST   X+,R30
000195 9701      	SBIW R24,1
000196 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000197 e3e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000198 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000199 9185      	LPM  R24,Z+
00019a 9195      	LPM  R25,Z+
00019b 9700      	SBIW R24,0
00019c f061      	BREQ __GLOBAL_INI_END
00019d 91a5      	LPM  R26,Z+
00019e 91b5      	LPM  R27,Z+
00019f 9005      	LPM  R0,Z+
0001a0 9015      	LPM  R1,Z+
0001a1 01bf      	MOVW R22,R30
0001a2 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0001a3 9005      	LPM  R0,Z+
0001a4 920d      	ST   X+,R0
0001a5 9701      	SBIW R24,1
0001a6 f7e1      	BRNE __GLOBAL_INI_LOOP
0001a7 01fb      	MOVW R30,R22
0001a8 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0001a9 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0001aa bfed      	OUT  SPL,R30
0001ab e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0001ac bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0001ad e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0001ae e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0001af 940c 02cd 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;///////////////////////////////////////////////////////////////////////////////
                 ;#include <mega64.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;///////////////////////////////////////////////////////////////////////////////
                 ;bit data_ready=0,trueData=0;
                 ;unsigned char caller_id[20];
                 ;char sms[50];
                 ;int count;
                 ;int len;
                 ;eeprom unsigned char sms_in_e2prom[256],setpoint_saved,gps_in_e2prom[256];
                 ;void Security(void);
                 ;void process_data(void);
                 ;void process_sms(void);
                 ;void gpspwr(void);
                 ;void CLSSMS (void);
                 ;void poweron(void);
                 ;void echooff(void);
                 ;void read_gps(void);
                 ;void Batt(void);
                 ;void getAntenna();
                 ;
                 ;char *securityMode = "OFF";
                 
                 	.DSEG
                 _0x3:
000500           	.BYTE 0x4
                 ;//////////////////////////////////////////////////////////////////////////////
                 ;#define pwr    PORTD.5
                 ;#define alarm  PORTB.6
                 ;#define relay  PORTB.5
                 ;#define buzzer PORTB.4
                 ;#define led1   PORTC.0
                 ;#define led2   PORTC.1
                 ;#define led3   PORTC.2
                 ;#define led_m  PORTD.7
                 ;/////////////////////////
                 ;//PINC.5
                 ;//PINC.6
                 ;///////////////////////////////////////////////////////////////////////////////
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 80
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 0058 {
                 
                 	.CSEG
                 _usart0_rx_isr:
0001b1 93ea      	ST   -Y,R30
0001b2 93fa      	ST   -Y,R31
0001b3 b7ef      	IN   R30,SREG
0001b4 93ea      	ST   -Y,R30
                 ; 0000 0059 char status,data;
                 ; 0000 005A status=UCSR0A;
0001b5 931a      	ST   -Y,R17
0001b6 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0001b7 b11b      	IN   R17,11
                 ; 0000 005B data=UDR0;
0001b8 b10c      	IN   R16,12
                 ; 0000 005C if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0001b9 2fe1      	MOV  R30,R17
0001ba 71ec      	ANDI R30,LOW(0x1C)
0001bb f489      	BRNE _0x4
                 ; 0000 005D    {
                 ; 0000 005E    rx_buffer0[rx_wr_index0++]=data;
0001bc 2deb      	MOV  R30,R11
0001bd 94b3      	INC  R11
0001be e0f0      	LDI  R31,0
0001bf 51e8      	SUBI R30,LOW(-_rx_buffer0)
0001c0 4ff9      	SBCI R31,HIGH(-_rx_buffer0)
0001c1 8300      	ST   Z,R16
                 ; 0000 005F #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0060    // special case for receiver buffer size=256
                 ; 0000 0061    if (++rx_counter0 == 0)
                 ; 0000 0062       {
                 ; 0000 0063 #else
                 ; 0000 0064    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0001c2 e5e0      	LDI  R30,LOW(80)
0001c3 15eb      	CP   R30,R11
0001c4 f409      	BRNE _0x5
0001c5 24bb      	CLR  R11
                 ; 0000 0065    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x5:
0001c6 94d3      	INC  R13
0001c7 e5e0      	LDI  R30,LOW(80)
0001c8 15ed      	CP   R30,R13
0001c9 f419      	BRNE _0x6
                 ; 0000 0066       {
                 ; 0000 0067       rx_counter0=0;
0001ca 24dd      	CLR  R13
                 ; 0000 0068 #endif
                 ; 0000 0069       rx_buffer_overflow0=1;
0001cb 9468      	SET
0001cc f822      	BLD  R2,2
                 ; 0000 006A       }
                 ; 0000 006B    }
                 _0x6:
                 ; 0000 006C }
                 _0x4:
0001cd 9109      	LD   R16,Y+
0001ce 9119      	LD   R17,Y+
0001cf 91e9      	LD   R30,Y+
0001d0 bfef      	OUT  SREG,R30
0001d1 91f9      	LD   R31,Y+
0001d2 91e9      	LD   R30,Y+
0001d3 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0073 {
                 _getchar:
                 ; 0000 0074 char data;
                 ; 0000 0075 while (rx_counter0==0);
0001d4 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x7:
0001d5 20dd      	TST  R13
0001d6 f3f1      	BREQ _0x7
                 ; 0000 0076 data=rx_buffer0[rx_rd_index0++];
0001d7 2dea      	MOV  R30,R10
0001d8 94a3      	INC  R10
0001d9 e0f0      	LDI  R31,0
0001da 51e8      	SUBI R30,LOW(-_rx_buffer0)
0001db 4ff9      	SBCI R31,HIGH(-_rx_buffer0)
0001dc 8110      	LD   R17,Z
                 ; 0000 0077 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0078 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
0001dd e5e0      	LDI  R30,LOW(80)
0001de 15ea      	CP   R30,R10
0001df f409      	BRNE _0xA
0001e0 24aa      	CLR  R10
                 ; 0000 0079 #endif
                 ; 0000 007A #asm("cli")
                 _0xA:
0001e1 94f8      	cli
                 ; 0000 007B --rx_counter0;
0001e2 94da      	DEC  R13
                 ; 0000 007C #asm("sei")
0001e3 9478      	sei
0001e4 c095      	RJMP _0x20A0007
                 ; 0000 007D return data;
                 ; 0000 007E }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 40
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 008E {
                 _usart0_tx_isr:
0001e5 93aa      	ST   -Y,R26
0001e6 93ea      	ST   -Y,R30
0001e7 93fa      	ST   -Y,R31
0001e8 b7ef      	IN   R30,SREG
0001e9 93ea      	ST   -Y,R30
                 ; 0000 008F if (tx_counter0)
0001ea 91e0 0761 	LDS  R30,_tx_counter0
0001ec 30e0      	CPI  R30,0
0001ed f0a9      	BREQ _0xB
                 ; 0000 0090    {
                 ; 0000 0091    --tx_counter0;
0001ee 50e1      	SUBI R30,LOW(1)
0001ef 93e0 0761 	STS  _tx_counter0,R30
                 ; 0000 0092    UDR0=tx_buffer0[tx_rd_index0++];
0001f1 91e0 0760 	LDS  R30,_tx_rd_index0
0001f3 5fef      	SUBI R30,-LOW(1)
0001f4 93e0 0760 	STS  _tx_rd_index0,R30
0001f6 50e1      	SUBI R30,LOW(1)
0001f7 e0f0      	LDI  R31,0
0001f8 5ce8      	SUBI R30,LOW(-_tx_buffer0)
0001f9 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
0001fa 81e0      	LD   R30,Z
0001fb b9ec      	OUT  0xC,R30
                 ; 0000 0093 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 0094    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0001fc 91a0 0760 	LDS  R26,_tx_rd_index0
0001fe 32a8      	CPI  R26,LOW(0x28)
0001ff f419      	BRNE _0xC
000200 e0e0      	LDI  R30,LOW(0)
000201 93e0 0760 	STS  _tx_rd_index0,R30
                 ; 0000 0095 #endif
                 ; 0000 0096    }
                 _0xC:
                 ; 0000 0097 }
                 _0xB:
000203 91e9      	LD   R30,Y+
000204 bfef      	OUT  SREG,R30
000205 91f9      	LD   R31,Y+
000206 91e9      	LD   R30,Y+
000207 91a9      	LD   R26,Y+
000208 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 009E {
                 _putchar:
                 ; 0000 009F while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0xD:
000209 91a0 0761 	LDS  R26,_tx_counter0
00020b 32a8      	CPI  R26,LOW(0x28)
00020c f3e1      	BREQ _0xD
                 ; 0000 00A0 #asm("cli")
00020d 94f8      	cli
                 ; 0000 00A1 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
00020e 91e0 0761 	LDS  R30,_tx_counter0
000210 30e0      	CPI  R30,0
000211 f411      	BRNE _0x11
000212 995d      	SBIC 0xB,5
000213 c011      	RJMP _0x10
                 _0x11:
                 ; 0000 00A2    {
                 ; 0000 00A3    tx_buffer0[tx_wr_index0++]=c;
000214 2dec      	MOV  R30,R12
000215 94c3      	INC  R12
000216 e0f0      	LDI  R31,0
000217 5ce8      	SUBI R30,LOW(-_tx_buffer0)
000218 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
000219 81a8      	LD   R26,Y
00021a 83a0      	STD  Z+0,R26
                 ; 0000 00A4 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00A5    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
00021b e2e8      	LDI  R30,LOW(40)
00021c 15ec      	CP   R30,R12
00021d f409      	BRNE _0x13
00021e 24cc      	CLR  R12
                 ; 0000 00A6 #endif
                 ; 0000 00A7    ++tx_counter0;
                 _0x13:
00021f 91e0 0761 	LDS  R30,_tx_counter0
000221 5fef      	SUBI R30,-LOW(1)
000222 93e0 0761 	STS  _tx_counter0,R30
                 ; 0000 00A8    }
                 ; 0000 00A9 else
000224 c002      	RJMP _0x14
                 _0x10:
                 ; 0000 00AA    UDR0=c;
000225 81e8      	LD   R30,Y
000226 b9ec      	OUT  0xC,R30
                 ; 0000 00AB #asm("sei")
                 _0x14:
000227 9478      	sei
                 ; 0000 00AC }
000228 9621      	ADIW R28,1
000229 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;// USART1 Receiver buffer
                 ;#define RX_BUFFER_SIZE1 100
                 ;char rx_buffer1[RX_BUFFER_SIZE1];
                 ;
                 ;#if RX_BUFFER_SIZE1 <= 256
                 ;unsigned char rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#else
                 ;unsigned int rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#endif
                 ;
                 ;// This flag is set on USART1 Receiver buffer overflow
                 ;bit rx_buffer_overflow1;
                 ;
                 ;// USART1 Receiver interrupt service routine
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void)
                 ; 0000 00C0 {
                 _usart1_rx_isr:
00022a 93aa      	ST   -Y,R26
00022b 93ea      	ST   -Y,R30
00022c 93fa      	ST   -Y,R31
00022d b7ef      	IN   R30,SREG
00022e 93ea      	ST   -Y,R30
                 ; 0000 00C1 char status,data;
                 ; 0000 00C2 status=UCSR1A;
00022f 931a      	ST   -Y,R17
000230 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000231 9110 009b 	LDS  R17,155
                 ; 0000 00C3 data=UDR1;
000233 9100 009c 	LDS  R16,156
                 ; 0000 00C4 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000235 2fe1      	MOV  R30,R17
000236 71ec      	ANDI R30,LOW(0x1C)
000237 f4e9      	BRNE _0x15
                 ; 0000 00C5    {
                 ; 0000 00C6    rx_buffer1[rx_wr_index1++]=data;
000238 91e0 07c6 	LDS  R30,_rx_wr_index1
00023a 5fef      	SUBI R30,-LOW(1)
00023b 93e0 07c6 	STS  _rx_wr_index1,R30
00023d 50e1      	SUBI R30,LOW(1)
00023e e0f0      	LDI  R31,0
00023f 59ee      	SUBI R30,LOW(-_rx_buffer1)
000240 4ff8      	SBCI R31,HIGH(-_rx_buffer1)
000241 8300      	ST   Z,R16
                 ; 0000 00C7 #if RX_BUFFER_SIZE1 == 256
                 ; 0000 00C8    // special case for receiver buffer size=256
                 ; 0000 00C9    if (++rx_counter1 == 0) rx_buffer_overflow1=1;
                 ; 0000 00CA #else
                 ; 0000 00CB    if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
000242 91a0 07c6 	LDS  R26,_rx_wr_index1
000244 36a4      	CPI  R26,LOW(0x64)
000245 f419      	BRNE _0x16
000246 e0e0      	LDI  R30,LOW(0)
000247 93e0 07c6 	STS  _rx_wr_index1,R30
                 ; 0000 00CC    if (++rx_counter1 == RX_BUFFER_SIZE1)
                 _0x16:
000249 91a0 07c8 	LDS  R26,_rx_counter1
00024b 5faf      	SUBI R26,-LOW(1)
00024c 93a0 07c8 	STS  _rx_counter1,R26
00024e 36a4      	CPI  R26,LOW(0x64)
00024f f429      	BRNE _0x17
                 ; 0000 00CD       {
                 ; 0000 00CE       rx_counter1=0;
000250 e0e0      	LDI  R30,LOW(0)
000251 93e0 07c8 	STS  _rx_counter1,R30
                 ; 0000 00CF       rx_buffer_overflow1=1;
000253 9468      	SET
000254 f823      	BLD  R2,3
                 ; 0000 00D0       }
                 ; 0000 00D1 #endif
                 ; 0000 00D2    }
                 _0x17:
                 ; 0000 00D3 }
                 _0x15:
000255 9109      	LD   R16,Y+
000256 9119      	LD   R17,Y+
000257 91e9      	LD   R30,Y+
000258 bfef      	OUT  SREG,R30
000259 91f9      	LD   R31,Y+
00025a 91e9      	LD   R30,Y+
00025b 91a9      	LD   R26,Y+
00025c 9518      	RETI
                 ;
                 ;// Get a character from the USART1 Receiver buffer
                 ;#pragma used+
                 ;char getchar1(void)
                 ; 0000 00D8 {
                 _getchar1:
                 ; 0000 00D9 char data;
                 ; 0000 00DA while (rx_counter1==0);
00025d 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x18:
00025e 91e0 07c8 	LDS  R30,_rx_counter1
000260 30e0      	CPI  R30,0
000261 f3e1      	BREQ _0x18
                 ; 0000 00DB data=rx_buffer1[rx_rd_index1++];
000262 91e0 07c7 	LDS  R30,_rx_rd_index1
000264 5fef      	SUBI R30,-LOW(1)
000265 93e0 07c7 	STS  _rx_rd_index1,R30
000267 50e1      	SUBI R30,LOW(1)
000268 e0f0      	LDI  R31,0
000269 59ee      	SUBI R30,LOW(-_rx_buffer1)
00026a 4ff8      	SBCI R31,HIGH(-_rx_buffer1)
00026b 8110      	LD   R17,Z
                 ; 0000 00DC #if RX_BUFFER_SIZE1 != 256
                 ; 0000 00DD if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
00026c 91a0 07c7 	LDS  R26,_rx_rd_index1
00026e 36a4      	CPI  R26,LOW(0x64)
00026f f419      	BRNE _0x1B
000270 e0e0      	LDI  R30,LOW(0)
000271 93e0 07c7 	STS  _rx_rd_index1,R30
                 ; 0000 00DE #endif
                 ; 0000 00DF #asm("cli")
                 _0x1B:
000273 94f8      	cli
                 ; 0000 00E0 --rx_counter1;
000274 91e0 07c8 	LDS  R30,_rx_counter1
000276 50e1      	SUBI R30,LOW(1)
000277 93e0 07c8 	STS  _rx_counter1,R30
                 ; 0000 00E1 #asm("sei")
000279 9478      	sei
                 _0x20A0007:
                 ; 0000 00E2 return data;
00027a 2fe1      	MOV  R30,R17
00027b 9119      	LD   R17,Y+
00027c 9508      	RET
                 ; 0000 00E3 }
                 ;#pragma used-
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;/////////////////////////
                 ;void GPSRST()
                 ; 0000 00E9 {
                 _GPSRST:
                 ; 0000 00EA putchar ('A');
00027d e4e1      	LDI  R30,LOW(65)
00027e 93ea      	ST   -Y,R30
00027f df89      	RCALL _putchar
                 ; 0000 00EB putchar ('T');
000280 e5e4      	LDI  R30,LOW(84)
000281 93ea      	ST   -Y,R30
000282 df86      	RCALL _putchar
                 ; 0000 00EC putchar ('+');
000283 e2eb      	LDI  R30,LOW(43)
000284 93ea      	ST   -Y,R30
000285 df83      	RCALL _putchar
                 ; 0000 00ED putchar ('C');
000286 e4e3      	LDI  R30,LOW(67)
000287 93ea      	ST   -Y,R30
000288 df80      	RCALL _putchar
                 ; 0000 00EE putchar ('G');
000289 e4e7      	LDI  R30,LOW(71)
00028a 93ea      	ST   -Y,R30
00028b df7d      	RCALL _putchar
                 ; 0000 00EF putchar ('P');
00028c e5e0      	LDI  R30,LOW(80)
00028d 93ea      	ST   -Y,R30
00028e df7a      	RCALL _putchar
                 ; 0000 00F0 putchar ('S');
00028f e5e3      	LDI  R30,LOW(83)
000290 93ea      	ST   -Y,R30
000291 df77      	RCALL _putchar
                 ; 0000 00F1 putchar ('R');
000292 e5e2      	LDI  R30,LOW(82)
000293 93ea      	ST   -Y,R30
000294 df74      	RCALL _putchar
                 ; 0000 00F2 putchar ('S');
000295 e5e3      	LDI  R30,LOW(83)
000296 93ea      	ST   -Y,R30
000297 df71      	RCALL _putchar
                 ; 0000 00F3 putchar ('T');
000298 e5e4      	LDI  R30,LOW(84)
000299 93ea      	ST   -Y,R30
00029a df6e      	RCALL _putchar
                 ; 0000 00F4 putchar ('=');
00029b e3ed      	LDI  R30,LOW(61)
00029c 93ea      	ST   -Y,R30
00029d df6b      	RCALL _putchar
                 ; 0000 00F5 putchar ('1');
00029e e3e1      	LDI  R30,LOW(49)
00029f 93ea      	ST   -Y,R30
0002a0 df68      	RCALL _putchar
                 ; 0000 00F6 delay_ms(20);
0002a1 e1e4      	LDI  R30,LOW(20)
0002a2 e0f0      	LDI  R31,HIGH(20)
0002a3 93fa      	ST   -Y,R31
0002a4 93ea      	ST   -Y,R30
0002a5 940e 0c59 	CALL _delay_ms
                 ; 0000 00F7 putchar (13);
0002a7 e0ed      	LDI  R30,LOW(13)
0002a8 93ea      	ST   -Y,R30
0002a9 df5f      	RCALL _putchar
                 ; 0000 00F8 putchar (10);
0002aa e0ea      	LDI  R30,LOW(10)
0002ab 93ea      	ST   -Y,R30
0002ac df5c      	RCALL _putchar
                 ; 0000 00F9 delay_ms(5000);
0002ad e8e8      	LDI  R30,LOW(5000)
0002ae e1f3      	LDI  R31,HIGH(5000)
0002af c146      	RJMP _0x20A0006
                 ; 0000 00FA }
                 ;typedef char * CHAR;
                 ;//*******************************************************************************************************
                 ;//*******************************************************************************************************
                 ;int GPSPosition(CHAR input)
                 ; 0000 00FF {
                 _GPSPosition:
                 ; 0000 0100     if ( strlen(input) >= 10 )
                 ;	*input -> Y+0
0002b0 81e8      	LD   R30,Y
0002b1 81f9      	LDD  R31,Y+1
0002b2 93fa      	ST   -Y,R31
0002b3 93ea      	ST   -Y,R30
0002b4 940e 0c44 	CALL _strlen
0002b6 973a      	SBIW R30,10
0002b7 f090      	BRLO _0x1C
                 ; 0000 0101     {
                 ; 0000 0102         if (input[5] == 'C' || input[5] == 'c')
0002b8 81a8      	LD   R26,Y
0002b9 81b9      	LDD  R27,Y+1
0002ba 9615      	ADIW R26,5
0002bb 91ac      	LD   R26,X
0002bc 34a3      	CPI  R26,LOW(0x43)
0002bd f031      	BREQ _0x1E
0002be 81a8      	LD   R26,Y
0002bf 81b9      	LDD  R27,Y+1
0002c0 9615      	ADIW R26,5
0002c1 91ac      	LD   R26,X
0002c2 36a3      	CPI  R26,LOW(0x63)
0002c3 f419      	BRNE _0x1D
                 _0x1E:
                 ; 0000 0103             return 1;
0002c4 e0e1      	LDI  R30,LOW(1)
0002c5 e0f0      	LDI  R31,HIGH(1)
0002c6 c274      	RJMP _0x20A0005
                 ; 0000 0104         else
                 _0x1D:
                 ; 0000 0105         {
                 ; 0000 0106             return 0;
0002c7 e0e0      	LDI  R30,LOW(0)
0002c8 e0f0      	LDI  R31,HIGH(0)
0002c9 c271      	RJMP _0x20A0005
                 ; 0000 0107         }
                 ; 0000 0108     }
                 ; 0000 0109     return 0;
                 _0x1C:
0002ca e0e0      	LDI  R30,LOW(0)
0002cb e0f0      	LDI  R31,HIGH(0)
0002cc c26e      	RJMP _0x20A0005
                 ; 0000 010A }
                 ;
                 ;void process_gps()
                 ; 0000 010D {
                 ; 0000 010E 
                 ; 0000 010F     char GPSData[256];
                 ; 0000 0110     unsigned char chread;
                 ; 0000 0111     unsigned int  loopcount,index=0;
                 ; 0000 0112     unsigned int  pkindex;
                 ; 0000 0113     loopcount = 0;
                 ;	GPSData -> Y+8
                 ;	chread -> R17
                 ;	loopcount -> R18,R19
                 ;	index -> R20,R21
                 ;	pkindex -> Y+6
                 ; 0000 0114     pkindex = 0;
                 ; 0000 0115     while (rx_counter1>0)
                 ; 0000 0116 	{
                 ; 0000 0117 	    chread=getchar1();
                 ; 0000 0118 	    if ((chread=='$'))
                 ; 0000 0119         {
                 ; 0000 011A             loopcount++;
                 ; 0000 011B             if (loopcount == 2)
                 ; 0000 011C             {
                 ; 0000 011D                  if (GPSPosition(GPSData))
                 ; 0000 011E                  {
                 ; 0000 011F                     if (strlen(GPSData) > 10)
                 ; 0000 0120                     {
                 ; 0000 0121                         for (;pkindex >= index;index++)
                 ; 0000 0122                             gps_in_e2prom[index]=GPSData[index];
                 ; 0000 0123 trueData = 1;
                 ; 0000 0124                     }
                 ; 0000 0125                     else
                 ; 0000 0126                     {
                 ; 0000 0127                         trueData = 0;
                 ; 0000 0128                     }
                 ; 0000 0129                     break;
                 ; 0000 012A                  }
                 ; 0000 012B                  else
                 ; 0000 012C                  {
                 ; 0000 012D                         strcpy(GPSData,"");
                 ; 0000 012E                         pkindex = 0;
                 ; 0000 012F                  }
                 ; 0000 0130             }
                 ; 0000 0131             else
                 ; 0000 0132             {
                 ; 0000 0133                 GPSData[pkindex] = chread;
                 ; 0000 0134             }
                 ; 0000 0135 
                 ; 0000 0136         }
                 ; 0000 0137 	}
                 ; 0000 0138 
                 ; 0000 0139 }
                 
                 	.DSEG
                 _0x2D:
000504           	.BYTE 0x1
                 ;
                 ;CHAR Split (CHAR input, char tag, int Index)
                 ; 0000 013C {
                 
                 	.CSEG
                 ; 0000 013D       CHAR tmpstr;
                 ; 0000 013E       int  CountIndex = 0;
                 ; 0000 013F       int Count;
                 ; 0000 0140       for (Count = 0 ; Count < strlen (input); Count++)
                 ;	*input -> Y+9
                 ;	tag -> Y+8
                 ;	Index -> Y+6
                 ;	*tmpstr -> R16,R17
                 ;	CountIndex -> R18,R19
                 ;	Count -> R20,R21
                 ; 0000 0141       {
                 ; 0000 0142             if (input [Count] == tag)
                 ; 0000 0143             {
                 ; 0000 0144                if (CountIndex == Index)
                 ; 0000 0145                {
                 ; 0000 0146                     return tmpstr;
                 ; 0000 0147                }
                 ; 0000 0148                else
                 ; 0000 0149                {
                 ; 0000 014A                     strcpy (tmpstr,"");
                 ; 0000 014B                     CountIndex++;
                 ; 0000 014C                }
                 ; 0000 014D             }
                 ; 0000 014E             else
                 ; 0000 014F             {
                 ; 0000 0150                 strcat(tmpstr,(CHAR)(input[Count]));
                 ; 0000 0151             }
                 ; 0000 0152       }
                 ; 0000 0153       return tmpstr;
                 ; 0000 0154 }
                 
                 	.DSEG
                 _0x35:
000505           	.BYTE 0x1
                 ;
                 ;///////////////////////////////////////////////////////////////////
                 ;void main(void)
                 ; 0000 0158 {
                 
                 	.CSEG
                 _main:
                 ; 0000 0159 PORTA=0x00;
0002cd e0e0      	LDI  R30,LOW(0)
0002ce bbeb      	OUT  0x1B,R30
                 ; 0000 015A DDRA=0x00;
0002cf bbea      	OUT  0x1A,R30
                 ; 0000 015B PORTB=0x00;
0002d0 bbe8      	OUT  0x18,R30
                 ; 0000 015C DDRB=0x70;
0002d1 e7e0      	LDI  R30,LOW(112)
0002d2 bbe7      	OUT  0x17,R30
                 ; 0000 015D PORTC=0x00;
0002d3 e0e0      	LDI  R30,LOW(0)
0002d4 bbe5      	OUT  0x15,R30
                 ; 0000 015E DDRC=0x07;
0002d5 e0e7      	LDI  R30,LOW(7)
0002d6 bbe4      	OUT  0x14,R30
                 ; 0000 015F PORTD=0x00;
0002d7 e0e0      	LDI  R30,LOW(0)
0002d8 bbe2      	OUT  0x12,R30
                 ; 0000 0160 DDRD=0xA0;
0002d9 eae0      	LDI  R30,LOW(160)
0002da bbe1      	OUT  0x11,R30
                 ; 0000 0161 
                 ; 0000 0162 TCNT0=0x00;
0002db e0e0      	LDI  R30,LOW(0)
0002dc bfe2      	OUT  0x32,R30
                 ; 0000 0163 TCCR1A=0x00;
0002dd bdef      	OUT  0x2F,R30
                 ; 0000 0164 TCCR1B=0x00;
0002de bdee      	OUT  0x2E,R30
                 ; 0000 0165 TCCR2=0x00;
0002df bde5      	OUT  0x25,R30
                 ; 0000 0166 TCCR3A=0x00;
0002e0 93e0 008b 	STS  139,R30
                 ; 0000 0167 TCCR3B=0x00;
0002e2 93e0 008a 	STS  138,R30
                 ; 0000 0168 
                 ; 0000 0169 // External Interrupt(s) initialization
                 ; 0000 016A EICRA=0x00;
0002e4 93e0 006a 	STS  106,R30
                 ; 0000 016B EICRB=0x00;
0002e6 bfea      	OUT  0x3A,R30
                 ; 0000 016C EIMSK=0x00;
0002e7 bfe9      	OUT  0x39,R30
                 ; 0000 016D 
                 ; 0000 016E // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 016F TIMSK=0x00;
0002e8 bfe7      	OUT  0x37,R30
                 ; 0000 0170 
                 ; 0000 0171 ETIMSK=0x00;
0002e9 93e0 007d 	STS  125,R30
                 ; 0000 0172 
                 ; 0000 0173 UCSR0A=0x00;
0002eb b9eb      	OUT  0xB,R30
                 ; 0000 0174 UCSR0B=0xD8;
0002ec ede8      	LDI  R30,LOW(216)
0002ed b9ea      	OUT  0xA,R30
                 ; 0000 0175 UCSR0C=0x06;
0002ee e0e6      	LDI  R30,LOW(6)
0002ef 93e0 0095 	STS  149,R30
                 ; 0000 0176 UBRR0H=0x00;
0002f1 e0e0      	LDI  R30,LOW(0)
0002f2 93e0 0090 	STS  144,R30
                 ; 0000 0177 UBRR0L=0x2F;
0002f4 e2ef      	LDI  R30,LOW(47)
0002f5 b9e9      	OUT  0x9,R30
                 ; 0000 0178 UCSR1A=0x00;
0002f6 e0e0      	LDI  R30,LOW(0)
0002f7 93e0 009b 	STS  155,R30
                 ; 0000 0179 UCSR1B=0x90;
0002f9 e9e0      	LDI  R30,LOW(144)
0002fa 93e0 009a 	STS  154,R30
                 ; 0000 017A UCSR1C=0x06;
0002fc e0e6      	LDI  R30,LOW(6)
0002fd 93e0 009d 	STS  157,R30
                 ; 0000 017B UBRR1H=0x00;
0002ff e0e0      	LDI  R30,LOW(0)
000300 93e0 0098 	STS  152,R30
                 ; 0000 017C UBRR1L=0x2F;
000302 e2ef      	LDI  R30,LOW(47)
000303 93e0 0099 	STS  153,R30
                 ; 0000 017D 
                 ; 0000 017E ACSR=0x80;
000305 e8e0      	LDI  R30,LOW(128)
000306 b9e8      	OUT  0x8,R30
                 ; 0000 017F SFIOR=0x00;
000307 e0e0      	LDI  R30,LOW(0)
000308 bde0      	OUT  0x20,R30
                 ; 0000 0180 
                 ; 0000 0181 // ADC initialization
                 ; 0000 0182 // ADC disabled
                 ; 0000 0183 ADCSRA=0x00;
000309 b9e6      	OUT  0x6,R30
                 ; 0000 0184 
                 ; 0000 0185 // SPI initialization
                 ; 0000 0186 // SPI disabled
                 ; 0000 0187 SPCR=0x00;
00030a b9ed      	OUT  0xD,R30
                 ; 0000 0188 
                 ; 0000 0189 // TWI initialization
                 ; 0000 018A // TWI disabled
                 ; 0000 018B TWCR=0x00;
00030b 93e0 0074 	STS  116,R30
                 ; 0000 018C 
                 ; 0000 018D // Global enable interrupts
                 ; 0000 018E #asm("sei")
00030d 9478      	sei
                 ; 0000 018F 
                 ; 0000 0190 led1=1;
00030e 9aa8      	SBI  0x15,0
                 ; 0000 0191 pwr=1;
00030f 9a95      	SBI  0x12,5
                 ; 0000 0192 delay_ms(1500);
000310 edec      	LDI  R30,LOW(1500)
000311 e0f5      	LDI  R31,HIGH(1500)
000312 93fa      	ST   -Y,R31
000313 93ea      	ST   -Y,R30
000314 940e 0c59 	CALL _delay_ms
                 ; 0000 0193 pwr=0;
000316 9895      	CBI  0x12,5
                 ; 0000 0194 delay_ms(10000);
000317 e1e0      	LDI  R30,LOW(10000)
000318 e2f7      	LDI  R31,HIGH(10000)
000319 93fa      	ST   -Y,R31
00031a 93ea      	ST   -Y,R30
00031b 940e 0c59 	CALL _delay_ms
                 ; 0000 0195 poweron();
00031d d679      	RCALL _poweron
                 ; 0000 0196 echooff();
00031e d614      	RCALL _echooff
                 ; 0000 0197 alarm=1;delay_ms(75);alarm=0;
00031f 9ac6      	SBI  0x18,6
000320 e4eb      	LDI  R30,LOW(75)
000321 e0f0      	LDI  R31,HIGH(75)
000322 93fa      	ST   -Y,R31
000323 93ea      	ST   -Y,R30
000324 940e 0c59 	CALL _delay_ms
000326 98c6      	CBI  0x18,6
                 ; 0000 0198 CLSSMS();
000327 d030      	RCALL _CLSSMS
                 ; 0000 0199 gpspwr();
000328 d0d2      	RCALL _gpspwr
                 ; 0000 019A GPSRST();
000329 df53      	RCALL _GPSRST
                 ; 0000 019B alarm=1;delay_ms(95);alarm=0;
00032a 9ac6      	SBI  0x18,6
00032b e5ef      	LDI  R30,LOW(95)
00032c e0f0      	LDI  R31,HIGH(95)
00032d 93fa      	ST   -Y,R31
00032e 93ea      	ST   -Y,R30
00032f 940e 0c59 	CALL _delay_ms
000331 98c6      	CBI  0x18,6
                 ; 0000 019C while (rx_counter0>0)	getchar();
                 _0x45:
000332 e0e0      	LDI  R30,LOW(0)
000333 15ed      	CP   R30,R13
000334 f410      	BRSH _0x47
000335 de9e      	RCALL _getchar
000336 cffb      	RJMP _0x45
                 _0x47:
                 ; 0000 019D while (1)
                 _0x48:
                 ; 0000 019E       {
                 ; 0000 019F       led1=0;
000337 98a8      	CBI  0x15,0
                 ; 0000 01A0       led_m=!led_m; delay_ms(150);
000338 9b97      	SBIS 0x12,7
000339 c002      	RJMP _0x4D
00033a 9897      	CBI  0x12,7
00033b c001      	RJMP _0x4E
                 _0x4D:
00033c 9a97      	SBI  0x12,7
                 _0x4E:
00033d e9e6      	LDI  R30,LOW(150)
00033e e0f0      	LDI  R31,HIGH(150)
00033f 93fa      	ST   -Y,R31
000340 93ea      	ST   -Y,R30
000341 940e 0c59 	CALL _delay_ms
                 ; 0000 01A1       if (rx_counter0) process_data();
000343 20dd      	TST  R13
000344 f009      	BREQ _0x4F
000345 d4e2      	RCALL _process_data
                 ; 0000 01A2       led3=!led3; delay_ms(200);
                 _0x4F:
000346 9baa      	SBIS 0x15,2
000347 c002      	RJMP _0x50
000348 98aa      	CBI  0x15,2
000349 c001      	RJMP _0x51
                 _0x50:
00034a 9aaa      	SBI  0x15,2
                 _0x51:
00034b ece8      	LDI  R30,LOW(200)
00034c e0f0      	LDI  R31,HIGH(200)
00034d 93fa      	ST   -Y,R31
00034e 93ea      	ST   -Y,R30
00034f 940e 0c59 	CALL _delay_ms
                 ; 0000 01A3       if( securityMode[1] == 'N' )
000351 01f4      	MOVW R30,R8
000352 81a1      	LDD  R26,Z+1
000353 34ae      	CPI  R26,LOW(0x4E)
000354 f409      	BRNE _0x52
                 ; 0000 01A4       Security();
000355 d697      	RCALL _Security
                 ; 0000 01A5       //Batt();
                 ; 0000 01A6       }
                 _0x52:
000356 cfe0      	RJMP _0x48
                 ; 0000 01A7 }
                 _0x53:
000357 cfff      	RJMP _0x53
                 ;
                 ;//////////////////////////////////////////////
                 ;void CLSSMS ()
                 ; 0000 01AB {
                 _CLSSMS:
                 ; 0000 01AC         delay_ms(1000);
000358 eee8      	LDI  R30,LOW(1000)
000359 e0f3      	LDI  R31,HIGH(1000)
00035a 93fa      	ST   -Y,R31
00035b 93ea      	ST   -Y,R30
00035c 940e 0c59 	CALL _delay_ms
                 ; 0000 01AD         puts("AT+CMGD=1 \r");delay_ms(1000);
                +
00035e e0e6     +LDI R30 , LOW ( _0x54 + ( 0 ) )
00035f e0f5     +LDI R31 , HIGH ( _0x54 + ( 0 ) )
                 	__POINTW1MN _0x54,0
000360 93fa      	ST   -Y,R31
000361 93ea      	ST   -Y,R30
000362 940e 0a78 	CALL _puts
000364 eee8      	LDI  R30,LOW(1000)
000365 e0f3      	LDI  R31,HIGH(1000)
000366 93fa      	ST   -Y,R31
000367 93ea      	ST   -Y,R30
000368 940e 0c59 	CALL _delay_ms
                 ; 0000 01AE         puts("AT+CMGD=2 \r");delay_ms(1000);
                +
00036a e1e2     +LDI R30 , LOW ( _0x54 + ( 12 ) )
00036b e0f5     +LDI R31 , HIGH ( _0x54 + ( 12 ) )
                 	__POINTW1MN _0x54,12
00036c 93fa      	ST   -Y,R31
00036d 93ea      	ST   -Y,R30
00036e 940e 0a78 	CALL _puts
000370 eee8      	LDI  R30,LOW(1000)
000371 e0f3      	LDI  R31,HIGH(1000)
000372 93fa      	ST   -Y,R31
000373 93ea      	ST   -Y,R30
000374 940e 0c59 	CALL _delay_ms
                 ; 0000 01AF         puts("AT+CMGD=3 \r");delay_ms(1000);
                +
000376 e1ee     +LDI R30 , LOW ( _0x54 + ( 24 ) )
000377 e0f5     +LDI R31 , HIGH ( _0x54 + ( 24 ) )
                 	__POINTW1MN _0x54,24
000378 93fa      	ST   -Y,R31
000379 93ea      	ST   -Y,R30
00037a 940e 0a78 	CALL _puts
00037c eee8      	LDI  R30,LOW(1000)
00037d e0f3      	LDI  R31,HIGH(1000)
00037e 93fa      	ST   -Y,R31
00037f 93ea      	ST   -Y,R30
000380 940e 0c59 	CALL _delay_ms
                 ; 0000 01B0         puts("AT+CMGD=4 \r");delay_ms(1000);
                +
000382 e2ea     +LDI R30 , LOW ( _0x54 + ( 36 ) )
000383 e0f5     +LDI R31 , HIGH ( _0x54 + ( 36 ) )
                 	__POINTW1MN _0x54,36
000384 93fa      	ST   -Y,R31
000385 93ea      	ST   -Y,R30
000386 940e 0a78 	CALL _puts
000388 eee8      	LDI  R30,LOW(1000)
000389 e0f3      	LDI  R31,HIGH(1000)
00038a 93fa      	ST   -Y,R31
00038b 93ea      	ST   -Y,R30
00038c 940e 0c59 	CALL _delay_ms
                 ; 0000 01B1         puts("AT+CMGD=5 \r");delay_ms(1000);
                +
00038e e3e6     +LDI R30 , LOW ( _0x54 + ( 48 ) )
00038f e0f5     +LDI R31 , HIGH ( _0x54 + ( 48 ) )
                 	__POINTW1MN _0x54,48
000390 93fa      	ST   -Y,R31
000391 93ea      	ST   -Y,R30
000392 940e 0a78 	CALL _puts
000394 eee8      	LDI  R30,LOW(1000)
000395 e0f3      	LDI  R31,HIGH(1000)
000396 93fa      	ST   -Y,R31
000397 93ea      	ST   -Y,R30
000398 940e 0c59 	CALL _delay_ms
                 ; 0000 01B2         puts("AT+CMGD=6 \r");delay_ms(1000);
                +
00039a e4e2     +LDI R30 , LOW ( _0x54 + ( 60 ) )
00039b e0f5     +LDI R31 , HIGH ( _0x54 + ( 60 ) )
                 	__POINTW1MN _0x54,60
00039c 93fa      	ST   -Y,R31
00039d 93ea      	ST   -Y,R30
00039e 940e 0a78 	CALL _puts
0003a0 eee8      	LDI  R30,LOW(1000)
0003a1 e0f3      	LDI  R31,HIGH(1000)
0003a2 93fa      	ST   -Y,R31
0003a3 93ea      	ST   -Y,R30
0003a4 940e 0c59 	CALL _delay_ms
                 ; 0000 01B3         puts("AT+CMGD=7 \r");delay_ms(1000);
                +
0003a6 e4ee     +LDI R30 , LOW ( _0x54 + ( 72 ) )
0003a7 e0f5     +LDI R31 , HIGH ( _0x54 + ( 72 ) )
                 	__POINTW1MN _0x54,72
0003a8 93fa      	ST   -Y,R31
0003a9 93ea      	ST   -Y,R30
0003aa 940e 0a78 	CALL _puts
0003ac eee8      	LDI  R30,LOW(1000)
0003ad e0f3      	LDI  R31,HIGH(1000)
0003ae 93fa      	ST   -Y,R31
0003af 93ea      	ST   -Y,R30
0003b0 940e 0c59 	CALL _delay_ms
                 ; 0000 01B4         puts("AT+CMGD=8 \r");delay_ms(1000);
                +
0003b2 e5ea     +LDI R30 , LOW ( _0x54 + ( 84 ) )
0003b3 e0f5     +LDI R31 , HIGH ( _0x54 + ( 84 ) )
                 	__POINTW1MN _0x54,84
0003b4 93fa      	ST   -Y,R31
0003b5 93ea      	ST   -Y,R30
0003b6 940e 0a78 	CALL _puts
0003b8 eee8      	LDI  R30,LOW(1000)
0003b9 e0f3      	LDI  R31,HIGH(1000)
0003ba 93fa      	ST   -Y,R31
0003bb 93ea      	ST   -Y,R30
0003bc 940e 0c59 	CALL _delay_ms
                 ; 0000 01B5         puts("AT+CMGD=9 \r");delay_ms(1000);
                +
0003be e6e6     +LDI R30 , LOW ( _0x54 + ( 96 ) )
0003bf e0f5     +LDI R31 , HIGH ( _0x54 + ( 96 ) )
                 	__POINTW1MN _0x54,96
0003c0 93fa      	ST   -Y,R31
0003c1 93ea      	ST   -Y,R30
0003c2 940e 0a78 	CALL _puts
0003c4 eee8      	LDI  R30,LOW(1000)
0003c5 e0f3      	LDI  R31,HIGH(1000)
0003c6 93fa      	ST   -Y,R31
0003c7 93ea      	ST   -Y,R30
0003c8 940e 0c59 	CALL _delay_ms
                 ; 0000 01B6         puts("AT+CMGD=10 \r");delay_ms(1000);
                +
0003ca e7e2     +LDI R30 , LOW ( _0x54 + ( 108 ) )
0003cb e0f5     +LDI R31 , HIGH ( _0x54 + ( 108 ) )
                 	__POINTW1MN _0x54,108
0003cc 93fa      	ST   -Y,R31
0003cd 93ea      	ST   -Y,R30
0003ce 940e 0a78 	CALL _puts
0003d0 eee8      	LDI  R30,LOW(1000)
0003d1 e0f3      	LDI  R31,HIGH(1000)
0003d2 93fa      	ST   -Y,R31
0003d3 93ea      	ST   -Y,R30
0003d4 940e 0c59 	CALL _delay_ms
                 ; 0000 01B7         puts("AT+CMGD=11 \r");delay_ms(1000);
                +
0003d6 e7ef     +LDI R30 , LOW ( _0x54 + ( 121 ) )
0003d7 e0f5     +LDI R31 , HIGH ( _0x54 + ( 121 ) )
                 	__POINTW1MN _0x54,121
0003d8 93fa      	ST   -Y,R31
0003d9 93ea      	ST   -Y,R30
0003da 940e 0a78 	CALL _puts
0003dc eee8      	LDI  R30,LOW(1000)
0003dd e0f3      	LDI  R31,HIGH(1000)
0003de 93fa      	ST   -Y,R31
0003df 93ea      	ST   -Y,R30
0003e0 940e 0c59 	CALL _delay_ms
                 ; 0000 01B8         puts("AT+CMGD=12 \r");delay_ms(1000);
                +
0003e2 e8ec     +LDI R30 , LOW ( _0x54 + ( 134 ) )
0003e3 e0f5     +LDI R31 , HIGH ( _0x54 + ( 134 ) )
                 	__POINTW1MN _0x54,134
0003e4 93fa      	ST   -Y,R31
0003e5 93ea      	ST   -Y,R30
0003e6 940e 0a78 	CALL _puts
0003e8 eee8      	LDI  R30,LOW(1000)
0003e9 e0f3      	LDI  R31,HIGH(1000)
0003ea 93fa      	ST   -Y,R31
0003eb 93ea      	ST   -Y,R30
0003ec 940e 0c59 	CALL _delay_ms
                 ; 0000 01B9         puts("AT+CMGD=1 \r");delay_ms(1000);
                +
0003ee e9e9     +LDI R30 , LOW ( _0x54 + ( 147 ) )
0003ef e0f5     +LDI R31 , HIGH ( _0x54 + ( 147 ) )
                 	__POINTW1MN _0x54,147
0003f0 93fa      	ST   -Y,R31
0003f1 93ea      	ST   -Y,R30
0003f2 940e 0a78 	CALL _puts
0003f4 eee8      	LDI  R30,LOW(1000)
0003f5 e0f3      	LDI  R31,HIGH(1000)
                 _0x20A0006:
0003f6 93fa      	ST   -Y,R31
0003f7 93ea      	ST   -Y,R30
0003f8 940e 0c59 	CALL _delay_ms
                 ; 0000 01BA }
0003fa 9508      	RET
                 
                 	.DSEG
                 _0x54:
000506           	.BYTE 0x9F
                 ;//////////////////////////////////////////////////////
                 ;void gpspwr()
                 ; 0000 01BD {
                 
                 	.CSEG
                 _gpspwr:
                 ; 0000 01BE         unsigned char ch1,ch2,flag;
                 ; 0000 01BF         while (rx_counter0>0)    getchar();
0003fb 940e 0c94 	CALL __SAVELOCR4
                 ;	ch1 -> R17
                 ;	ch2 -> R16
                 ;	flag -> R19
                 _0x55:
0003fd e0e0      	LDI  R30,LOW(0)
0003fe 15ed      	CP   R30,R13
0003ff f410      	BRSH _0x57
000400 ddd3      	RCALL _getchar
000401 cffb      	RJMP _0x55
                 _0x57:
                 ; 0000 01C1 delay_ms(100);
000402 e6e4      	LDI  R30,LOW(100)
000403 e0f0      	LDI  R31,HIGH(100)
000404 93fa      	ST   -Y,R31
000405 93ea      	ST   -Y,R30
000406 940e 0c59 	CALL _delay_ms
                 ; 0000 01C2         putchar ('A');
000408 e4e1      	LDI  R30,LOW(65)
000409 93ea      	ST   -Y,R30
00040a ddfe      	RCALL _putchar
                 ; 0000 01C3         putchar ('T');
00040b e5e4      	LDI  R30,LOW(84)
00040c 93ea      	ST   -Y,R30
00040d ddfb      	RCALL _putchar
                 ; 0000 01C4         putchar ('+');
00040e e2eb      	LDI  R30,LOW(43)
00040f 93ea      	ST   -Y,R30
000410 ddf8      	RCALL _putchar
                 ; 0000 01C5         putchar ('C');
000411 e4e3      	LDI  R30,LOW(67)
000412 93ea      	ST   -Y,R30
000413 ddf5      	RCALL _putchar
                 ; 0000 01C6         putchar ('M');
000414 e4ed      	LDI  R30,LOW(77)
000415 93ea      	ST   -Y,R30
000416 ddf2      	RCALL _putchar
                 ; 0000 01C7         putchar ('G');
000417 e4e7      	LDI  R30,LOW(71)
000418 93ea      	ST   -Y,R30
000419 ddef      	RCALL _putchar
                 ; 0000 01C8         putchar ('F');
00041a e4e6      	LDI  R30,LOW(70)
00041b 93ea      	ST   -Y,R30
00041c ddec      	RCALL _putchar
                 ; 0000 01C9         putchar ('=');
00041d e3ed      	LDI  R30,LOW(61)
00041e 93ea      	ST   -Y,R30
00041f dde9      	RCALL _putchar
                 ; 0000 01CA         putchar ('1');
000420 e3e1      	LDI  R30,LOW(49)
000421 93ea      	ST   -Y,R30
000422 dde6      	RCALL _putchar
                 ; 0000 01CB         delay_ms(10);
000423 e0ea      	LDI  R30,LOW(10)
000424 e0f0      	LDI  R31,HIGH(10)
000425 93fa      	ST   -Y,R31
000426 93ea      	ST   -Y,R30
000427 940e 0c59 	CALL _delay_ms
                 ; 0000 01CC         putchar (13);
000429 e0ed      	LDI  R30,LOW(13)
00042a 93ea      	ST   -Y,R30
00042b dddd      	RCALL _putchar
                 ; 0000 01CD         putchar (10);
00042c e0ea      	LDI  R30,LOW(10)
00042d 93ea      	ST   -Y,R30
00042e ddda      	RCALL _putchar
                 ; 0000 01CE         delay_ms(100);
00042f e6e4      	LDI  R30,LOW(100)
000430 e0f0      	LDI  R31,HIGH(100)
000431 93fa      	ST   -Y,R31
000432 93ea      	ST   -Y,R30
000433 940e 0c59 	CALL _delay_ms
                 ; 0000 01CF         while (rx_counter0>0)
                 _0x58:
000435 e0e0      	LDI  R30,LOW(0)
000436 15ed      	CP   R30,R13
000437 f458      	BRSH _0x5A
                 ; 0000 01D0         {
                 ; 0000 01D1             ch1=ch2;
000438 2f10      	MOV  R17,R16
                 ; 0000 01D2             ch2=getchar();
000439 dd9a      	RCALL _getchar
00043a 2f0e      	MOV  R16,R30
                 ; 0000 01D3             if ((ch1=='O') && (ch2=='K'))    {flag=0;break;}
00043b 341f      	CPI  R17,79
00043c f411      	BRNE _0x5C
00043d 340b      	CPI  R16,75
00043e f009      	BREQ _0x5D
                 _0x5C:
00043f c002      	RJMP _0x5B
                 _0x5D:
000440 e030      	LDI  R19,LOW(0)
000441 c001      	RJMP _0x5A
                 ; 0000 01D4         }
                 _0x5B:
000442 cff2      	RJMP _0x58
                 _0x5A:
                 ; 0000 01D5         while (rx_counter0>0)    getchar();
                 _0x5E:
000443 e0e0      	LDI  R30,LOW(0)
000444 15ed      	CP   R30,R13
000445 f410      	BRSH _0x60
000446 dd8d      	RCALL _getchar
000447 cffb      	RJMP _0x5E
                 _0x60:
                 ; 0000 01D6 delay_ms(100);
000448 e6e4      	LDI  R30,LOW(100)
000449 e0f0      	LDI  R31,HIGH(100)
00044a 93fa      	ST   -Y,R31
00044b 93ea      	ST   -Y,R30
00044c 940e 0c59 	CALL _delay_ms
                 ; 0000 01D7         putchar('A');
00044e e4e1      	LDI  R30,LOW(65)
00044f 93ea      	ST   -Y,R30
000450 ddb8      	RCALL _putchar
                 ; 0000 01D8         delay_ms(10);
000451 e0ea      	LDI  R30,LOW(10)
000452 e0f0      	LDI  R31,HIGH(10)
000453 93fa      	ST   -Y,R31
000454 93ea      	ST   -Y,R30
000455 940e 0c59 	CALL _delay_ms
                 ; 0000 01D9     	putchar ('T');
000457 e5e4      	LDI  R30,LOW(84)
000458 93ea      	ST   -Y,R30
000459 ddaf      	RCALL _putchar
                 ; 0000 01DA         delay_ms(10);
00045a e0ea      	LDI  R30,LOW(10)
00045b e0f0      	LDI  R31,HIGH(10)
00045c 93fa      	ST   -Y,R31
00045d 93ea      	ST   -Y,R30
00045e 940e 0c59 	CALL _delay_ms
                 ; 0000 01DB         putchar (13);
000460 e0ed      	LDI  R30,LOW(13)
000461 93ea      	ST   -Y,R30
000462 dda6      	RCALL _putchar
                 ; 0000 01DC 	    putchar (10);
000463 e0ea      	LDI  R30,LOW(10)
000464 93ea      	ST   -Y,R30
000465 dda3      	RCALL _putchar
                 ; 0000 01DD         delay_ms(80);
000466 e5e0      	LDI  R30,LOW(80)
000467 e0f0      	LDI  R31,HIGH(80)
000468 93fa      	ST   -Y,R31
000469 93ea      	ST   -Y,R30
00046a 940e 0c59 	CALL _delay_ms
                 ; 0000 01DE         putchar (13);
00046c e0ed      	LDI  R30,LOW(13)
00046d 93ea      	ST   -Y,R30
00046e dd9a      	RCALL _putchar
                 ; 0000 01DF 	    putchar (10);
00046f e0ea      	LDI  R30,LOW(10)
000470 93ea      	ST   -Y,R30
000471 dd97      	RCALL _putchar
                 ; 0000 01E0         delay_ms(20);
000472 e1e4      	LDI  R30,LOW(20)
000473 e0f0      	LDI  R31,HIGH(20)
000474 93fa      	ST   -Y,R31
000475 93ea      	ST   -Y,R30
000476 940e 0c59 	CALL _delay_ms
                 ; 0000 01E1 ////////////////////////////////////////////////////
                 ; 0000 01E2         putchar ('A');
000478 e4e1      	LDI  R30,LOW(65)
000479 93ea      	ST   -Y,R30
00047a dd8e      	RCALL _putchar
                 ; 0000 01E3     	putchar ('T');
00047b e5e4      	LDI  R30,LOW(84)
00047c 93ea      	ST   -Y,R30
00047d dd8b      	RCALL _putchar
                 ; 0000 01E4 	    putchar ('+');
00047e e2eb      	LDI  R30,LOW(43)
00047f 93ea      	ST   -Y,R30
000480 dd88      	RCALL _putchar
                 ; 0000 01E5 	    putchar ('C');
000481 e4e3      	LDI  R30,LOW(67)
000482 93ea      	ST   -Y,R30
000483 dd85      	RCALL _putchar
                 ; 0000 01E6 	    putchar ('G');
000484 e4e7      	LDI  R30,LOW(71)
000485 93ea      	ST   -Y,R30
000486 dd82      	RCALL _putchar
                 ; 0000 01E7 	    putchar ('P');
000487 e5e0      	LDI  R30,LOW(80)
000488 93ea      	ST   -Y,R30
000489 dd7f      	RCALL _putchar
                 ; 0000 01E8 	    putchar ('S');
00048a e5e3      	LDI  R30,LOW(83)
00048b 93ea      	ST   -Y,R30
00048c dd7c      	RCALL _putchar
                 ; 0000 01E9 	    putchar ('P');
00048d e5e0      	LDI  R30,LOW(80)
00048e 93ea      	ST   -Y,R30
00048f dd79      	RCALL _putchar
                 ; 0000 01EA 	    putchar ('W');
000490 e5e7      	LDI  R30,LOW(87)
000491 93ea      	ST   -Y,R30
000492 dd76      	RCALL _putchar
                 ; 0000 01EB         putchar ('R');
000493 e5e2      	LDI  R30,LOW(82)
000494 93ea      	ST   -Y,R30
000495 dd73      	RCALL _putchar
                 ; 0000 01EC         putchar ('=');
000496 e3ed      	LDI  R30,LOW(61)
000497 93ea      	ST   -Y,R30
000498 dd70      	RCALL _putchar
                 ; 0000 01ED         putchar ('1');
000499 e3e1      	LDI  R30,LOW(49)
00049a 93ea      	ST   -Y,R30
00049b dd6d      	RCALL _putchar
                 ; 0000 01EE         delay_ms(10);
00049c e0ea      	LDI  R30,LOW(10)
00049d e0f0      	LDI  R31,HIGH(10)
00049e 93fa      	ST   -Y,R31
00049f 93ea      	ST   -Y,R30
0004a0 940e 0c59 	CALL _delay_ms
                 ; 0000 01EF 	    putchar (13);
0004a2 e0ed      	LDI  R30,LOW(13)
0004a3 93ea      	ST   -Y,R30
0004a4 dd64      	RCALL _putchar
                 ; 0000 01F0 	    putchar (10);
0004a5 e0ea      	LDI  R30,LOW(10)
0004a6 93ea      	ST   -Y,R30
0004a7 dd61      	RCALL _putchar
                 ; 0000 01F1         delay_ms(80);
0004a8 e5e0      	LDI  R30,LOW(80)
0004a9 e0f0      	LDI  R31,HIGH(80)
0004aa 93fa      	ST   -Y,R31
0004ab 93ea      	ST   -Y,R30
0004ac 940e 0c59 	CALL _delay_ms
                 ; 0000 01F2         delay_ms(1900);
0004ae e6ec      	LDI  R30,LOW(1900)
0004af e0f7      	LDI  R31,HIGH(1900)
0004b0 93fa      	ST   -Y,R31
0004b1 93ea      	ST   -Y,R30
0004b2 940e 0c59 	CALL _delay_ms
                 ; 0000 01F3 ///////////////////////////////////////////////////////
                 ; 0000 01F4         putchar ('A');
0004b4 e4e1      	LDI  R30,LOW(65)
0004b5 93ea      	ST   -Y,R30
0004b6 dd52      	RCALL _putchar
                 ; 0000 01F5     	putchar ('T');
0004b7 e5e4      	LDI  R30,LOW(84)
0004b8 93ea      	ST   -Y,R30
0004b9 dd4f      	RCALL _putchar
                 ; 0000 01F6 	    putchar ('+');
0004ba e2eb      	LDI  R30,LOW(43)
0004bb 93ea      	ST   -Y,R30
0004bc dd4c      	RCALL _putchar
                 ; 0000 01F7 	    putchar ('C');
0004bd e4e3      	LDI  R30,LOW(67)
0004be 93ea      	ST   -Y,R30
0004bf dd49      	RCALL _putchar
                 ; 0000 01F8 	    putchar ('G');
0004c0 e4e7      	LDI  R30,LOW(71)
0004c1 93ea      	ST   -Y,R30
0004c2 dd46      	RCALL _putchar
                 ; 0000 01F9 	    putchar ('P');
0004c3 e5e0      	LDI  R30,LOW(80)
0004c4 93ea      	ST   -Y,R30
0004c5 dd43      	RCALL _putchar
                 ; 0000 01FA 	    putchar ('S');
0004c6 e5e3      	LDI  R30,LOW(83)
0004c7 93ea      	ST   -Y,R30
0004c8 dd40      	RCALL _putchar
                 ; 0000 01FB 	    putchar ('R');
0004c9 e5e2      	LDI  R30,LOW(82)
0004ca 93ea      	ST   -Y,R30
0004cb dd3d      	RCALL _putchar
                 ; 0000 01FC 	    putchar ('S');
0004cc e5e3      	LDI  R30,LOW(83)
0004cd 93ea      	ST   -Y,R30
0004ce dd3a      	RCALL _putchar
                 ; 0000 01FD         putchar ('T');
0004cf e5e4      	LDI  R30,LOW(84)
0004d0 93ea      	ST   -Y,R30
0004d1 dd37      	RCALL _putchar
                 ; 0000 01FE         putchar ('=');
0004d2 e3ed      	LDI  R30,LOW(61)
0004d3 93ea      	ST   -Y,R30
0004d4 dd34      	RCALL _putchar
                 ; 0000 01FF         putchar ('1');
0004d5 e3e1      	LDI  R30,LOW(49)
0004d6 93ea      	ST   -Y,R30
0004d7 dd31      	RCALL _putchar
                 ; 0000 0200         delay_ms(20);
0004d8 e1e4      	LDI  R30,LOW(20)
0004d9 e0f0      	LDI  R31,HIGH(20)
0004da 93fa      	ST   -Y,R31
0004db 93ea      	ST   -Y,R30
0004dc 940e 0c59 	CALL _delay_ms
                 ; 0000 0201 	    putchar (13);
0004de e0ed      	LDI  R30,LOW(13)
0004df 93ea      	ST   -Y,R30
0004e0 dd28      	RCALL _putchar
                 ; 0000 0202 	    putchar (10);
0004e1 e0ea      	LDI  R30,LOW(10)
0004e2 93ea      	ST   -Y,R30
0004e3 dd25      	RCALL _putchar
                 ; 0000 0203         delay_ms(280);
0004e4 e1e8      	LDI  R30,LOW(280)
0004e5 e0f1      	LDI  R31,HIGH(280)
0004e6 93fa      	ST   -Y,R31
0004e7 93ea      	ST   -Y,R30
0004e8 940e 0c59 	CALL _delay_ms
                 ; 0000 0204 ////////////////////////////////////////////////////////
                 ; 0000 0205         puts("AT+CMGS=\"09384198683\" \r");
                +
0004ea eae5     +LDI R30 , LOW ( _0x61 + ( 0 ) )
0004eb e0f5     +LDI R31 , HIGH ( _0x61 + ( 0 ) )
                 	__POINTW1MN _0x61,0
0004ec 93fa      	ST   -Y,R31
0004ed 93ea      	ST   -Y,R30
0004ee 940e 0a78 	CALL _puts
                 ; 0000 0206         putchar (13);
0004f0 e0ed      	LDI  R30,LOW(13)
0004f1 93ea      	ST   -Y,R30
0004f2 dd16      	RCALL _putchar
                 ; 0000 0207 	    putchar (10);
0004f3 e0ea      	LDI  R30,LOW(10)
0004f4 93ea      	ST   -Y,R30
0004f5 dd13      	RCALL _putchar
                 ; 0000 0208         delay_ms(180);
0004f6 ebe4      	LDI  R30,LOW(180)
0004f7 e0f0      	LDI  R31,HIGH(180)
0004f8 93fa      	ST   -Y,R31
0004f9 93ea      	ST   -Y,R30
0004fa 940e 0c59 	CALL _delay_ms
                 ; 0000 0209         printf("GSM ON");
                +
0004fc e5eb     +LDI R30 , LOW ( 2 * _0x0 + ( 175 ) )
0004fd e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 175 ) )
                 	__POINTW1FN _0x0,175
0004fe 93fa      	ST   -Y,R31
0004ff 93ea      	ST   -Y,R30
000500 e080      	LDI  R24,0
000501 940e 0c1d 	CALL _printf
000503 9622      	ADIW R28,2
                 ; 0000 020A         delay_ms(90);
000504 e5ea      	LDI  R30,LOW(90)
000505 e0f0      	LDI  R31,HIGH(90)
000506 93fa      	ST   -Y,R31
000507 93ea      	ST   -Y,R30
000508 940e 0c59 	CALL _delay_ms
                 ; 0000 020B         putchar (26);
00050a e1ea      	LDI  R30,LOW(26)
00050b 93ea      	ST   -Y,R30
00050c dcfc      	RCALL _putchar
                 ; 0000 020C         delay_ms(200);
00050d ece8      	LDI  R30,LOW(200)
00050e e0f0      	LDI  R31,HIGH(200)
00050f 93fa      	ST   -Y,R31
000510 93ea      	ST   -Y,R30
000511 940e 0c59 	CALL _delay_ms
                 ; 0000 020D }
000513 c560      	RJMP _0x20A0002
                 
                 	.DSEG
                 _0x61:
0005a5           	.BYTE 0x18
                 ;//////////////////////////////////////////////////////////////////
                 ;typedef char * CHAR;
                 ;void SendSMS(CHAR Massage)
                 ; 0000 0211 {
                 
                 	.CSEG
                 _SendSMS:
                 ; 0000 0212 
                 ; 0000 0213         puts("AT+CMGS=\"09384198683\" \r");
                 ;	*Massage -> Y+0
                +
000514 ebed     +LDI R30 , LOW ( _0x62 + ( 0 ) )
000515 e0f5     +LDI R31 , HIGH ( _0x62 + ( 0 ) )
                 	__POINTW1MN _0x62,0
000516 93fa      	ST   -Y,R31
000517 93ea      	ST   -Y,R30
000518 940e 0a78 	CALL _puts
                 ; 0000 0214         putchar (13);
00051a e0ed      	LDI  R30,LOW(13)
00051b 93ea      	ST   -Y,R30
00051c dcec      	RCALL _putchar
                 ; 0000 0215 	    putchar (10);
00051d e0ea      	LDI  R30,LOW(10)
00051e 93ea      	ST   -Y,R30
00051f dce9      	RCALL _putchar
                 ; 0000 0216         delay_ms(180);
000520 ebe4      	LDI  R30,LOW(180)
000521 e0f0      	LDI  R31,HIGH(180)
000522 93fa      	ST   -Y,R31
000523 93ea      	ST   -Y,R30
000524 940e 0c59 	CALL _delay_ms
                 ; 0000 0217         puts(Massage);
000526 81e8      	LD   R30,Y
000527 81f9      	LDD  R31,Y+1
000528 93fa      	ST   -Y,R31
000529 93ea      	ST   -Y,R30
00052a 940e 0a78 	CALL _puts
                 ; 0000 0218         delay_ms(90);
00052c e5ea      	LDI  R30,LOW(90)
00052d e0f0      	LDI  R31,HIGH(90)
00052e 93fa      	ST   -Y,R31
00052f 93ea      	ST   -Y,R30
000530 940e 0c59 	CALL _delay_ms
                 ; 0000 0219         putchar (26);
000532 e1ea      	LDI  R30,LOW(26)
000533 93ea      	ST   -Y,R30
000534 dcd4      	RCALL _putchar
                 ; 0000 021A         delay_ms(200);
000535 ece8      	LDI  R30,LOW(200)
000536 e0f0      	LDI  R31,HIGH(200)
000537 93fa      	ST   -Y,R31
000538 93ea      	ST   -Y,R30
000539 940e 0c59 	CALL _delay_ms
                 ; 0000 021B }
                 _0x20A0005:
00053b 9622      	ADIW R28,2
00053c 9508      	RET
                 
                 	.DSEG
                 _0x62:
0005bd           	.BYTE 0x18
                 ;///////////////////////////////////////////////////////////////////////////////
                 ;void process_sms(void)
                 ; 0000 021E {
                 
                 	.CSEG
                 _process_sms:
                 ; 0000 021F     int counter=0;
                 ; 0000 0220     int faildGPS = 0;
                 ; 0000 0221     unsigned char tmp [];
                 ; 0000 0222     unsigned char pos [];
                 ; 0000 0223     unsigned char ch1,ch2,ch3,ch4,ch5,ch6,ch7,ch8,catch[5];
                 ; 0000 0224     unsigned char i,temp,sms_valid=0;
                 ; 0000 0225     unsigned int data_length, index,tagpos;
                 ; 0000 0226 
                 ; 0000 0227     int lastGetTrueCode=0;
                 ; 0000 0228 
                 ; 0000 0229     data_length=sms_in_e2prom[0];
00053d 9766      	SBIW R28,22
00053e e089      	LDI  R24,9
00053f e0a0      	LDI  R26,LOW(0)
000540 e0b0      	LDI  R27,HIGH(0)
000541 eae0      	LDI  R30,LOW(_0x63*2)
000542 e0f0      	LDI  R31,HIGH(_0x63*2)
000543 940e 0ca0 	CALL __INITLOCB
000545 940e 0c92 	CALL __SAVELOCR6
                 ;	counter -> R16,R17
                 ;	faildGPS -> R18,R19
                 ;	tmp -> Y+28
                 ;	pos -> Y+28
                 ;	ch1 -> R21
                 ;	ch2 -> R20
                 ;	ch3 -> Y+27
                 ;	ch4 -> Y+26
                 ;	ch5 -> Y+25
                 ;	ch6 -> Y+24
                 ;	ch7 -> Y+23
                 ;	ch8 -> Y+22
                 ;	catch -> Y+17
                 ;	i -> Y+16
                 ;	temp -> Y+15
                 ;	sms_valid -> Y+14
                 ;	data_length -> Y+12
                 ;	index -> Y+10
                 ;	tagpos -> Y+8
                 ;	lastGetTrueCode -> Y+6
                +
000547 e000     +LDI R16 , LOW ( 0 )
000548 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000549 e020     +LDI R18 , LOW ( 0 )
00054a e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
00054b e0a0      	LDI  R26,LOW(_sms_in_e2prom)
00054c e0b0      	LDI  R27,HIGH(_sms_in_e2prom)
00054d 940e 0c75 	CALL __EEPROMRDB
00054f e0f0      	LDI  R31,0
000550 87ec      	STD  Y+12,R30
000551 87fd      	STD  Y+12+1,R31
                 ; 0000 022A     if (data_length>10) data_length=10;
000552 85ac      	LDD  R26,Y+12
000553 85bd      	LDD  R27,Y+12+1
000554 971b      	SBIW R26,11
000555 f020      	BRLO _0x64
000556 e0ea      	LDI  R30,LOW(10)
000557 e0f0      	LDI  R31,HIGH(10)
000558 87ec      	STD  Y+12,R30
000559 87fd      	STD  Y+12+1,R31
                 ; 0000 022B 
                 ; 0000 022C     for (i=1;i<=data_length;i++)
                 _0x64:
00055a e0e1      	LDI  R30,LOW(1)
00055b 8be8      	STD  Y+16,R30
                 _0x66:
00055c 85ec      	LDD  R30,Y+12
00055d 85fd      	LDD  R31,Y+12+1
00055e 89a8      	LDD  R26,Y+16
00055f e0b0      	LDI  R27,0
000560 17ea      	CP   R30,R26
000561 07fb      	CPC  R31,R27
000562 f410      	BRSH PC+3
000563 940c 060f 	JMP _0x67
                 ; 0000 022D 	{
                 ; 0000 022E 	    ch1=ch2;
000565 2f54      	MOV  R21,R20
                 ; 0000 022F 	    ch2=ch3;
000566 8d4b      	LDD  R20,Y+27
                 ; 0000 0230 	    ch3=ch4;
000567 8dea      	LDD  R30,Y+26
000568 8feb      	STD  Y+27,R30
                 ; 0000 0231 	    ch4=ch5;
000569 8de9      	LDD  R30,Y+25
00056a 8fea      	STD  Y+26,R30
                 ; 0000 0232         ch5=ch6;
00056b 8de8      	LDD  R30,Y+24
00056c 8fe9      	STD  Y+25,R30
                 ; 0000 0233         ch6=ch7;
00056d 89ef      	LDD  R30,Y+23
00056e 8fe8      	STD  Y+24,R30
                 ; 0000 0234         ch7=ch8;
00056f 89ee      	LDD  R30,Y+22
000570 8bef      	STD  Y+23,R30
                 ; 0000 0235 	    ch8=sms_in_e2prom[i];
000571 89a8      	LDD  R26,Y+16
000572 e0b0      	LDI  R27,0
000573 50a0      	SUBI R26,LOW(-_sms_in_e2prom)
000574 40b0      	SBCI R27,HIGH(-_sms_in_e2prom)
000575 940e 0c75 	CALL __EEPROMRDB
000577 8bee      	STD  Y+22,R30
                 ; 0000 0236         if ((ch8>='a')&&(ch8<='z')) ch8-=32;
000578 89ae      	LDD  R26,Y+22
000579 36a1      	CPI  R26,LOW(0x61)
00057a f010      	BRLO _0x69
00057b 37ab      	CPI  R26,LOW(0x7B)
00057c f008      	BRLO _0x6A
                 _0x69:
00057d c004      	RJMP _0x68
                 _0x6A:
00057e 89ee      	LDD  R30,Y+22
00057f e0f0      	LDI  R31,0
000580 97b0      	SBIW R30,32
000581 8bee      	STD  Y+22,R30
                 ; 0000 0237 
                 ; 0000 0238 	    if ((ch1=='P') && (ch2=='1') && (ch3=='3') && (ch4=='9') && (ch5=='1'))	{sms_valid=1;break;}
                 _0x68:
000582 3550      	CPI  R21,80
000583 f459      	BRNE _0x6C
000584 3341      	CPI  R20,49
000585 f449      	BRNE _0x6C
000586 8dab      	LDD  R26,Y+27
000587 33a3      	CPI  R26,LOW(0x33)
000588 f431      	BRNE _0x6C
000589 8daa      	LDD  R26,Y+26
00058a 33a9      	CPI  R26,LOW(0x39)
00058b f419      	BRNE _0x6C
00058c 8da9      	LDD  R26,Y+25
00058d 33a1      	CPI  R26,LOW(0x31)
00058e f009      	BREQ _0x6D
                 _0x6C:
00058f c003      	RJMP _0x6B
                 _0x6D:
000590 e0e1      	LDI  R30,LOW(1)
000591 87ee      	STD  Y+14,R30
000592 c07c      	RJMP _0x67
                 ; 0000 0239         if ((ch4=='A') && (ch5=='L') && (ch6=='A') && (ch7=='R') && (ch8=='M'))	{sms_valid=2;break;}
                 _0x6B:
000593 8daa      	LDD  R26,Y+26
000594 34a1      	CPI  R26,LOW(0x41)
000595 f461      	BRNE _0x6F
000596 8da9      	LDD  R26,Y+25
000597 34ac      	CPI  R26,LOW(0x4C)
000598 f449      	BRNE _0x6F
000599 8da8      	LDD  R26,Y+24
00059a 34a1      	CPI  R26,LOW(0x41)
00059b f431      	BRNE _0x6F
00059c 89af      	LDD  R26,Y+23
00059d 35a2      	CPI  R26,LOW(0x52)
00059e f419      	BRNE _0x6F
00059f 89ae      	LDD  R26,Y+22
0005a0 34ad      	CPI  R26,LOW(0x4D)
0005a1 f009      	BREQ _0x70
                 _0x6F:
0005a2 c003      	RJMP _0x6E
                 _0x70:
0005a3 e0e2      	LDI  R30,LOW(2)
0005a4 87ee      	STD  Y+14,R30
0005a5 c069      	RJMP _0x67
                 ; 0000 023A 	    if ((ch3=='S') && (ch4=='I') && (ch5=='L') && (ch6=='E') && (ch7=='N') && (ch8=='T'))	{sms_valid=3;break;}
                 _0x6E:
0005a6 8dab      	LDD  R26,Y+27
0005a7 35a3      	CPI  R26,LOW(0x53)
0005a8 f479      	BRNE _0x72
0005a9 8daa      	LDD  R26,Y+26
0005aa 34a9      	CPI  R26,LOW(0x49)
0005ab f461      	BRNE _0x72
0005ac 8da9      	LDD  R26,Y+25
0005ad 34ac      	CPI  R26,LOW(0x4C)
0005ae f449      	BRNE _0x72
0005af 8da8      	LDD  R26,Y+24
0005b0 34a5      	CPI  R26,LOW(0x45)
0005b1 f431      	BRNE _0x72
0005b2 89af      	LDD  R26,Y+23
0005b3 34ae      	CPI  R26,LOW(0x4E)
0005b4 f419      	BRNE _0x72
0005b5 89ae      	LDD  R26,Y+22
0005b6 35a4      	CPI  R26,LOW(0x54)
0005b7 f009      	BREQ _0x73
                 _0x72:
0005b8 c003      	RJMP _0x71
                 _0x73:
0005b9 e0e3      	LDI  R30,LOW(3)
0005ba 87ee      	STD  Y+14,R30
0005bb c053      	RJMP _0x67
                 ; 0000 023B         if ((ch5=='S') && (ch6=='T') && (ch7=='O') && (ch8=='P'))	{sms_valid=4;break;}
                 _0x71:
0005bc 8da9      	LDD  R26,Y+25
0005bd 35a3      	CPI  R26,LOW(0x53)
0005be f449      	BRNE _0x75
0005bf 8da8      	LDD  R26,Y+24
0005c0 35a4      	CPI  R26,LOW(0x54)
0005c1 f431      	BRNE _0x75
0005c2 89af      	LDD  R26,Y+23
0005c3 34af      	CPI  R26,LOW(0x4F)
0005c4 f419      	BRNE _0x75
0005c5 89ae      	LDD  R26,Y+22
0005c6 35a0      	CPI  R26,LOW(0x50)
0005c7 f009      	BREQ _0x76
                 _0x75:
0005c8 c003      	RJMP _0x74
                 _0x76:
0005c9 e0e4      	LDI  R30,LOW(4)
0005ca 87ee      	STD  Y+14,R30
0005cb c043      	RJMP _0x67
                 ; 0000 023C         if ((ch4=='S') && (ch5=='E') && (ch6=='C') && (ch7=='O') && (ch8=='N'))	{sms_valid=5;break;}
                 _0x74:
0005cc 8daa      	LDD  R26,Y+26
0005cd 35a3      	CPI  R26,LOW(0x53)
0005ce f461      	BRNE _0x78
0005cf 8da9      	LDD  R26,Y+25
0005d0 34a5      	CPI  R26,LOW(0x45)
0005d1 f449      	BRNE _0x78
0005d2 8da8      	LDD  R26,Y+24
0005d3 34a3      	CPI  R26,LOW(0x43)
0005d4 f431      	BRNE _0x78
0005d5 89af      	LDD  R26,Y+23
0005d6 34af      	CPI  R26,LOW(0x4F)
0005d7 f419      	BRNE _0x78
0005d8 89ae      	LDD  R26,Y+22
0005d9 34ae      	CPI  R26,LOW(0x4E)
0005da f009      	BREQ _0x79
                 _0x78:
0005db c003      	RJMP _0x77
                 _0x79:
0005dc e0e5      	LDI  R30,LOW(5)
0005dd 87ee      	STD  Y+14,R30
0005de c030      	RJMP _0x67
                 ; 0000 023D         if ((ch3=='S') && (ch4=='E') && (ch5=='C') && (ch6=='O') && (ch7=='F') && (ch8=='F'))	{sms_valid=6;break;}
                 _0x77:
0005df 8dab      	LDD  R26,Y+27
0005e0 35a3      	CPI  R26,LOW(0x53)
0005e1 f479      	BRNE _0x7B
0005e2 8daa      	LDD  R26,Y+26
0005e3 34a5      	CPI  R26,LOW(0x45)
0005e4 f461      	BRNE _0x7B
0005e5 8da9      	LDD  R26,Y+25
0005e6 34a3      	CPI  R26,LOW(0x43)
0005e7 f449      	BRNE _0x7B
0005e8 8da8      	LDD  R26,Y+24
0005e9 34af      	CPI  R26,LOW(0x4F)
0005ea f431      	BRNE _0x7B
0005eb 89af      	LDD  R26,Y+23
0005ec 34a6      	CPI  R26,LOW(0x46)
0005ed f419      	BRNE _0x7B
0005ee 89ae      	LDD  R26,Y+22
0005ef 34a6      	CPI  R26,LOW(0x46)
0005f0 f009      	BREQ _0x7C
                 _0x7B:
0005f1 c003      	RJMP _0x7A
                 _0x7C:
0005f2 e0e6      	LDI  R30,LOW(6)
0005f3 87ee      	STD  Y+14,R30
0005f4 c01a      	RJMP _0x67
                 ; 0000 023E         if ((ch3=='G') && (ch4=='E') && (ch5=='T') && (ch6=='A') && (ch7=='N') && (ch8=='T'))	{sms_valid=7;break;}
                 _0x7A:
0005f5 8dab      	LDD  R26,Y+27
0005f6 34a7      	CPI  R26,LOW(0x47)
0005f7 f479      	BRNE _0x7E
0005f8 8daa      	LDD  R26,Y+26
0005f9 34a5      	CPI  R26,LOW(0x45)
0005fa f461      	BRNE _0x7E
0005fb 8da9      	LDD  R26,Y+25
0005fc 35a4      	CPI  R26,LOW(0x54)
0005fd f449      	BRNE _0x7E
0005fe 8da8      	LDD  R26,Y+24
0005ff 34a1      	CPI  R26,LOW(0x41)
000600 f431      	BRNE _0x7E
000601 89af      	LDD  R26,Y+23
000602 34ae      	CPI  R26,LOW(0x4E)
000603 f419      	BRNE _0x7E
000604 89ae      	LDD  R26,Y+22
000605 35a4      	CPI  R26,LOW(0x54)
000606 f009      	BREQ _0x7F
                 _0x7E:
000607 c003      	RJMP _0x7D
                 _0x7F:
000608 e0e7      	LDI  R30,LOW(7)
000609 87ee      	STD  Y+14,R30
00060a c004      	RJMP _0x67
                 ; 0000 023F 	}
                 _0x7D:
00060b 89e8      	LDD  R30,Y+16
00060c 5fef      	SUBI R30,-LOW(1)
00060d 8be8      	STD  Y+16,R30
00060e cf4d      	RJMP _0x66
                 _0x67:
                 ; 0000 0240 
                 ; 0000 0241     if (!sms_valid)
00060f 85ee      	LDD  R30,Y+14
000610 30e0      	CPI  R30,0
000611 f469      	BRNE _0x80
                 ; 0000 0242     {
                 ; 0000 0243         CLSSMS();
000612 dd45      	RCALL _CLSSMS
                 ; 0000 0244         delay_ms(1000);
000613 eee8      	LDI  R30,LOW(1000)
000614 e0f3      	LDI  R31,HIGH(1000)
000615 93fa      	ST   -Y,R31
000616 93ea      	ST   -Y,R30
000617 940e 0c59 	CALL _delay_ms
                 ; 0000 0245         SendSMS("invalid command!");
                +
000619 ede5     +LDI R30 , LOW ( _0x81 + ( 0 ) )
00061a e0f5     +LDI R31 , HIGH ( _0x81 + ( 0 ) )
                 	__POINTW1MN _0x81,0
00061b 93fa      	ST   -Y,R31
00061c 93ea      	ST   -Y,R30
00061d def6      	RCALL _SendSMS
                 ; 0000 0246         return;
00061e c205      	RJMP _0x20A0004
                 ; 0000 0247     }
                 ; 0000 0248 
                 ; 0000 0249 
                 ; 0000 024A     switch (sms_valid)
                 _0x80:
00061f 85ee      	LDD  R30,Y+14
000620 e0f0      	LDI  R31,0
                 ; 0000 024B     {
                 ; 0000 024C         case 1:
000621 30e1      	CPI  R30,LOW(0x1)
000622 e0a0      	LDI  R26,HIGH(0x1)
000623 07fa      	CPC  R31,R26
000624 f011      	BREQ PC+3
000625 940c 06d6 	JMP _0x85
                 ; 0000 024D         counter = 0;
                +
000627 e000     +LDI R16 , LOW ( 0 )
000628 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 024E         faildGPS = 0;
                +
000629 e020     +LDI R18 , LOW ( 0 )
00062a e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 024F         index  = -1;
00062b efef      	LDI  R30,LOW(65535)
00062c efff      	LDI  R31,HIGH(65535)
00062d 87ea      	STD  Y+10,R30
00062e 87fb      	STD  Y+10+1,R31
                 ; 0000 0250         tagpos = 0;
00062f e0e0      	LDI  R30,LOW(0)
000630 87e8      	STD  Y+8,R30
000631 87e9      	STD  Y+8+1,R30
                 ; 0000 0251         lastGetTrueCode=0;
000632 83ee      	STD  Y+6,R30
000633 83ef      	STD  Y+6+1,R30
                 ; 0000 0252         delay_ms(1000);
000634 eee8      	LDI  R30,LOW(1000)
000635 e0f3      	LDI  R31,HIGH(1000)
000636 93fa      	ST   -Y,R31
000637 93ea      	ST   -Y,R30
000638 940e 0c59 	CALL _delay_ms
                 ; 0000 0253 
                 ; 0000 0254         while (rx_counter1>0) getchar1();
                 _0x86:
00063a 91a0 07c8 	LDS  R26,_rx_counter1
00063c 30a1      	CPI  R26,LOW(0x1)
00063d f010      	BRLO _0x88
00063e dc1e      	RCALL _getchar1
00063f cffa      	RJMP _0x86
                 _0x88:
                 ; 0000 0256 PORTB.4=1;
000640 9ac4      	SBI  0x18,4
                 ; 0000 0257 
                 ; 0000 0258         while (1)
                 _0x8B:
                 ; 0000 0259         {
                 ; 0000 025A             ch1=getchar1();
000641 dc1b      	RCALL _getchar1
000642 2f5e      	MOV  R21,R30
                 ; 0000 025B 
                 ; 0000 025C             switch( lastGetTrueCode )
000643 81ee      	LDD  R30,Y+6
000644 81ff      	LDD  R31,Y+6+1
                 ; 0000 025D             {
                 ; 0000 025E                 case 0:
000645 9730      	SBIW R30,0
000646 f439      	BRNE _0x91
                 ; 0000 025F                     if( ch1 == 'A' )
000647 3451      	CPI  R21,65
000648 f421      	BRNE _0x92
                 ; 0000 0260                         lastGetTrueCode = 1;
000649 e0e1      	LDI  R30,LOW(1)
00064a e0f0      	LDI  R31,HIGH(1)
00064b 83ee      	STD  Y+6,R30
00064c 83ff      	STD  Y+6+1,R31
                 ; 0000 0261                 break;
                 _0x92:
00064d c038      	RJMP _0x90
                 ; 0000 0262                 case 1:
                 _0x91:
00064e 30e1      	CPI  R30,LOW(0x1)
00064f e0a0      	LDI  R26,HIGH(0x1)
000650 07fa      	CPC  R31,R26
000651 f439      	BRNE _0x93
                 ; 0000 0263                     if( ch1 == 'N' )
000652 345e      	CPI  R21,78
000653 f421      	BRNE _0x94
                 ; 0000 0264                         lastGetTrueCode = 2;
000654 e0e2      	LDI  R30,LOW(2)
000655 e0f0      	LDI  R31,HIGH(2)
000656 83ee      	STD  Y+6,R30
000657 83ff      	STD  Y+6+1,R31
                 ; 0000 0265                 break;
                 _0x94:
000658 c02d      	RJMP _0x90
                 ; 0000 0266                 case 2:
                 _0x93:
000659 30e2      	CPI  R30,LOW(0x2)
00065a e0a0      	LDI  R26,HIGH(0x2)
00065b 07fa      	CPC  R31,R26
00065c f439      	BRNE _0x95
                 ; 0000 0267                     if( ch1 == ',' )
00065d 325c      	CPI  R21,44
00065e f421      	BRNE _0x96
                 ; 0000 0268                         lastGetTrueCode = 3;
00065f e0e3      	LDI  R30,LOW(3)
000660 e0f0      	LDI  R31,HIGH(3)
000661 83ee      	STD  Y+6,R30
000662 83ff      	STD  Y+6+1,R31
                 ; 0000 0269                 break;
                 _0x96:
000663 c022      	RJMP _0x90
                 ; 0000 026A                 case 3:
                 _0x95:
000664 30e3      	CPI  R30,LOW(0x3)
000665 e0a0      	LDI  R26,HIGH(0x3)
000666 07fa      	CPC  R31,R26
000667 f439      	BRNE _0x97
                 ; 0000 026B                     if( ch1 == ',' )
000668 325c      	CPI  R21,44
000669 f421      	BRNE _0x98
                 ; 0000 026C                         lastGetTrueCode = 4;
00066a e0e4      	LDI  R30,LOW(4)
00066b e0f0      	LDI  R31,HIGH(4)
00066c 83ee      	STD  Y+6,R30
00066d 83ff      	STD  Y+6+1,R31
                 ; 0000 026D                 break;
                 _0x98:
00066e c017      	RJMP _0x90
                 ; 0000 026E                 case 4:
                 _0x97:
00066f 30e4      	CPI  R30,LOW(0x4)
000670 e0a0      	LDI  R26,HIGH(0x4)
000671 07fa      	CPC  R31,R26
000672 f449      	BRNE _0x99
                 ; 0000 026F                     if( ch1 == 'E' || ch1 == 'W' )
000673 3455      	CPI  R21,69
000674 f011      	BREQ _0x9B
000675 3557      	CPI  R21,87
000676 f421      	BRNE _0x9A
                 _0x9B:
                 ; 0000 0270                         lastGetTrueCode = 5;
000677 e0e5      	LDI  R30,LOW(5)
000678 e0f0      	LDI  R31,HIGH(5)
000679 83ee      	STD  Y+6,R30
00067a 83ff      	STD  Y+6+1,R31
                 ; 0000 0271                 break;
                 _0x9A:
00067b c00a      	RJMP _0x90
                 ; 0000 0272                 case 5:
                 _0x99:
00067c 30e5      	CPI  R30,LOW(0x5)
00067d e0a0      	LDI  R26,HIGH(0x5)
00067e 07fa      	CPC  R31,R26
00067f f431      	BRNE _0x90
                 ; 0000 0273                     if( ch1 == ',' )
000680 325c      	CPI  R21,44
000681 f421      	BRNE _0x9E
                 ; 0000 0274                         lastGetTrueCode = 6;
000682 e0e6      	LDI  R30,LOW(6)
000683 e0f0      	LDI  R31,HIGH(6)
000684 83ee      	STD  Y+6,R30
000685 83ff      	STD  Y+6+1,R31
                 ; 0000 0275                 break;
                 _0x9E:
                 ; 0000 0276             }
                 _0x90:
                 ; 0000 0277 
                 ; 0000 0278             if (ch1 == '$' && tagpos )
000686 3254      	CPI  R21,36
000687 f421      	BRNE _0xA0
000688 85e8      	LDD  R30,Y+8
000689 85f9      	LDD  R31,Y+8+1
00068a 9730      	SBIW R30,0
00068b f409      	BRNE _0xA1
                 _0xA0:
00068c c019      	RJMP _0x9F
                 _0xA1:
                 ; 0000 0279             {
                 ; 0000 027A                     if(GPSPosition(pos) && lastGetTrueCode == 6)
00068d 01fe      	MOVW R30,R28
00068e 967c      	ADIW R30,28
00068f 93fa      	ST   -Y,R31
000690 93ea      	ST   -Y,R30
000691 dc1e      	RCALL _GPSPosition
000692 9730      	SBIW R30,0
000693 f021      	BREQ _0xA3
000694 81ae      	LDD  R26,Y+6
000695 81bf      	LDD  R27,Y+6+1
000696 9716      	SBIW R26,6
000697 f009      	BREQ _0xA4
                 _0xA3:
000698 c003      	RJMP _0xA2
                 _0xA4:
                 ; 0000 027B                     {
                 ; 0000 027C                         faildGPS = 0;
                +
000699 e020     +LDI R18 , LOW ( 0 )
00069a e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 027D                         break;
00069b c02d      	RJMP _0x8D
                 ; 0000 027E                     }
                 ; 0000 027F                     else
                 _0xA2:
                 ; 0000 0280                     {
                 ; 0000 0281                         counter++;
                +
00069c 5f0f     +SUBI R16 , LOW ( - 1 )
00069d 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0282                         index  = 0;
00069e e0e0      	LDI  R30,LOW(0)
00069f 87ea      	STD  Y+10,R30
0006a0 87eb      	STD  Y+10+1,R30
                 ; 0000 0283                         tagpos = 0;
0006a1 87e8      	STD  Y+8,R30
0006a2 87e9      	STD  Y+8+1,R30
                 ; 0000 0284                         lastGetTrueCode = 0;
0006a3 83ee      	STD  Y+6,R30
0006a4 83ef      	STD  Y+6+1,R30
                 ; 0000 0285                     }
                 ; 0000 0286             }
                 ; 0000 0287             else if (ch1 == '$')
0006a5 c014      	RJMP _0xA6
                 _0x9F:
0006a6 3254      	CPI  R21,36
0006a7 f469      	BRNE _0xA7
                 ; 0000 0288             {
                 ; 0000 0289                 counter++;
                +
0006a8 5f0f     +SUBI R16 , LOW ( - 1 )
0006a9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 028A                 tagpos++;
0006aa 85e8      	LDD  R30,Y+8
0006ab 85f9      	LDD  R31,Y+8+1
0006ac 9631      	ADIW R30,1
0006ad 87e8      	STD  Y+8,R30
0006ae 87f9      	STD  Y+8+1,R31
                 ; 0000 028B                 index = 0;
0006af e0e0      	LDI  R30,LOW(0)
0006b0 87ea      	STD  Y+10,R30
0006b1 87eb      	STD  Y+10+1,R30
                 ; 0000 028C                 lastGetTrueCode = 0;
0006b2 83ee      	STD  Y+6,R30
0006b3 83ef      	STD  Y+6+1,R30
                 ; 0000 028D             }
                 ; 0000 028E             else
0006b4 c005      	RJMP _0xA8
                 _0xA7:
                 ; 0000 028F                 index++;
0006b5 85ea      	LDD  R30,Y+10
0006b6 85fb      	LDD  R31,Y+10+1
0006b7 9631      	ADIW R30,1
0006b8 87ea      	STD  Y+10,R30
0006b9 87fb      	STD  Y+10+1,R31
                 ; 0000 0290 
                 ; 0000 0291             if( counter > 500 )
                 _0xA8:
                 _0xA6:
                +
0006ba 3f05     +CPI R16 , LOW ( 501 )
0006bb e0e1     +LDI R30 , HIGH ( 501 )
0006bc 071e     +CPC R17 , R30
                 	__CPWRN 16,17,501
0006bd f01c      	BRLT _0xA9
                 ; 0000 0292             {
                 ; 0000 0293                 faildGPS = 1;
                +
0006be e021     +LDI R18 , LOW ( 1 )
0006bf e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 0294                 break;
0006c0 c008      	RJMP _0x8D
                 ; 0000 0295             }
                 ; 0000 0296 
                 ; 0000 0297             pos[index] = ch1;
                 _0xA9:
0006c1 85ea      	LDD  R30,Y+10
0006c2 85fb      	LDD  R31,Y+10+1
0006c3 01de      	MOVW R26,R28
0006c4 965c      	ADIW R26,28
0006c5 0fea      	ADD  R30,R26
0006c6 1ffb      	ADC  R31,R27
0006c7 8350      	ST   Z,R21
                 ; 0000 0298         }
0006c8 cf78      	RJMP _0x8B
                 _0x8D:
                 ; 0000 0299 
                 ; 0000 029A             if( faildGPS )
0006c9 2e02      	MOV  R0,R18
0006ca 2a03      	OR   R0,R19
0006cb f019      	BREQ _0xAA
                 ; 0000 029B             {
                 ; 0000 029C                 SendSMS("data is faild !!!");
                +
0006cc eee6     +LDI R30 , LOW ( _0x81 + ( 17 ) )
0006cd e0f5     +LDI R31 , HIGH ( _0x81 + ( 17 ) )
                 	__POINTW1MN _0x81,17
0006ce c002      	RJMP _0x139
                 ; 0000 029D             }
                 ; 0000 029E             else
                 _0xAA:
                 ; 0000 029F             {
                 ; 0000 02A0                 SendSMS(pos);
0006cf 01fe      	MOVW R30,R28
0006d0 967c      	ADIW R30,28
                 _0x139:
0006d1 93fa      	ST   -Y,R31
0006d2 93ea      	ST   -Y,R30
0006d3 de40      	RCALL _SendSMS
                 ; 0000 02A1             }
                 ; 0000 02A2 
                 ; 0000 02A3             buzzer=0;
0006d4 98c4      	CBI  0x18,4
                 ; 0000 02A4             //SendSMSToNum(caller_id,pos);
                 ; 0000 02A5 
                 ; 0000 02A6         break;
0006d5 c14e      	RJMP _0x84
                 ; 0000 02A7         case 2:
                 _0x85:
0006d6 30e2      	CPI  R30,LOW(0x2)
0006d7 e0a0      	LDI  R26,HIGH(0x2)
0006d8 07fa      	CPC  R31,R26
0006d9 f591      	BRNE _0xAE
                 ; 0000 02A8             alarm=1;
0006da 9ac6      	SBI  0x18,6
                 ; 0000 02A9             delay_ms(2000);
0006db ede0      	LDI  R30,LOW(2000)
0006dc e0f7      	LDI  R31,HIGH(2000)
0006dd 93fa      	ST   -Y,R31
0006de 93ea      	ST   -Y,R30
0006df 940e 0c59 	CALL _delay_ms
                 ; 0000 02AA             puts("AT+CMGS=\"09384198683\" \r");
                +
0006e1 efe8     +LDI R30 , LOW ( _0x81 + ( 35 ) )
0006e2 e0f5     +LDI R31 , HIGH ( _0x81 + ( 35 ) )
                 	__POINTW1MN _0x81,35
0006e3 93fa      	ST   -Y,R31
0006e4 93ea      	ST   -Y,R30
0006e5 940e 0a78 	CALL _puts
                 ; 0000 02AB             putchar (13);
0006e7 e0ed      	LDI  R30,LOW(13)
0006e8 93ea      	ST   -Y,R30
0006e9 db1f      	RCALL _putchar
                 ; 0000 02AC             putchar (10);
0006ea e0ea      	LDI  R30,LOW(10)
0006eb 93ea      	ST   -Y,R30
0006ec db1c      	RCALL _putchar
                 ; 0000 02AD             delay_ms(180);
0006ed ebe4      	LDI  R30,LOW(180)
0006ee e0f0      	LDI  R31,HIGH(180)
0006ef 93fa      	ST   -Y,R31
0006f0 93ea      	ST   -Y,R30
0006f1 940e 0c59 	CALL _delay_ms
                 ; 0000 02AE             printf("Alarm ON");
                +
0006f3 e8e5     +LDI R30 , LOW ( 2 * _0x0 + ( 217 ) )
0006f4 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 217 ) )
                 	__POINTW1FN _0x0,217
0006f5 93fa      	ST   -Y,R31
0006f6 93ea      	ST   -Y,R30
0006f7 e080      	LDI  R24,0
0006f8 940e 0c1d 	CALL _printf
0006fa 9622      	ADIW R28,2
                 ; 0000 02AF             delay_ms(90);
0006fb e5ea      	LDI  R30,LOW(90)
0006fc e0f0      	LDI  R31,HIGH(90)
0006fd 93fa      	ST   -Y,R31
0006fe 93ea      	ST   -Y,R30
0006ff 940e 0c59 	CALL _delay_ms
                 ; 0000 02B0             putchar (26);
000701 e1ea      	LDI  R30,LOW(26)
000702 93ea      	ST   -Y,R30
000703 db05      	RCALL _putchar
                 ; 0000 02B1             delay_ms(200);
000704 ece8      	LDI  R30,LOW(200)
000705 e0f0      	LDI  R31,HIGH(200)
000706 93fa      	ST   -Y,R31
000707 93ea      	ST   -Y,R30
000708 940e 0c59 	CALL _delay_ms
                 ; 0000 02B2             alarm=1;
00070a 9ac6      	SBI  0x18,6
                 ; 0000 02B3         break;
00070b c118      	RJMP _0x84
                 ; 0000 02B4         case 3:
                 _0xAE:
00070c 30e3      	CPI  R30,LOW(0x3)
00070d e0a0      	LDI  R26,HIGH(0x3)
00070e 07fa      	CPC  R31,R26
00070f f599      	BRNE _0xB3
                 ; 0000 02B5             buzzer=0;
000710 98c4      	CBI  0x18,4
                 ; 0000 02B6             alarm=0;
000711 98c6      	CBI  0x18,6
                 ; 0000 02B7             relay=0;
000712 98c5      	CBI  0x18,5
                 ; 0000 02B8             delay_ms(2000);
000713 ede0      	LDI  R30,LOW(2000)
000714 e0f7      	LDI  R31,HIGH(2000)
000715 93fa      	ST   -Y,R31
000716 93ea      	ST   -Y,R30
000717 940e 0c59 	CALL _delay_ms
                 ; 0000 02B9             puts("AT+CMGS=\"09384198683\" \r");
                +
000719 e1e0     +LDI R30 , LOW ( _0x81 + ( 59 ) )
00071a e0f6     +LDI R31 , HIGH ( _0x81 + ( 59 ) )
                 	__POINTW1MN _0x81,59
00071b 93fa      	ST   -Y,R31
00071c 93ea      	ST   -Y,R30
00071d 940e 0a78 	CALL _puts
                 ; 0000 02BA             putchar (13);
00071f e0ed      	LDI  R30,LOW(13)
000720 93ea      	ST   -Y,R30
000721 dae7      	RCALL _putchar
                 ; 0000 02BB             putchar (10);
000722 e0ea      	LDI  R30,LOW(10)
000723 93ea      	ST   -Y,R30
000724 dae4      	RCALL _putchar
                 ; 0000 02BC             delay_ms(180);
000725 ebe4      	LDI  R30,LOW(180)
000726 e0f0      	LDI  R31,HIGH(180)
000727 93fa      	ST   -Y,R31
000728 93ea      	ST   -Y,R30
000729 940e 0c59 	CALL _delay_ms
                 ; 0000 02BD             printf("Silent ON");
                +
00072b e8ee     +LDI R30 , LOW ( 2 * _0x0 + ( 226 ) )
00072c e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 226 ) )
                 	__POINTW1FN _0x0,226
00072d 93fa      	ST   -Y,R31
00072e 93ea      	ST   -Y,R30
00072f e080      	LDI  R24,0
000730 940e 0c1d 	CALL _printf
000732 9622      	ADIW R28,2
                 ; 0000 02BE             delay_ms(90);
000733 e5ea      	LDI  R30,LOW(90)
000734 e0f0      	LDI  R31,HIGH(90)
000735 93fa      	ST   -Y,R31
000736 93ea      	ST   -Y,R30
000737 940e 0c59 	CALL _delay_ms
                 ; 0000 02BF             putchar (26);
000739 e1ea      	LDI  R30,LOW(26)
00073a 93ea      	ST   -Y,R30
00073b dacd      	RCALL _putchar
                 ; 0000 02C0             delay_ms(200);
00073c ece8      	LDI  R30,LOW(200)
00073d e0f0      	LDI  R31,HIGH(200)
00073e 93fa      	ST   -Y,R31
00073f 93ea      	ST   -Y,R30
000740 940e 0c59 	CALL _delay_ms
                 ; 0000 02C1         break;
000742 c0e1      	RJMP _0x84
                 ; 0000 02C2         case 4:
                 _0xB3:
000743 30e4      	CPI  R30,LOW(0x4)
000744 e0a0      	LDI  R26,HIGH(0x4)
000745 07fa      	CPC  R31,R26
000746 f581      	BRNE _0xBA
                 ; 0000 02C3             relay=1;
000747 9ac5      	SBI  0x18,5
                 ; 0000 02C4             delay_ms(2000);
000748 ede0      	LDI  R30,LOW(2000)
000749 e0f7      	LDI  R31,HIGH(2000)
00074a 93fa      	ST   -Y,R31
00074b 93ea      	ST   -Y,R30
00074c 940e 0c59 	CALL _delay_ms
                 ; 0000 02C5             puts("AT+CMGS=\"09384198683\" \r");
                +
00074e e2e8     +LDI R30 , LOW ( _0x81 + ( 83 ) )
00074f e0f6     +LDI R31 , HIGH ( _0x81 + ( 83 ) )
                 	__POINTW1MN _0x81,83
000750 93fa      	ST   -Y,R31
000751 93ea      	ST   -Y,R30
000752 d325      	RCALL _puts
                 ; 0000 02C6             putchar (13);
000753 e0ed      	LDI  R30,LOW(13)
000754 93ea      	ST   -Y,R30
000755 dab3      	RCALL _putchar
                 ; 0000 02C7             putchar (10);
000756 e0ea      	LDI  R30,LOW(10)
000757 93ea      	ST   -Y,R30
000758 dab0      	RCALL _putchar
                 ; 0000 02C8             delay_ms(180);
000759 ebe4      	LDI  R30,LOW(180)
00075a e0f0      	LDI  R31,HIGH(180)
00075b 93fa      	ST   -Y,R31
00075c 93ea      	ST   -Y,R30
00075d 940e 0c59 	CALL _delay_ms
                 ; 0000 02C9             printf("Stop ON");
                +
00075f e9e8     +LDI R30 , LOW ( 2 * _0x0 + ( 236 ) )
000760 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 236 ) )
                 	__POINTW1FN _0x0,236
000761 93fa      	ST   -Y,R31
000762 93ea      	ST   -Y,R30
000763 e080      	LDI  R24,0
000764 940e 0c1d 	CALL _printf
000766 9622      	ADIW R28,2
                 ; 0000 02CA             delay_ms(90);
000767 e5ea      	LDI  R30,LOW(90)
000768 e0f0      	LDI  R31,HIGH(90)
000769 93fa      	ST   -Y,R31
00076a 93ea      	ST   -Y,R30
00076b 940e 0c59 	CALL _delay_ms
                 ; 0000 02CB             putchar (26);
00076d e1ea      	LDI  R30,LOW(26)
00076e 93ea      	ST   -Y,R30
00076f da99      	RCALL _putchar
                 ; 0000 02CC             delay_ms(200);
000770 ece8      	LDI  R30,LOW(200)
000771 e0f0      	LDI  R31,HIGH(200)
000772 93fa      	ST   -Y,R31
000773 93ea      	ST   -Y,R30
000774 940e 0c59 	CALL _delay_ms
                 ; 0000 02CD         break;
000776 c0ad      	RJMP _0x84
                 ; 0000 02CE         case 5:
                 _0xBA:
000777 30e5      	CPI  R30,LOW(0x5)
000778 e0a0      	LDI  R26,HIGH(0x5)
000779 07fa      	CPC  R31,R26
00077a f011      	BREQ PC+3
00077b 940c 07c2 	JMP _0xBD
                 ; 0000 02CF             alarm=1;
00077d 9ac6      	SBI  0x18,6
                 ; 0000 02D0             delay_ms(70);
00077e e4e6      	LDI  R30,LOW(70)
00077f e0f0      	LDI  R31,HIGH(70)
000780 93fa      	ST   -Y,R31
000781 93ea      	ST   -Y,R30
000782 940e 0c59 	CALL _delay_ms
                 ; 0000 02D1             alarm=0;
000784 98c6      	CBI  0x18,6
                 ; 0000 02D2             delay_ms(2000);
000785 ede0      	LDI  R30,LOW(2000)
000786 e0f7      	LDI  R31,HIGH(2000)
000787 93fa      	ST   -Y,R31
000788 93ea      	ST   -Y,R30
000789 940e 0c59 	CALL _delay_ms
                 ; 0000 02D3             puts("AT+CMGS=\"09384198683\" \r");
                +
00078b e4e0     +LDI R30 , LOW ( _0x81 + ( 107 ) )
00078c e0f6     +LDI R31 , HIGH ( _0x81 + ( 107 ) )
                 	__POINTW1MN _0x81,107
00078d 93fa      	ST   -Y,R31
00078e 93ea      	ST   -Y,R30
00078f d2e8      	RCALL _puts
                 ; 0000 02D4             putchar (13);
000790 e0ed      	LDI  R30,LOW(13)
000791 93ea      	ST   -Y,R30
000792 da76      	RCALL _putchar
                 ; 0000 02D5             putchar (10);
000793 e0ea      	LDI  R30,LOW(10)
000794 93ea      	ST   -Y,R30
000795 da73      	RCALL _putchar
                 ; 0000 02D6             delay_ms(180);
000796 ebe4      	LDI  R30,LOW(180)
000797 e0f0      	LDI  R31,HIGH(180)
000798 93fa      	ST   -Y,R31
000799 93ea      	ST   -Y,R30
00079a 940e 0c59 	CALL _delay_ms
                 ; 0000 02D7             if( securityMode[1] == 'N' )
00079c 01f4      	MOVW R30,R8
00079d 81a1      	LDD  R26,Z+1
00079e 34ae      	CPI  R26,LOW(0x4E)
00079f f419      	BRNE _0xC2
                 ; 0000 02D8                 printf("SECURITY was ON");
                +
0007a0 eae0     +LDI R30 , LOW ( 2 * _0x0 + ( 244 ) )
0007a1 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 244 ) )
                 	__POINTW1FN _0x0,244
0007a2 c002      	RJMP _0x13A
                 ; 0000 02D9             else
                 _0xC2:
                 ; 0000 02DA                 printf("SECURITY is ON");
                +
0007a3 ebe0     +LDI R30 , LOW ( 2 * _0x0 + ( 260 ) )
0007a4 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 260 ) )
                 	__POINTW1FN _0x0,260
                 _0x13A:
0007a5 93fa      	ST   -Y,R31
0007a6 93ea      	ST   -Y,R30
0007a7 e080      	LDI  R24,0
0007a8 940e 0c1d 	CALL _printf
0007aa 9622      	ADIW R28,2
                 ; 0000 02DB             delay_ms(90);
0007ab e5ea      	LDI  R30,LOW(90)
0007ac e0f0      	LDI  R31,HIGH(90)
0007ad 93fa      	ST   -Y,R31
0007ae 93ea      	ST   -Y,R30
0007af 940e 0c59 	CALL _delay_ms
                 ; 0000 02DC             putchar (26);
0007b1 e1ea      	LDI  R30,LOW(26)
0007b2 93ea      	ST   -Y,R30
0007b3 da55      	RCALL _putchar
                 ; 0000 02DD             delay_ms(200);
0007b4 ece8      	LDI  R30,LOW(200)
0007b5 e0f0      	LDI  R31,HIGH(200)
0007b6 93fa      	ST   -Y,R31
0007b7 93ea      	ST   -Y,R30
0007b8 940e 0c59 	CALL _delay_ms
                 ; 0000 02DE             securityMode[0] = 'O';
0007ba 01d4      	MOVW R26,R8
0007bb e4ef      	LDI  R30,LOW(79)
0007bc 93ec      	ST   X,R30
                 ; 0000 02DF             securityMode[1] = 'N';
0007bd 01f4      	MOVW R30,R8
0007be 9631      	ADIW R30,1
0007bf e4ae      	LDI  R26,LOW(78)
0007c0 83a0      	STD  Z+0,R26
                 ; 0000 02E0         break;
0007c1 c062      	RJMP _0x84
                 ; 0000 02E1         case 6:
                 _0xBD:
0007c2 30e6      	CPI  R30,LOW(0x6)
0007c3 e0a0      	LDI  R26,HIGH(0x6)
0007c4 07fa      	CPC  R31,R26
0007c5 f011      	BREQ PC+3
0007c6 940c 0812 	JMP _0xC4
                 ; 0000 02E2             alarm=1;
0007c8 9ac6      	SBI  0x18,6
                 ; 0000 02E3             delay_ms(70);
0007c9 e4e6      	LDI  R30,LOW(70)
0007ca e0f0      	LDI  R31,HIGH(70)
0007cb 93fa      	ST   -Y,R31
0007cc 93ea      	ST   -Y,R30
0007cd 940e 0c59 	CALL _delay_ms
                 ; 0000 02E4             alarm=0;
0007cf 98c6      	CBI  0x18,6
                 ; 0000 02E5             delay_ms(2000);
0007d0 ede0      	LDI  R30,LOW(2000)
0007d1 e0f7      	LDI  R31,HIGH(2000)
0007d2 93fa      	ST   -Y,R31
0007d3 93ea      	ST   -Y,R30
0007d4 940e 0c59 	CALL _delay_ms
                 ; 0000 02E6             puts("AT+CMGS=\"09384198683\" \r");
                +
0007d6 e5e8     +LDI R30 , LOW ( _0x81 + ( 131 ) )
0007d7 e0f6     +LDI R31 , HIGH ( _0x81 + ( 131 ) )
                 	__POINTW1MN _0x81,131
0007d8 93fa      	ST   -Y,R31
0007d9 93ea      	ST   -Y,R30
0007da d29d      	RCALL _puts
                 ; 0000 02E7             putchar (13);
0007db e0ed      	LDI  R30,LOW(13)
0007dc 93ea      	ST   -Y,R30
0007dd da2b      	RCALL _putchar
                 ; 0000 02E8             putchar (10);
0007de e0ea      	LDI  R30,LOW(10)
0007df 93ea      	ST   -Y,R30
0007e0 da28      	RCALL _putchar
                 ; 0000 02E9             delay_ms(180);
0007e1 ebe4      	LDI  R30,LOW(180)
0007e2 e0f0      	LDI  R31,HIGH(180)
0007e3 93fa      	ST   -Y,R31
0007e4 93ea      	ST   -Y,R30
0007e5 940e 0c59 	CALL _delay_ms
                 ; 0000 02EA             if( securityMode[1] == 'N' )
0007e7 01f4      	MOVW R30,R8
0007e8 81a1      	LDD  R26,Z+1
0007e9 34ae      	CPI  R26,LOW(0x4E)
0007ea f419      	BRNE _0xC9
                 ; 0000 02EB                 printf("SECURITY is OFF");
                +
0007eb ebef     +LDI R30 , LOW ( 2 * _0x0 + ( 275 ) )
0007ec e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 275 ) )
                 	__POINTW1FN _0x0,275
0007ed c002      	RJMP _0x13B
                 ; 0000 02EC             else
                 _0xC9:
                 ; 0000 02ED                 printf("SECURITY was OFF");
                +
0007ee ecef     +LDI R30 , LOW ( 2 * _0x0 + ( 291 ) )
0007ef e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 291 ) )
                 	__POINTW1FN _0x0,291
                 _0x13B:
0007f0 93fa      	ST   -Y,R31
0007f1 93ea      	ST   -Y,R30
0007f2 e080      	LDI  R24,0
0007f3 940e 0c1d 	CALL _printf
0007f5 9622      	ADIW R28,2
                 ; 0000 02EE             delay_ms(90);
0007f6 e5ea      	LDI  R30,LOW(90)
0007f7 e0f0      	LDI  R31,HIGH(90)
0007f8 93fa      	ST   -Y,R31
0007f9 93ea      	ST   -Y,R30
0007fa 940e 0c59 	CALL _delay_ms
                 ; 0000 02EF             putchar (26);
0007fc e1ea      	LDI  R30,LOW(26)
0007fd 93ea      	ST   -Y,R30
0007fe 940e 0209 	CALL _putchar
                 ; 0000 02F0             delay_ms(200);
000800 ece8      	LDI  R30,LOW(200)
000801 e0f0      	LDI  R31,HIGH(200)
000802 93fa      	ST   -Y,R31
000803 93ea      	ST   -Y,R30
000804 940e 0c59 	CALL _delay_ms
                 ; 0000 02F1             alarm=0;
000806 98c6      	CBI  0x18,6
                 ; 0000 02F2             securityMode[0] = 'O';
000807 01d4      	MOVW R26,R8
000808 e4ef      	LDI  R30,LOW(79)
000809 93ec      	ST   X,R30
                 ; 0000 02F3             securityMode[1] = 'F';
00080a 01f4      	MOVW R30,R8
00080b 9631      	ADIW R30,1
00080c e4a6      	LDI  R26,LOW(70)
00080d 83a0      	STD  Z+0,R26
                 ; 0000 02F4             securityMode[2] = 'F';
00080e 01f4      	MOVW R30,R8
00080f 9632      	ADIW R30,2
000810 83a0      	STD  Z+0,R26
                 ; 0000 02F5         break;
000811 c012      	RJMP _0x84
                 ; 0000 02F6         case 7:
                 _0xC4:
000812 30e7      	CPI  R30,LOW(0x7)
000813 e0a0      	LDI  R26,HIGH(0x7)
000814 07fa      	CPC  R31,R26
000815 f441      	BRNE _0xCE
                 ; 0000 02F7             delay_ms(2000);
000816 ede0      	LDI  R30,LOW(2000)
000817 e0f7      	LDI  R31,HIGH(2000)
000818 93fa      	ST   -Y,R31
000819 93ea      	ST   -Y,R30
00081a 940e 0c59 	CALL _delay_ms
                 ; 0000 02F8             getAntenna();
00081c d213      	RCALL _getAntenna
                 ; 0000 02F9         break;
00081d c006      	RJMP _0x84
                 ; 0000 02FA         default:
                 _0xCE:
                 ; 0000 02FB             SendSMS("invalid command");
                +
00081e e7e0     +LDI R30 , LOW ( _0x81 + ( 155 ) )
00081f e0f6     +LDI R31 , HIGH ( _0x81 + ( 155 ) )
                 	__POINTW1MN _0x81,155
000820 93fa      	ST   -Y,R31
000821 93ea      	ST   -Y,R30
000822 dcf1      	RCALL _SendSMS
                 ; 0000 02FC             relay=0;
000823 98c5      	CBI  0x18,5
                 ; 0000 02FD         break;
                 ; 0000 02FE         }
                 _0x84:
                 ; 0000 02FF 
                 ; 0000 0300 }
                 _0x20A0004:
000824 940e 0c99 	CALL __LOADLOCR6
000826 966c      	ADIW R28,28
000827 9508      	RET
                 
                 	.DSEG
                 _0x81:
0005d5           	.BYTE 0xAB
                 ;///////////////////////////////////////////////////////////////////////////////
                 ;void process_data(void)
                 ; 0000 0303 {
                 
                 	.CSEG
                 _process_data:
                 ; 0000 0304     unsigned char ch1,ch2,ch3,ch4,ch5,ch6;
                 ; 0000 0305     unsigned char i=0,memory_index,temp,sms_ready=0;
                 ; 0000 0306     data_ready=0;
000828 9724      	SBIW R28,4
000829 e0e0      	LDI  R30,LOW(0)
00082a 83e8      	ST   Y,R30
00082b 83e9      	STD  Y+1,R30
00082c 83ea      	STD  Y+2,R30
00082d 83eb      	STD  Y+3,R30
00082e 940e 0c92 	CALL __SAVELOCR6
                 ;	ch1 -> R17
                 ;	ch2 -> R16
                 ;	ch3 -> R19
                 ;	ch4 -> R18
                 ;	ch5 -> R21
                 ;	ch6 -> R20
                 ;	i -> Y+9
                 ;	memory_index -> Y+8
                 ;	temp -> Y+7
                 ;	sms_ready -> Y+6
000830 94e8      	CLT
000831 f820      	BLD  R2,0
                 ; 0000 0307     delay_ms(1000);
000832 eee8      	LDI  R30,LOW(1000)
000833 e0f3      	LDI  R31,HIGH(1000)
000834 93fa      	ST   -Y,R31
000835 93ea      	ST   -Y,R30
000836 940e 0c59 	CALL _delay_ms
                 ; 0000 0308 
                 ; 0000 0309     led1=1;
000838 9aa8      	SBI  0x15,0
                 ; 0000 030A 
                 ; 0000 030B     while (rx_counter0>0)
                 _0xD3:
000839 e0e0      	LDI  R30,LOW(0)
00083a 15ed      	CP   R30,R13
00083b f508      	BRSH _0xD5
                 ; 0000 030C 	{
                 ; 0000 030D 	    ch1=ch2;
00083c 2f10      	MOV  R17,R16
                 ; 0000 030E 	    ch2=ch3;
00083d 2f03      	MOV  R16,R19
                 ; 0000 030F 	    ch3=ch4;
00083e 2f32      	MOV  R19,R18
                 ; 0000 0310 	    ch4=ch5;
00083f 2f25      	MOV  R18,R21
                 ; 0000 0311 	    ch5=ch6;
000840 2f54      	MOV  R21,R20
                 ; 0000 0312 	    ch6=getchar();
000841 940e 01d4 	CALL _getchar
000843 2f4e      	MOV  R20,R30
                 ; 0000 0313         //buzzer=1;delay_ms(50);
                 ; 0000 0314         //buzzer=0;delay_ms(50);
                 ; 0000 0315 	    if ((ch1=='+') && (ch2=='C') && (ch3=='M') && (ch4=='T') && (ch5=='I') && (ch6==':'))	{buzzer=1;delay_ms(100);buzzer=0;sms_ready=1;break;}
000844 321b      	CPI  R17,43
000845 f451      	BRNE _0xD7
000846 3403      	CPI  R16,67
000847 f441      	BRNE _0xD7
000848 343d      	CPI  R19,77
000849 f431      	BRNE _0xD7
00084a 3524      	CPI  R18,84
00084b f421      	BRNE _0xD7
00084c 3459      	CPI  R21,73
00084d f411      	BRNE _0xD7
00084e 334a      	CPI  R20,58
00084f f009      	BREQ _0xD8
                 _0xD7:
000850 c00b      	RJMP _0xD6
                 _0xD8:
000851 9ac4      	SBI  0x18,4
000852 e6e4      	LDI  R30,LOW(100)
000853 e0f0      	LDI  R31,HIGH(100)
000854 93fa      	ST   -Y,R31
000855 93ea      	ST   -Y,R30
000856 940e 0c59 	CALL _delay_ms
000858 98c4      	CBI  0x18,4
000859 e0e1      	LDI  R30,LOW(1)
00085a 83ee      	STD  Y+6,R30
00085b c001      	RJMP _0xD5
                 ; 0000 0316 	}
                 _0xD6:
00085c cfdc      	RJMP _0xD3
                 _0xD5:
                 ; 0000 0317     if (!sms_ready)	return;
00085d 81ee      	LDD  R30,Y+6
00085e 30e0      	CPI  R30,0
00085f f409      	BRNE _0xDD
000860 c0ce      	RJMP _0x20A0003
                 ; 0000 0318 
                 ; 0000 0319    delay_ms(1000);
                 _0xDD:
000861 eee8      	LDI  R30,LOW(1000)
000862 e0f3      	LDI  R31,HIGH(1000)
000863 93fa      	ST   -Y,R31
000864 93ea      	ST   -Y,R30
000865 940e 0c59 	CALL _delay_ms
                 ; 0000 031A /*
                 ; 0000 031B     while(getchar()!=',');
                 ; 0000 031C     char1=getchar();
                 ; 0000 031D     //char2=getchar();
                 ; 0000 031E     //char3=getchar();
                 ; 0000 031F 
                 ; 0000 0320         puts("AT+CMGS=\"09384198683\" \r");
                 ; 0000 0321         putchar (13);
                 ; 0000 0322 	    putchar (10);
                 ; 0000 0323         delay_ms(180);
                 ; 0000 0324         putchar(char1);delay_ms(50);
                 ; 0000 0325         //putchar(char2);delay_ms(50);
                 ; 0000 0326         //putchar(char3);delay_ms(50);
                 ; 0000 0327         putchar('.');delay_ms(50);
                 ; 0000 0328         delay_ms(90);
                 ; 0000 0329         putchar (26);
                 ; 0000 032A         delay_ms(200);
                 ; 0000 032B 
                 ; 0000 032C         delay_ms(15000);
                 ; 0000 032D         delay_ms(2000);
                 ; 0000 032E 
                 ; 0000 032F  */
                 ; 0000 0330     while (rx_counter0>0)	getchar();
                 _0xDE:
000867 e0e0      	LDI  R30,LOW(0)
000868 15ed      	CP   R30,R13
000869 f418      	BRSH _0xE0
00086a 940e 01d4 	CALL _getchar
00086c cffa      	RJMP _0xDE
                 _0xE0:
                 ; 0000 0332 PORTC.0=0;PORTC.1=1;
00086d 98a8      	CBI  0x15,0
00086e 9aa9      	SBI  0x15,1
                 ; 0000 0333 
                 ; 0000 0334     putchar('A');//delay_ms(50);
00086f e4e1      	LDI  R30,LOW(65)
000870 93ea      	ST   -Y,R30
000871 940e 0209 	CALL _putchar
                 ; 0000 0335     putchar('T');//delay_ms(50);
000873 e5e4      	LDI  R30,LOW(84)
000874 93ea      	ST   -Y,R30
000875 940e 0209 	CALL _putchar
                 ; 0000 0336     putchar('+');//delay_ms(50);
000877 e2eb      	LDI  R30,LOW(43)
000878 93ea      	ST   -Y,R30
000879 940e 0209 	CALL _putchar
                 ; 0000 0337     putchar('C');//delay_ms(50);
00087b e4e3      	LDI  R30,LOW(67)
00087c 93ea      	ST   -Y,R30
00087d 940e 0209 	CALL _putchar
                 ; 0000 0338     putchar('M');//delay_ms(50);
00087f e4ed      	LDI  R30,LOW(77)
000880 93ea      	ST   -Y,R30
000881 940e 0209 	CALL _putchar
                 ; 0000 0339     putchar('G');//delay_ms(50);
000883 e4e7      	LDI  R30,LOW(71)
000884 93ea      	ST   -Y,R30
000885 940e 0209 	CALL _putchar
                 ; 0000 033A     putchar('R');//delay_ms(50);
000887 e5e2      	LDI  R30,LOW(82)
000888 93ea      	ST   -Y,R30
000889 940e 0209 	CALL _putchar
                 ; 0000 033B     putchar('=');//delay_ms(50);
00088b e3ed      	LDI  R30,LOW(61)
00088c 93ea      	ST   -Y,R30
00088d 940e 0209 	CALL _putchar
                 ; 0000 033C     putchar('1');//delay_ms(50);
00088f e3e1      	LDI  R30,LOW(49)
000890 93ea      	ST   -Y,R30
000891 940e 0209 	CALL _putchar
                 ; 0000 033D     putchar(13);//delay_ms(50);
000893 e0ed      	LDI  R30,LOW(13)
000894 93ea      	ST   -Y,R30
000895 940e 0209 	CALL _putchar
                 ; 0000 033E     putchar(10);//delay_ms(50);
000897 e0ea      	LDI  R30,LOW(10)
000898 93ea      	ST   -Y,R30
000899 940e 0209 	CALL _putchar
                 ; 0000 033F     delay_ms(6000);
00089b e7e0      	LDI  R30,LOW(6000)
00089c e1f7      	LDI  R31,HIGH(6000)
00089d 93fa      	ST   -Y,R31
00089e 93ea      	ST   -Y,R30
00089f 940e 0c59 	CALL _delay_ms
                 ; 0000 0340 
                 ; 0000 0341     for (i=0;i<3;i++)	while(getchar()!='"');
0008a1 e0e0      	LDI  R30,LOW(0)
0008a2 87e9      	STD  Y+9,R30
                 _0xE6:
0008a3 85a9      	LDD  R26,Y+9
0008a4 30a3      	CPI  R26,LOW(0x3)
0008a5 f440      	BRSH _0xE7
                 _0xE8:
0008a6 940e 01d4 	CALL _getchar
0008a8 32e2      	CPI  R30,LOW(0x22)
0008a9 f7e1      	BRNE _0xE8
0008aa 85e9      	LDD  R30,Y+9
0008ab 5fef      	SUBI R30,-LOW(1)
0008ac 87e9      	STD  Y+9,R30
0008ad cff5      	RJMP _0xE6
                 _0xE7:
                 ; 0000 0342 
                 ; 0000 0343 //    alarm=1;delay_ms(1000);alarm=0;
                 ; 0000 0344 
                 ; 0000 0345 
                 ; 0000 0346     for (i=0;i<20;i++) caller_id[i]=0;
0008ae e0e0      	LDI  R30,LOW(0)
0008af 87e9      	STD  Y+9,R30
                 _0xEC:
0008b0 85a9      	LDD  R26,Y+9
0008b1 31a4      	CPI  R26,LOW(0x14)
0008b2 f450      	BRSH _0xED
0008b3 85e9      	LDD  R30,Y+9
0008b4 e0f0      	LDI  R31,0
0008b5 52ec      	SUBI R30,LOW(-_caller_id)
0008b6 4ff9      	SBCI R31,HIGH(-_caller_id)
0008b7 e0a0      	LDI  R26,LOW(0)
0008b8 83a0      	STD  Z+0,R26
0008b9 85e9      	LDD  R30,Y+9
0008ba 5fef      	SUBI R30,-LOW(1)
0008bb 87e9      	STD  Y+9,R30
0008bc cff3      	RJMP _0xEC
                 _0xED:
                 ; 0000 0347 for (i=1;i<20;i++)
0008bd e0e1      	LDI  R30,LOW(1)
0008be 87e9      	STD  Y+9,R30
                 _0xEF:
0008bf 85a9      	LDD  R26,Y+9
0008c0 31a4      	CPI  R26,LOW(0x14)
0008c1 f478      	BRSH _0xF0
                 ; 0000 0348 	{
                 ; 0000 0349 	    temp=getchar();
0008c2 940e 01d4 	CALL _getchar
0008c4 83ef      	STD  Y+7,R30
                 ; 0000 034A 	    if (temp=='"') break;
0008c5 81af      	LDD  R26,Y+7
0008c6 32a2      	CPI  R26,LOW(0x22)
0008c7 f049      	BREQ _0xF0
                 ; 0000 034B 	    caller_id[i]=temp;
0008c8 85e9      	LDD  R30,Y+9
0008c9 e0f0      	LDI  R31,0
0008ca 52ec      	SUBI R30,LOW(-_caller_id)
0008cb 4ff9      	SBCI R31,HIGH(-_caller_id)
0008cc 83a0      	STD  Z+0,R26
                 ; 0000 034C 	}
0008cd 85e9      	LDD  R30,Y+9
0008ce 5fef      	SUBI R30,-LOW(1)
0008cf 87e9      	STD  Y+9,R30
0008d0 cfee      	RJMP _0xEF
                 _0xF0:
                 ; 0000 034D     caller_id[0]=i-1;
0008d1 85e9      	LDD  R30,Y+9
0008d2 e0f0      	LDI  R31,0
0008d3 9731      	SBIW R30,1
0008d4 93e0 06d4 	STS  _caller_id,R30
                 ; 0000 034E     delay_ms(1000);
0008d6 eee8      	LDI  R30,LOW(1000)
0008d7 e0f3      	LDI  R31,HIGH(1000)
0008d8 93fa      	ST   -Y,R31
0008d9 93ea      	ST   -Y,R30
0008da 940e 0c59 	CALL _delay_ms
                 ; 0000 034F 
                 ; 0000 0350     while (rx_counter0!=0)
                 _0xF2:
0008dc 20dd      	TST  R13
0008dd f059      	BREQ _0xF4
                 ; 0000 0351 	{
                 ; 0000 0352 	    ch1=ch2;
0008de 2f10      	MOV  R17,R16
                 ; 0000 0353 	    ch2=getchar();
0008df 940e 01d4 	CALL _getchar
0008e1 2f0e      	MOV  R16,R30
                 ; 0000 0354 	    if ((ch1==13)&&(ch2==10)) break;
0008e2 301d      	CPI  R17,13
0008e3 f411      	BRNE _0xF6
0008e4 300a      	CPI  R16,10
0008e5 f009      	BREQ _0xF7
                 _0xF6:
0008e6 c001      	RJMP _0xF5
                 _0xF7:
0008e7 c001      	RJMP _0xF4
                 ; 0000 0355 	}
                 _0xF5:
0008e8 cff3      	RJMP _0xF2
                 _0xF4:
                 ; 0000 0356 
                 ; 0000 0357     i=0;
0008e9 e0e0      	LDI  R30,LOW(0)
0008ea 87e9      	STD  Y+9,R30
                 ; 0000 0358     while (1)
                 _0xF8:
                 ; 0000 0359 	{
                 ; 0000 035A 	    ch1=ch2;
0008eb 2f10      	MOV  R17,R16
                 ; 0000 035B 	    ch2=getchar();
0008ec 940e 01d4 	CALL _getchar
0008ee 2f0e      	MOV  R16,R30
                 ; 0000 035C 	    if ((ch1='O')&&(ch2=='K')) break;
0008ef e4ef      	LDI  R30,LOW(79)
0008f0 2f1e      	MOV  R17,R30
0008f1 30e0      	CPI  R30,0
0008f2 f011      	BREQ _0xFC
0008f3 340b      	CPI  R16,75
0008f4 f009      	BREQ _0xFD
                 _0xFC:
0008f5 c001      	RJMP _0xFB
                 _0xFD:
0008f6 c00b      	RJMP _0xFA
                 ; 0000 035D 
                 ; 0000 035E 	    sms_in_e2prom[++i]=ch2;
                 _0xFB:
0008f7 85e9      	LDD  R30,Y+9
0008f8 5fef      	SUBI R30,-LOW(1)
0008f9 87e9      	STD  Y+9,R30
0008fa e0f0      	LDI  R31,0
0008fb 50e0      	SUBI R30,LOW(-_sms_in_e2prom)
0008fc 40f0      	SBCI R31,HIGH(-_sms_in_e2prom)
0008fd 01df      	MOVW R26,R30
0008fe 2fe0      	MOV  R30,R16
0008ff 940e 0c81 	CALL __EEPROMWRB
                 ; 0000 035F 	}
000901 cfe9      	RJMP _0xF8
                 _0xFA:
                 ; 0000 0360     sms_in_e2prom[0]=i;
000902 85e9      	LDD  R30,Y+9
000903 e0a0      	LDI  R26,LOW(_sms_in_e2prom)
000904 e0b0      	LDI  R27,HIGH(_sms_in_e2prom)
000905 940e 0c81 	CALL __EEPROMWRB
                 ; 0000 0361     while (rx_counter0>0)	getchar();
                 _0xFE:
000907 e0e0      	LDI  R30,LOW(0)
000908 15ed      	CP   R30,R13
000909 f418      	BRSH _0x100
00090a 940e 01d4 	CALL _getchar
00090c cffa      	RJMP _0xFE
                 _0x100:
                 ; 0000 0365 puts("AT+CMGD=1 \r");delay_ms(1000);
                +
00090d e8e0     +LDI R30 , LOW ( _0x101 + ( 0 ) )
00090e e0f6     +LDI R31 , HIGH ( _0x101 + ( 0 ) )
                 	__POINTW1MN _0x101,0
00090f 93fa      	ST   -Y,R31
000910 93ea      	ST   -Y,R30
000911 d166      	RCALL _puts
000912 eee8      	LDI  R30,LOW(1000)
000913 e0f3      	LDI  R31,HIGH(1000)
000914 93fa      	ST   -Y,R31
000915 93ea      	ST   -Y,R30
000916 940e 0c59 	CALL _delay_ms
                 ; 0000 0366     puts("AT+CMGD=1 \r");delay_ms(1000);
                +
000918 e8ec     +LDI R30 , LOW ( _0x101 + ( 12 ) )
000919 e0f6     +LDI R31 , HIGH ( _0x101 + ( 12 ) )
                 	__POINTW1MN _0x101,12
00091a 93fa      	ST   -Y,R31
00091b 93ea      	ST   -Y,R30
00091c d15b      	RCALL _puts
00091d eee8      	LDI  R30,LOW(1000)
00091e e0f3      	LDI  R31,HIGH(1000)
00091f 93fa      	ST   -Y,R31
000920 93ea      	ST   -Y,R30
000921 940e 0c59 	CALL _delay_ms
                 ; 0000 0367     puts("AT+CMGD=2 \r");delay_ms(1000);
                +
000923 e9e8     +LDI R30 , LOW ( _0x101 + ( 24 ) )
000924 e0f6     +LDI R31 , HIGH ( _0x101 + ( 24 ) )
                 	__POINTW1MN _0x101,24
000925 93fa      	ST   -Y,R31
000926 93ea      	ST   -Y,R30
000927 d150      	RCALL _puts
000928 eee8      	LDI  R30,LOW(1000)
000929 e0f3      	LDI  R31,HIGH(1000)
00092a 93fa      	ST   -Y,R31
00092b 93ea      	ST   -Y,R30
00092c 940e 0c59 	CALL _delay_ms
                 ; 0000 0368     process_sms();
00092e dc0e      	RCALL _process_sms
                 ; 0000 0369 
                 ; 0000 036A 
                 ; 0000 036B }
                 _0x20A0003:
00092f 940e 0c99 	CALL __LOADLOCR6
000931 962a      	ADIW R28,10
000932 9508      	RET
                 
                 	.DSEG
                 _0x101:
000680           	.BYTE 0x24
                 ;///////////////////////////////////////////////////////////////////////////////
                 ;void echooff(void)
                 ; 0000 036E {
                 
                 	.CSEG
                 _echooff:
000933 92ff      	PUSH R15
                 ; 0000 036F bit flag=1;
                 ; 0000 0370 char ch1,ch2;
                 ; 0000 0371 while (flag)
000934 931a      	ST   -Y,R17
000935 930a      	ST   -Y,R16
                 ;	flag -> R15.0
                 ;	ch1 -> R17
                 ;	ch2 -> R16
000936 e0e1      	LDI  R30,LOW(1)
000937 2efe      	MOV  R15,R30
                 _0x102:
000938 fef0      	SBRS R15,0
000939 c059      	RJMP _0x104
                 ; 0000 0372 	{
                 ; 0000 0373 	putchar ('A');delay_ms(50);
00093a e4e1      	LDI  R30,LOW(65)
00093b 93ea      	ST   -Y,R30
00093c 940e 0209 	CALL _putchar
00093e e3e2      	LDI  R30,LOW(50)
00093f e0f0      	LDI  R31,HIGH(50)
000940 93fa      	ST   -Y,R31
000941 93ea      	ST   -Y,R30
000942 940e 0c59 	CALL _delay_ms
                 ; 0000 0374 	putchar ('T');delay_ms(50);
000944 e5e4      	LDI  R30,LOW(84)
000945 93ea      	ST   -Y,R30
000946 940e 0209 	CALL _putchar
000948 e3e2      	LDI  R30,LOW(50)
000949 e0f0      	LDI  R31,HIGH(50)
00094a 93fa      	ST   -Y,R31
00094b 93ea      	ST   -Y,R30
00094c 940e 0c59 	CALL _delay_ms
                 ; 0000 0375 	putchar ('E');delay_ms(50);
00094e e4e5      	LDI  R30,LOW(69)
00094f 93ea      	ST   -Y,R30
000950 940e 0209 	CALL _putchar
000952 e3e2      	LDI  R30,LOW(50)
000953 e0f0      	LDI  R31,HIGH(50)
000954 93fa      	ST   -Y,R31
000955 93ea      	ST   -Y,R30
000956 940e 0c59 	CALL _delay_ms
                 ; 0000 0376 	putchar ('0');delay_ms(50);
000958 e3e0      	LDI  R30,LOW(48)
000959 93ea      	ST   -Y,R30
00095a 940e 0209 	CALL _putchar
00095c e3e2      	LDI  R30,LOW(50)
00095d e0f0      	LDI  R31,HIGH(50)
00095e 93fa      	ST   -Y,R31
00095f 93ea      	ST   -Y,R30
000960 940e 0c59 	CALL _delay_ms
                 ; 0000 0377 	putchar (13);delay_ms(50);
000962 e0ed      	LDI  R30,LOW(13)
000963 93ea      	ST   -Y,R30
000964 940e 0209 	CALL _putchar
000966 e3e2      	LDI  R30,LOW(50)
000967 e0f0      	LDI  R31,HIGH(50)
000968 93fa      	ST   -Y,R31
000969 93ea      	ST   -Y,R30
00096a 940e 0c59 	CALL _delay_ms
                 ; 0000 0378 	putchar (10);delay_ms(50);
00096c e0ea      	LDI  R30,LOW(10)
00096d 93ea      	ST   -Y,R30
00096e 940e 0209 	CALL _putchar
000970 e3e2      	LDI  R30,LOW(50)
000971 e0f0      	LDI  R31,HIGH(50)
000972 93fa      	ST   -Y,R31
000973 93ea      	ST   -Y,R30
000974 940e 0c59 	CALL _delay_ms
                 ; 0000 0379 	delay_ms(500);
000976 efe4      	LDI  R30,LOW(500)
000977 e0f1      	LDI  R31,HIGH(500)
000978 93fa      	ST   -Y,R31
000979 93ea      	ST   -Y,R30
00097a 940e 0c59 	CALL _delay_ms
                 ; 0000 037A 	while (rx_counter0>0)
                 _0x105:
00097c e0e0      	LDI  R30,LOW(0)
00097d 15ed      	CP   R30,R13
00097e f468      	BRSH _0x107
                 ; 0000 037B 		{
                 ; 0000 037C 		ch1=ch2;
00097f 2f10      	MOV  R17,R16
                 ; 0000 037D 		ch2=getchar();
000980 940e 01d4 	CALL _getchar
000982 2f0e      	MOV  R16,R30
                 ; 0000 037E 		if ((ch1=='O') && (ch2=='K'))	{flag=0;break;}
000983 341f      	CPI  R17,79
000984 f411      	BRNE _0x109
000985 340b      	CPI  R16,75
000986 f009      	BREQ _0x10A
                 _0x109:
000987 c003      	RJMP _0x108
                 _0x10A:
000988 94e8      	CLT
000989 f8f0      	BLD  R15,0
00098a c001      	RJMP _0x107
                 ; 0000 037F 		}
                 _0x108:
00098b cff0      	RJMP _0x105
                 _0x107:
                 ; 0000 0380 	while (rx_counter0>0)	getchar();
                 _0x10B:
00098c e0e0      	LDI  R30,LOW(0)
00098d 15ed      	CP   R30,R13
00098e f418      	BRSH _0x10D
00098f 940e 01d4 	CALL _getchar
000991 cffa      	RJMP _0x10B
                 _0x10D:
                 ; 0000 0381 }
000992 cfa5      	RJMP _0x102
                 _0x104:
                 ; 0000 0382 }
000993 9109      	LD   R16,Y+
000994 9119      	LD   R17,Y+
000995 90ff      	POP  R15
000996 9508      	RET
                 ;///////////////////////////////////////////////////////////////////////////////
                 ;void poweron(void)
                 ; 0000 0385 {
                 _poweron:
000997 92ff      	PUSH R15
                 ; 0000 0386     unsigned char i,ch1,ch2;
                 ; 0000 0387     bit flag=1;
                 ; 0000 0388 
                 ; 0000 0389     while (rx_counter0>0)	getchar();
000998 940e 0c94 	CALL __SAVELOCR4
                 ;	i -> R17
                 ;	ch1 -> R16
                 ;	ch2 -> R19
                 ;	flag -> R15.0
00099a e0e1      	LDI  R30,LOW(1)
00099b 2efe      	MOV  R15,R30
                 _0x10E:
00099c e0e0      	LDI  R30,LOW(0)
00099d 15ed      	CP   R30,R13
00099e f418      	BRSH _0x110
00099f 940e 01d4 	CALL _getchar
0009a1 cffa      	RJMP _0x10E
                 _0x110:
                 ; 0000 038B while (flag)
                 _0x111:
0009a2 fef0      	SBRS R15,0
0009a3 c044      	RJMP _0x113
                 ; 0000 038C         {
                 ; 0000 038D             putchar('A');delay_ms(50);
0009a4 e4e1      	LDI  R30,LOW(65)
0009a5 93ea      	ST   -Y,R30
0009a6 940e 0209 	CALL _putchar
0009a8 e3e2      	LDI  R30,LOW(50)
0009a9 e0f0      	LDI  R31,HIGH(50)
0009aa 93fa      	ST   -Y,R31
0009ab 93ea      	ST   -Y,R30
0009ac 940e 0c59 	CALL _delay_ms
                 ; 0000 038E             putchar('T');delay_ms(50);
0009ae e5e4      	LDI  R30,LOW(84)
0009af 93ea      	ST   -Y,R30
0009b0 940e 0209 	CALL _putchar
0009b2 e3e2      	LDI  R30,LOW(50)
0009b3 e0f0      	LDI  R31,HIGH(50)
0009b4 93fa      	ST   -Y,R31
0009b5 93ea      	ST   -Y,R30
0009b6 940e 0c59 	CALL _delay_ms
                 ; 0000 038F             putchar(13);delay_ms(50);
0009b8 e0ed      	LDI  R30,LOW(13)
0009b9 93ea      	ST   -Y,R30
0009ba 940e 0209 	CALL _putchar
0009bc e3e2      	LDI  R30,LOW(50)
0009bd e0f0      	LDI  R31,HIGH(50)
0009be 93fa      	ST   -Y,R31
0009bf 93ea      	ST   -Y,R30
0009c0 940e 0c59 	CALL _delay_ms
                 ; 0000 0390             putchar (10);delay_ms(50);
0009c2 e0ea      	LDI  R30,LOW(10)
0009c3 93ea      	ST   -Y,R30
0009c4 940e 0209 	CALL _putchar
0009c6 e3e2      	LDI  R30,LOW(50)
0009c7 e0f0      	LDI  R31,HIGH(50)
0009c8 93fa      	ST   -Y,R31
0009c9 93ea      	ST   -Y,R30
0009ca 940e 0c59 	CALL _delay_ms
                 ; 0000 0391 
                 ; 0000 0392             delay_ms(500);
0009cc efe4      	LDI  R30,LOW(500)
0009cd e0f1      	LDI  R31,HIGH(500)
0009ce 93fa      	ST   -Y,R31
0009cf 93ea      	ST   -Y,R30
0009d0 940e 0c59 	CALL _delay_ms
                 ; 0000 0393             while (rx_counter0>0)
                 _0x114:
0009d2 e0e0      	LDI  R30,LOW(0)
0009d3 15ed      	CP   R30,R13
0009d4 f468      	BRSH _0x116
                 ; 0000 0394             {
                 ; 0000 0395                 ch1=ch2;
0009d5 2f03      	MOV  R16,R19
                 ; 0000 0396                 ch2=getchar();
0009d6 940e 01d4 	CALL _getchar
0009d8 2f3e      	MOV  R19,R30
                 ; 0000 0397                 if ((ch1=='O') && (ch2=='K'))	{flag=0;break;}
0009d9 340f      	CPI  R16,79
0009da f411      	BRNE _0x118
0009db 343b      	CPI  R19,75
0009dc f009      	BREQ _0x119
                 _0x118:
0009dd c003      	RJMP _0x117
                 _0x119:
0009de 94e8      	CLT
0009df f8f0      	BLD  R15,0
0009e0 c001      	RJMP _0x116
                 ; 0000 0398 
                 ; 0000 0399             }
                 _0x117:
0009e1 cff0      	RJMP _0x114
                 _0x116:
                 ; 0000 039A             while (rx_counter0) getchar();
                 _0x11A:
0009e2 20dd      	TST  R13
0009e3 f019      	BREQ _0x11C
0009e4 940e 01d4 	CALL _getchar
0009e6 cffb      	RJMP _0x11A
                 _0x11C:
                 ; 0000 039B }
0009e7 cfba      	RJMP _0x111
                 _0x113:
                 ; 0000 039C ///////////////////////////////////////////////////////////////
                 ; 0000 039D }
0009e8 940e 0c9b 	CALL __LOADLOCR4
0009ea 9624      	ADIW R28,4
0009eb 90ff      	POP  R15
0009ec 9508      	RET
                 ;void Security(void)
                 ; 0000 039F {
                 _Security:
                 ; 0000 03A0 if((PINC.5==0 || PINC.6==0 ) && securityMode[1] == 'N')  ///////Dozdgir//////
0009ed e0a0      	LDI  R26,0
0009ee 999d      	SBIC 0x13,5
0009ef e0a1      	LDI  R26,1
0009f0 30a0      	CPI  R26,LOW(0x0)
0009f1 f029      	BREQ _0x11E
0009f2 e0a0      	LDI  R26,0
0009f3 999e      	SBIC 0x13,6
0009f4 e0a1      	LDI  R26,1
0009f5 30a0      	CPI  R26,LOW(0x0)
0009f6 f421      	BRNE _0x120
                 _0x11E:
0009f7 01f4      	MOVW R30,R8
0009f8 81a1      	LDD  R26,Z+1
0009f9 34ae      	CPI  R26,LOW(0x4E)
0009fa f009      	BREQ _0x121
                 _0x120:
0009fb c032      	RJMP _0x11D
                 _0x121:
                 ; 0000 03A1  {
                 ; 0000 03A2   alarm=1;
0009fc 9ac6      	SBI  0x18,6
                 ; 0000 03A3   delay_ms(8000);
0009fd e4e0      	LDI  R30,LOW(8000)
0009fe e1ff      	LDI  R31,HIGH(8000)
0009ff 93fa      	ST   -Y,R31
000a00 93ea      	ST   -Y,R30
000a01 940e 0c59 	CALL _delay_ms
                 ; 0000 03A4   puts("AT+CMGS=\"09384198683\" \r");
                +
000a03 eae4     +LDI R30 , LOW ( _0x124 + ( 0 ) )
000a04 e0f6     +LDI R31 , HIGH ( _0x124 + ( 0 ) )
                 	__POINTW1MN _0x124,0
000a05 93fa      	ST   -Y,R31
000a06 93ea      	ST   -Y,R30
000a07 d070      	RCALL _puts
                 ; 0000 03A5   putchar (13);
000a08 e0ed      	LDI  R30,LOW(13)
000a09 93ea      	ST   -Y,R30
000a0a 940e 0209 	CALL _putchar
                 ; 0000 03A6   putchar (10);
000a0c e0ea      	LDI  R30,LOW(10)
000a0d 93ea      	ST   -Y,R30
000a0e 940e 0209 	CALL _putchar
                 ; 0000 03A7   delay_ms(180);
000a10 ebe4      	LDI  R30,LOW(180)
000a11 e0f0      	LDI  R31,HIGH(180)
000a12 93fa      	ST   -Y,R31
000a13 93ea      	ST   -Y,R30
000a14 940e 0c59 	CALL _delay_ms
                 ; 0000 03A8   printf("DozD!");
                +
000a16 efe0     +LDI R30 , LOW ( 2 * _0x0 + ( 324 ) )
000a17 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 324 ) )
                 	__POINTW1FN _0x0,324
000a18 93fa      	ST   -Y,R31
000a19 93ea      	ST   -Y,R30
000a1a e080      	LDI  R24,0
000a1b d201      	RCALL _printf
000a1c 9622      	ADIW R28,2
                 ; 0000 03A9   delay_ms(90);
000a1d e5ea      	LDI  R30,LOW(90)
000a1e e0f0      	LDI  R31,HIGH(90)
000a1f 93fa      	ST   -Y,R31
000a20 93ea      	ST   -Y,R30
000a21 940e 0c59 	CALL _delay_ms
                 ; 0000 03AA   putchar (26);
000a23 e1ea      	LDI  R30,LOW(26)
000a24 93ea      	ST   -Y,R30
000a25 940e 0209 	CALL _putchar
                 ; 0000 03AB   delay_ms(200);
000a27 ece8      	LDI  R30,LOW(200)
000a28 e0f0      	LDI  R31,HIGH(200)
000a29 93fa      	ST   -Y,R31
000a2a 93ea      	ST   -Y,R30
000a2b 940e 0c59 	CALL _delay_ms
                 ; 0000 03AC  }
                 ; 0000 03AD  else{alarm=0;};
000a2d c001      	RJMP _0x125
                 _0x11D:
000a2e 98c6      	CBI  0x18,6
                 _0x125:
                 ; 0000 03AE };
000a2f 9508      	RET
                 
                 	.DSEG
                 _0x124:
0006a4           	.BYTE 0x18
                 ;void Batt(void)
                 ; 0000 03B0 {
                 
                 	.CSEG
                 ; 0000 03B1 if(PIND.4==0) //////Power supply off///////
                 ; 0000 03B2  {
                 ; 0000 03B3  buzzer=!buzzer; delay_ms(300);
                 ; 0000 03B4  led2=1;
                 ; 0000 03B5  alarm=!alarm; delay_ms(700);
                 ; 0000 03B6  led1=!led1; delay_ms(40);
                 ; 0000 03B7  delay_ms(5000);
                 ; 0000 03B8  puts("AT+CMGS=\"09384198683\" \r");
                 ; 0000 03B9  putchar (13);
                 ; 0000 03BA  putchar (10);
                 ; 0000 03BB  delay_ms(180);
                 ; 0000 03BC  printf("Power Supply off ! Please Check a Car VoltaZh");
                 ; 0000 03BD  delay_ms(90);
                 ; 0000 03BE  putchar (26);
                 ; 0000 03BF  delay_ms(200);
                 ; 0000 03C0  }
                 ; 0000 03C1 };
                 
                 	.DSEG
                 _0x131:
0006bc           	.BYTE 0x18
                 ;void getAntenna()
                 ; 0000 03C3 {
                 
                 	.CSEG
                 _getAntenna:
                 ; 0000 03C4     int index = 0;
                 ; 0000 03C5     unsigned char antenna [];
                 ; 0000 03C6     unsigned char ch1;
                 ; 0000 03C7 
                 ; 0000 03C8     while (rx_counter0>0)	getchar();
000a30 940e 0c94 	CALL __SAVELOCR4
                 ;	index -> R16,R17
                 ;	antenna -> Y+4
                 ;	ch1 -> R19
                +
000a32 e000     +LDI R16 , LOW ( 0 )
000a33 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x132:
000a34 e0e0      	LDI  R30,LOW(0)
000a35 15ed      	CP   R30,R13
000a36 f418      	BRSH _0x134
000a37 940e 01d4 	CALL _getchar
000a39 cffa      	RJMP _0x132
                 _0x134:
                 ; 0000 03C9 putchar('A');
000a3a e4e1      	LDI  R30,LOW(65)
000a3b 93ea      	ST   -Y,R30
000a3c 940e 0209 	CALL _putchar
                 ; 0000 03CA     putchar('T');
000a3e e5e4      	LDI  R30,LOW(84)
000a3f 93ea      	ST   -Y,R30
000a40 940e 0209 	CALL _putchar
                 ; 0000 03CB     putchar('+');
000a42 e2eb      	LDI  R30,LOW(43)
000a43 93ea      	ST   -Y,R30
000a44 940e 0209 	CALL _putchar
                 ; 0000 03CC     putchar('C');
000a46 e4e3      	LDI  R30,LOW(67)
000a47 93ea      	ST   -Y,R30
000a48 940e 0209 	CALL _putchar
                 ; 0000 03CD     putchar('S');
000a4a e5e3      	LDI  R30,LOW(83)
000a4b 93ea      	ST   -Y,R30
000a4c 940e 0209 	CALL _putchar
                 ; 0000 03CE     putchar('Q');
000a4e e5e1      	LDI  R30,LOW(81)
000a4f 93ea      	ST   -Y,R30
000a50 940e 0209 	CALL _putchar
                 ; 0000 03CF     putchar(13);
000a52 e0ed      	LDI  R30,LOW(13)
000a53 93ea      	ST   -Y,R30
000a54 940e 0209 	CALL _putchar
                 ; 0000 03D0     putchar(10);
000a56 e0ea      	LDI  R30,LOW(10)
000a57 93ea      	ST   -Y,R30
000a58 940e 0209 	CALL _putchar
                 ; 0000 03D1     delay_ms(1000);
000a5a eee8      	LDI  R30,LOW(1000)
000a5b e0f3      	LDI  R31,HIGH(1000)
000a5c 93fa      	ST   -Y,R31
000a5d 93ea      	ST   -Y,R30
000a5e 940e 0c59 	CALL _delay_ms
                 ; 0000 03D2 
                 ; 0000 03D3     while (rx_counter0>0)
                 _0x135:
000a60 e0e0      	LDI  R30,LOW(0)
000a61 15ed      	CP   R30,R13
000a62 f460      	BRSH _0x137
                 ; 0000 03D4     {
                 ; 0000 03D5         ch1 = getchar();
000a63 940e 01d4 	CALL _getchar
000a65 2f3e      	MOV  R19,R30
                 ; 0000 03D6         antenna[index] = ch1;
000a66 01f8      	MOVW R30,R16
000a67 01de      	MOVW R26,R28
000a68 9614      	ADIW R26,4
000a69 0fea      	ADD  R30,R26
000a6a 1ffb      	ADC  R31,R27
000a6b 8330      	ST   Z,R19
                 ; 0000 03D7         index++;
                +
000a6c 5f0f     +SUBI R16 , LOW ( - 1 )
000a6d 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 03D8     }
000a6e cff1      	RJMP _0x135
                 _0x137:
                 ; 0000 03D9 
                 ; 0000 03DA     SendSMS(antenna);
000a6f 01fe      	MOVW R30,R28
000a70 9634      	ADIW R30,4
000a71 93fa      	ST   -Y,R31
000a72 93ea      	ST   -Y,R30
000a73 daa0      	RCALL _SendSMS
                 ; 0000 03DB };
                 _0x20A0002:
000a74 940e 0c9b 	CALL __LOADLOCR4
000a76 9624      	ADIW R28,4
000a77 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _puts:
000a78 931a      	ST   -Y,R17
                 _0x2000003:
000a79 81a9      	LDD  R26,Y+1
000a7a 81ba      	LDD  R27,Y+1+1
000a7b 91ed      	LD   R30,X+
000a7c 83a9      	STD  Y+1,R26
000a7d 83ba      	STD  Y+1+1,R27
000a7e 2f1e      	MOV  R17,R30
000a7f 30e0      	CPI  R30,0
000a80 f021      	BREQ _0x2000005
000a81 931a      	ST   -Y,R17
000a82 940e 0209 	CALL _putchar
000a84 cff4      	RJMP _0x2000003
                 _0x2000005:
000a85 e0ea      	LDI  R30,LOW(10)
000a86 93ea      	ST   -Y,R30
000a87 940e 0209 	CALL _putchar
000a89 8118      	LDD  R17,Y+0
000a8a c00b      	RJMP _0x20A0001
                 _put_usart_G100:
000a8b 81ea      	LDD  R30,Y+2
000a8c 93ea      	ST   -Y,R30
000a8d 940e 0209 	CALL _putchar
000a8f 81a8      	LD   R26,Y
000a90 81b9      	LDD  R27,Y+1
000a91 91ed      	LD   R30,X+
000a92 91fd      	LD   R31,X+
000a93 9631      	ADIW R30,1
000a94 93fe      	ST   -X,R31
000a95 93ee      	ST   -X,R30
                 _0x20A0001:
000a96 9623      	ADIW R28,3
000a97 9508      	RET
                 __print_G100:
000a98 9726      	SBIW R28,6
000a99 940e 0c92 	CALL __SAVELOCR6
000a9b e010      	LDI  R17,0
000a9c 85ac      	LDD  R26,Y+12
000a9d 85bd      	LDD  R27,Y+12+1
000a9e e0e0      	LDI  R30,LOW(0)
000a9f e0f0      	LDI  R31,HIGH(0)
000aa0 93ed      	ST   X+,R30
000aa1 93fc      	ST   X,R31
                 _0x2000016:
000aa2 89ea      	LDD  R30,Y+18
000aa3 89fb      	LDD  R31,Y+18+1
000aa4 9631      	ADIW R30,1
000aa5 8bea      	STD  Y+18,R30
000aa6 8bfb      	STD  Y+18+1,R31
000aa7 9731      	SBIW R30,1
000aa8 91e4      	LPM  R30,Z
000aa9 2f2e      	MOV  R18,R30
000aaa 30e0      	CPI  R30,0
000aab f411      	BRNE PC+3
000aac 940c 0c15 	JMP _0x2000018
000aae 2fe1      	MOV  R30,R17
000aaf 30e0      	CPI  R30,0
000ab0 f469      	BRNE _0x200001C
000ab1 3225      	CPI  R18,37
000ab2 f411      	BRNE _0x200001D
000ab3 e011      	LDI  R17,LOW(1)
000ab4 c008      	RJMP _0x200001E
                 _0x200001D:
000ab5 932a      	ST   -Y,R18
000ab6 85ed      	LDD  R30,Y+13
000ab7 85fe      	LDD  R31,Y+13+1
000ab8 93fa      	ST   -Y,R31
000ab9 93ea      	ST   -Y,R30
000aba 89e9      	LDD  R30,Y+17
000abb 89fa      	LDD  R31,Y+17+1
000abc 9509      	ICALL
                 _0x200001E:
000abd c156      	RJMP _0x200001B
                 _0x200001C:
000abe 30e1      	CPI  R30,LOW(0x1)
000abf f4d9      	BRNE _0x200001F
000ac0 3225      	CPI  R18,37
000ac1 f449      	BRNE _0x2000020
000ac2 932a      	ST   -Y,R18
000ac3 85ed      	LDD  R30,Y+13
000ac4 85fe      	LDD  R31,Y+13+1
000ac5 93fa      	ST   -Y,R31
000ac6 93ea      	ST   -Y,R30
000ac7 89e9      	LDD  R30,Y+17
000ac8 89fa      	LDD  R31,Y+17+1
000ac9 9509      	ICALL
000aca c148      	RJMP _0x20000C9
                 _0x2000020:
000acb e012      	LDI  R17,LOW(2)
000acc e040      	LDI  R20,LOW(0)
000acd e000      	LDI  R16,LOW(0)
000ace 322d      	CPI  R18,45
000acf f411      	BRNE _0x2000021
000ad0 e001      	LDI  R16,LOW(1)
000ad1 c142      	RJMP _0x200001B
                 _0x2000021:
000ad2 322b      	CPI  R18,43
000ad3 f411      	BRNE _0x2000022
000ad4 e24b      	LDI  R20,LOW(43)
000ad5 c13e      	RJMP _0x200001B
                 _0x2000022:
000ad6 3220      	CPI  R18,32
000ad7 f411      	BRNE _0x2000023
000ad8 e240      	LDI  R20,LOW(32)
000ad9 c13a      	RJMP _0x200001B
                 _0x2000023:
000ada c002      	RJMP _0x2000024
                 _0x200001F:
000adb 30e2      	CPI  R30,LOW(0x2)
000adc f439      	BRNE _0x2000025
                 _0x2000024:
000add e050      	LDI  R21,LOW(0)
000ade e013      	LDI  R17,LOW(3)
000adf 3320      	CPI  R18,48
000ae0 f411      	BRNE _0x2000026
000ae1 6800      	ORI  R16,LOW(128)
000ae2 c131      	RJMP _0x200001B
                 _0x2000026:
000ae3 c004      	RJMP _0x2000027
                 _0x2000025:
000ae4 30e3      	CPI  R30,LOW(0x3)
000ae5 f011      	BREQ PC+3
000ae6 940c 0c14 	JMP _0x200001B
                 _0x2000027:
000ae8 3320      	CPI  R18,48
000ae9 f010      	BRLO _0x200002A
000aea 332a      	CPI  R18,58
000aeb f008      	BRLO _0x200002B
                 _0x200002A:
000aec c007      	RJMP _0x2000029
                 _0x200002B:
000aed e0aa      	LDI  R26,LOW(10)
000aee 9f5a      	MUL  R21,R26
000aef 2d50      	MOV  R21,R0
000af0 2fe2      	MOV  R30,R18
000af1 53e0      	SUBI R30,LOW(48)
000af2 0f5e      	ADD  R21,R30
000af3 c120      	RJMP _0x200001B
                 _0x2000029:
000af4 2fe2      	MOV  R30,R18
000af5 36e3      	CPI  R30,LOW(0x63)
000af6 f479      	BRNE _0x200002F
000af7 89e8      	LDD  R30,Y+16
000af8 89f9      	LDD  R31,Y+16+1
000af9 9734      	SBIW R30,4
000afa 8be8      	STD  Y+16,R30
000afb 8bf9      	STD  Y+16+1,R31
000afc 81a4      	LDD  R26,Z+4
000afd 93aa      	ST   -Y,R26
000afe 85ed      	LDD  R30,Y+13
000aff 85fe      	LDD  R31,Y+13+1
000b00 93fa      	ST   -Y,R31
000b01 93ea      	ST   -Y,R30
000b02 89e9      	LDD  R30,Y+17
000b03 89fa      	LDD  R31,Y+17+1
000b04 9509      	ICALL
000b05 c10d      	RJMP _0x2000030
                 _0x200002F:
000b06 37e3      	CPI  R30,LOW(0x73)
000b07 f491      	BRNE _0x2000032
000b08 89e8      	LDD  R30,Y+16
000b09 89f9      	LDD  R31,Y+16+1
000b0a 9734      	SBIW R30,4
000b0b 8be8      	STD  Y+16,R30
000b0c 8bf9      	STD  Y+16+1,R31
000b0d 89a8      	LDD  R26,Y+16
000b0e 89b9      	LDD  R27,Y+16+1
000b0f 9614      	ADIW R26,4
000b10 940e 0c6d 	CALL __GETW1P
000b12 83ee      	STD  Y+6,R30
000b13 83ff      	STD  Y+6+1,R31
000b14 93fa      	ST   -Y,R31
000b15 93ea      	ST   -Y,R30
000b16 940e 0c44 	CALL _strlen
000b18 2f1e      	MOV  R17,R30
000b19 c014      	RJMP _0x2000033
                 _0x2000032:
000b1a 37e0      	CPI  R30,LOW(0x70)
000b1b f4b1      	BRNE _0x2000035
000b1c 89e8      	LDD  R30,Y+16
000b1d 89f9      	LDD  R31,Y+16+1
000b1e 9734      	SBIW R30,4
000b1f 8be8      	STD  Y+16,R30
000b20 8bf9      	STD  Y+16+1,R31
000b21 89a8      	LDD  R26,Y+16
000b22 89b9      	LDD  R27,Y+16+1
000b23 9614      	ADIW R26,4
000b24 940e 0c6d 	CALL __GETW1P
000b26 83ee      	STD  Y+6,R30
000b27 83ff      	STD  Y+6+1,R31
000b28 93fa      	ST   -Y,R31
000b29 93ea      	ST   -Y,R30
000b2a 940e 0c4e 	CALL _strlenf
000b2c 2f1e      	MOV  R17,R30
000b2d 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000b2e 6002      	ORI  R16,LOW(2)
000b2f 770f      	ANDI R16,LOW(127)
000b30 e030      	LDI  R19,LOW(0)
000b31 c043      	RJMP _0x2000036
                 _0x2000035:
000b32 36e4      	CPI  R30,LOW(0x64)
000b33 f011      	BREQ _0x2000039
000b34 36e9      	CPI  R30,LOW(0x69)
000b35 f411      	BRNE _0x200003A
                 _0x2000039:
000b36 6004      	ORI  R16,LOW(4)
000b37 c002      	RJMP _0x200003B
                 _0x200003A:
000b38 37e5      	CPI  R30,LOW(0x75)
000b39 f431      	BRNE _0x200003C
                 _0x200003B:
000b3a e8ec      	LDI  R30,LOW(_tbl10_G100*2)
000b3b e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000b3c 83ee      	STD  Y+6,R30
000b3d 83ff      	STD  Y+6+1,R31
000b3e e015      	LDI  R17,LOW(5)
000b3f c00d      	RJMP _0x200003D
                 _0x200003C:
000b40 35e8      	CPI  R30,LOW(0x58)
000b41 f411      	BRNE _0x200003F
000b42 6008      	ORI  R16,LOW(8)
000b43 c004      	RJMP _0x2000040
                 _0x200003F:
000b44 37e8      	CPI  R30,LOW(0x78)
000b45 f011      	BREQ PC+3
000b46 940c 0c13 	JMP _0x2000071
                 _0x2000040:
000b48 e9e6      	LDI  R30,LOW(_tbl16_G100*2)
000b49 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000b4a 83ee      	STD  Y+6,R30
000b4b 83ff      	STD  Y+6+1,R31
000b4c e014      	LDI  R17,LOW(4)
                 _0x200003D:
000b4d ff02      	SBRS R16,2
000b4e c01a      	RJMP _0x2000042
000b4f 89e8      	LDD  R30,Y+16
000b50 89f9      	LDD  R31,Y+16+1
000b51 9734      	SBIW R30,4
000b52 8be8      	STD  Y+16,R30
000b53 8bf9      	STD  Y+16+1,R31
000b54 89a8      	LDD  R26,Y+16
000b55 89b9      	LDD  R27,Y+16+1
000b56 9614      	ADIW R26,4
000b57 940e 0c6d 	CALL __GETW1P
000b59 87ea      	STD  Y+10,R30
000b5a 87fb      	STD  Y+10+1,R31
000b5b 85ab      	LDD  R26,Y+11
000b5c 23aa      	TST  R26
000b5d f42a      	BRPL _0x2000043
000b5e 940e 0c69 	CALL __ANEGW1
000b60 87ea      	STD  Y+10,R30
000b61 87fb      	STD  Y+10+1,R31
000b62 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000b63 3040      	CPI  R20,0
000b64 f011      	BREQ _0x2000044
000b65 5f1f      	SUBI R17,-LOW(1)
000b66 c001      	RJMP _0x2000045
                 _0x2000044:
000b67 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000b68 c00c      	RJMP _0x2000046
                 _0x2000042:
000b69 89e8      	LDD  R30,Y+16
000b6a 89f9      	LDD  R31,Y+16+1
000b6b 9734      	SBIW R30,4
000b6c 8be8      	STD  Y+16,R30
000b6d 8bf9      	STD  Y+16+1,R31
000b6e 89a8      	LDD  R26,Y+16
000b6f 89b9      	LDD  R27,Y+16+1
000b70 9614      	ADIW R26,4
000b71 940e 0c6d 	CALL __GETW1P
000b73 87ea      	STD  Y+10,R30
000b74 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
000b75 fd00      	SBRC R16,0
000b76 c017      	RJMP _0x2000047
                 _0x2000048:
000b77 1715      	CP   R17,R21
000b78 f4a8      	BRSH _0x200004A
000b79 ff07      	SBRS R16,7
000b7a c008      	RJMP _0x200004B
000b7b ff02      	SBRS R16,2
000b7c c004      	RJMP _0x200004C
000b7d 7f0b      	ANDI R16,LOW(251)
000b7e 2f24      	MOV  R18,R20
000b7f 5011      	SUBI R17,LOW(1)
000b80 c001      	RJMP _0x200004D
                 _0x200004C:
000b81 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000b82 c001      	RJMP _0x200004E
                 _0x200004B:
000b83 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000b84 932a      	ST   -Y,R18
000b85 85ed      	LDD  R30,Y+13
000b86 85fe      	LDD  R31,Y+13+1
000b87 93fa      	ST   -Y,R31
000b88 93ea      	ST   -Y,R30
000b89 89e9      	LDD  R30,Y+17
000b8a 89fa      	LDD  R31,Y+17+1
000b8b 9509      	ICALL
000b8c 5051      	SUBI R21,LOW(1)
000b8d cfe9      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000b8e 2f31      	MOV  R19,R17
000b8f ff01      	SBRS R16,1
000b90 c01d      	RJMP _0x200004F
                 _0x2000050:
000b91 3030      	CPI  R19,0
000b92 f0d1      	BREQ _0x2000052
000b93 ff03      	SBRS R16,3
000b94 c006      	RJMP _0x2000053
000b95 81ee      	LDD  R30,Y+6
000b96 81ff      	LDD  R31,Y+6+1
000b97 9125      	LPM  R18,Z+
000b98 83ee      	STD  Y+6,R30
000b99 83ff      	STD  Y+6+1,R31
000b9a c005      	RJMP _0x2000054
                 _0x2000053:
000b9b 81ae      	LDD  R26,Y+6
000b9c 81bf      	LDD  R27,Y+6+1
000b9d 912d      	LD   R18,X+
000b9e 83ae      	STD  Y+6,R26
000b9f 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000ba0 932a      	ST   -Y,R18
000ba1 85ed      	LDD  R30,Y+13
000ba2 85fe      	LDD  R31,Y+13+1
000ba3 93fa      	ST   -Y,R31
000ba4 93ea      	ST   -Y,R30
000ba5 89e9      	LDD  R30,Y+17
000ba6 89fa      	LDD  R31,Y+17+1
000ba7 9509      	ICALL
000ba8 3050      	CPI  R21,0
000ba9 f009      	BREQ _0x2000055
000baa 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000bab 5031      	SUBI R19,LOW(1)
000bac cfe4      	RJMP _0x2000050
                 _0x2000052:
000bad c056      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000bae e320      	LDI  R18,LOW(48)
000baf 81ee      	LDD  R30,Y+6
000bb0 81ff      	LDD  R31,Y+6+1
000bb1 940e 0c71 	CALL __GETW1PF
000bb3 87e8      	STD  Y+8,R30
000bb4 87f9      	STD  Y+8+1,R31
000bb5 81ee      	LDD  R30,Y+6
000bb6 81ff      	LDD  R31,Y+6+1
000bb7 9632      	ADIW R30,2
000bb8 83ee      	STD  Y+6,R30
000bb9 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000bba 85e8      	LDD  R30,Y+8
000bbb 85f9      	LDD  R31,Y+8+1
000bbc 85aa      	LDD  R26,Y+10
000bbd 85bb      	LDD  R27,Y+10+1
000bbe 17ae      	CP   R26,R30
000bbf 07bf      	CPC  R27,R31
000bc0 f050      	BRLO _0x200005C
000bc1 5f2f      	SUBI R18,-LOW(1)
000bc2 85a8      	LDD  R26,Y+8
000bc3 85b9      	LDD  R27,Y+8+1
000bc4 85ea      	LDD  R30,Y+10
000bc5 85fb      	LDD  R31,Y+10+1
000bc6 1bea      	SUB  R30,R26
000bc7 0bfb      	SBC  R31,R27
000bc8 87ea      	STD  Y+10,R30
000bc9 87fb      	STD  Y+10+1,R31
000bca cfef      	RJMP _0x200005A
                 _0x200005C:
000bcb 332a      	CPI  R18,58
000bcc f028      	BRLO _0x200005D
000bcd ff03      	SBRS R16,3
000bce c002      	RJMP _0x200005E
000bcf 5f29      	SUBI R18,-LOW(7)
000bd0 c001      	RJMP _0x200005F
                 _0x200005E:
000bd1 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000bd2 fd04      	SBRC R16,4
000bd3 c01f      	RJMP _0x2000061
000bd4 3321      	CPI  R18,49
000bd5 f420      	BRSH _0x2000063
000bd6 85a8      	LDD  R26,Y+8
000bd7 85b9      	LDD  R27,Y+8+1
000bd8 9711      	SBIW R26,1
000bd9 f409      	BRNE _0x2000062
                 _0x2000063:
000bda c009      	RJMP _0x20000CA
                 _0x2000062:
000bdb 1753      	CP   R21,R19
000bdc f010      	BRLO _0x2000067
000bdd ff00      	SBRS R16,0
000bde c001      	RJMP _0x2000068
                 _0x2000067:
000bdf c01e      	RJMP _0x2000066
                 _0x2000068:
000be0 e220      	LDI  R18,LOW(32)
000be1 ff07      	SBRS R16,7
000be2 c010      	RJMP _0x2000069
000be3 e320      	LDI  R18,LOW(48)
                 _0x20000CA:
000be4 6100      	ORI  R16,LOW(16)
000be5 ff02      	SBRS R16,2
000be6 c00c      	RJMP _0x200006A
000be7 7f0b      	ANDI R16,LOW(251)
000be8 934a      	ST   -Y,R20
000be9 85ed      	LDD  R30,Y+13
000bea 85fe      	LDD  R31,Y+13+1
000beb 93fa      	ST   -Y,R31
000bec 93ea      	ST   -Y,R30
000bed 89e9      	LDD  R30,Y+17
000bee 89fa      	LDD  R31,Y+17+1
000bef 9509      	ICALL
000bf0 3050      	CPI  R21,0
000bf1 f009      	BREQ _0x200006B
000bf2 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000bf3 932a      	ST   -Y,R18
000bf4 85ed      	LDD  R30,Y+13
000bf5 85fe      	LDD  R31,Y+13+1
000bf6 93fa      	ST   -Y,R31
000bf7 93ea      	ST   -Y,R30
000bf8 89e9      	LDD  R30,Y+17
000bf9 89fa      	LDD  R31,Y+17+1
000bfa 9509      	ICALL
000bfb 3050      	CPI  R21,0
000bfc f009      	BREQ _0x200006C
000bfd 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000bfe 5031      	SUBI R19,LOW(1)
000bff 85a8      	LDD  R26,Y+8
000c00 85b9      	LDD  R27,Y+8+1
000c01 9712      	SBIW R26,2
000c02 f008      	BRLO _0x2000059
000c03 cfaa      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000c04 ff00      	SBRS R16,0
000c05 c00d      	RJMP _0x200006D
                 _0x200006E:
000c06 3050      	CPI  R21,0
000c07 f059      	BREQ _0x2000070
000c08 5051      	SUBI R21,LOW(1)
000c09 e2e0      	LDI  R30,LOW(32)
000c0a 93ea      	ST   -Y,R30
000c0b 85ed      	LDD  R30,Y+13
000c0c 85fe      	LDD  R31,Y+13+1
000c0d 93fa      	ST   -Y,R31
000c0e 93ea      	ST   -Y,R30
000c0f 89e9      	LDD  R30,Y+17
000c10 89fa      	LDD  R31,Y+17+1
000c11 9509      	ICALL
000c12 cff3      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
000c13 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000c14 ce8d      	RJMP _0x2000016
                 _0x2000018:
000c15 85ac      	LDD  R26,Y+12
000c16 85bd      	LDD  R27,Y+12+1
000c17 940e 0c6d 	CALL __GETW1P
000c19 940e 0c99 	CALL __LOADLOCR6
000c1b 9664      	ADIW R28,20
000c1c 9508      	RET
                 _printf:
000c1d 92ff      	PUSH R15
000c1e 2ef8      	MOV  R15,R24
000c1f 9726      	SBIW R28,6
000c20 931a      	ST   -Y,R17
000c21 930a      	ST   -Y,R16
000c22 01de      	MOVW R26,R28
000c23 9614      	ADIW R26,4
000c24 940e 0c65 	CALL __ADDW2R15
000c26 018d      	MOVW R16,R26
000c27 e0e0      	LDI  R30,LOW(0)
000c28 83ec      	STD  Y+4,R30
000c29 83ed      	STD  Y+4+1,R30
000c2a 83ee      	STD  Y+6,R30
000c2b 83ef      	STD  Y+6+1,R30
000c2c 01de      	MOVW R26,R28
000c2d 9618      	ADIW R26,8
000c2e 940e 0c65 	CALL __ADDW2R15
000c30 940e 0c6d 	CALL __GETW1P
000c32 93fa      	ST   -Y,R31
000c33 93ea      	ST   -Y,R30
000c34 931a      	ST   -Y,R17
000c35 930a      	ST   -Y,R16
000c36 e8eb      	LDI  R30,LOW(_put_usart_G100)
000c37 e0fa      	LDI  R31,HIGH(_put_usart_G100)
000c38 93fa      	ST   -Y,R31
000c39 93ea      	ST   -Y,R30
000c3a 01fe      	MOVW R30,R28
000c3b 9638      	ADIW R30,8
000c3c 93fa      	ST   -Y,R31
000c3d 93ea      	ST   -Y,R30
000c3e de59      	RCALL __print_G100
000c3f 8119      	LDD  R17,Y+1
000c40 8108      	LDD  R16,Y+0
000c41 9628      	ADIW R28,8
000c42 90ff      	POP  R15
000c43 9508      	RET
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
000c44 91a9          ld   r26,y+
000c45 91b9          ld   r27,y+
000c46 27ee          clr  r30
000c47 27ff          clr  r31
                 strlen0:
000c48 916d          ld   r22,x+
000c49 2366          tst  r22
000c4a f011          breq strlen1
000c4b 9631          adiw r30,1
000c4c cffb          rjmp strlen0
                 strlen1:
000c4d 9508          ret
                 _strlenf:
000c4e 27aa          clr  r26
000c4f 27bb          clr  r27
000c50 91e9          ld   r30,y+
000c51 91f9          ld   r31,y+
                 strlenf0:
000c52 9005      	lpm  r0,z+
000c53 2000          tst  r0
000c54 f011          breq strlenf1
000c55 9611          adiw r26,1
000c56 cffb          rjmp strlenf0
                 strlenf1:
000c57 01fd          movw r30,r26
000c58 9508          ret
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _caller_id:
0006d4           	.BYTE 0x14
                 
                 	.ESEG
                 _sms_in_e2prom:
000000           	.BYTE 0x100
                 _gps_in_e2prom:
000100           	.BYTE 0x100
                 
                 	.DSEG
                 _rx_buffer0:
0006e8           	.BYTE 0x50
                 _tx_buffer0:
000738           	.BYTE 0x28
                 _tx_rd_index0:
000760           	.BYTE 0x1
                 _tx_counter0:
000761           	.BYTE 0x1
                 _rx_buffer1:
000762           	.BYTE 0x64
                 _rx_wr_index1:
0007c6           	.BYTE 0x1
                 _rx_rd_index1:
0007c7           	.BYTE 0x1
                 _rx_counter1:
0007c8           	.BYTE 0x1
                 __seed_G101:
0007c9           	.BYTE 0x4
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
000c59 91e9      	ld   r30,y+
000c5a 91f9      	ld   r31,y+
000c5b 9630      	adiw r30,0
000c5c f039      	breq __delay_ms1
                 __delay_ms0:
                +
000c5d e383     +LDI R24 , LOW ( 0x733 )
000c5e e097     +LDI R25 , HIGH ( 0x733 )
                +__DELAY_USW_LOOP :
000c5f 9701     +SBIW R24 , 1
000c60 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x733
000c61 95a8      	wdr
000c62 9731      	sbiw r30,1
000c63 f7c9      	brne __delay_ms0
                 __delay_ms1:
000c64 9508      	ret
                 
                 __ADDW2R15:
000c65 2400      	CLR  R0
000c66 0daf      	ADD  R26,R15
000c67 1db0      	ADC  R27,R0
000c68 9508      	RET
                 
                 __ANEGW1:
000c69 95f1      	NEG  R31
000c6a 95e1      	NEG  R30
000c6b 40f0      	SBCI R31,0
000c6c 9508      	RET
                 
                 __GETW1P:
000c6d 91ed      	LD   R30,X+
000c6e 91fc      	LD   R31,X
000c6f 9711      	SBIW R26,1
000c70 9508      	RET
                 
                 __GETW1PF:
000c71 9005      	LPM  R0,Z+
000c72 91f4      	LPM  R31,Z
000c73 2de0      	MOV  R30,R0
000c74 9508      	RET
                 
                 __EEPROMRDB:
000c75 99e1      	SBIC EECR,EEWE
000c76 cffe      	RJMP __EEPROMRDB
000c77 93ff      	PUSH R31
000c78 b7ff      	IN   R31,SREG
000c79 94f8      	CLI
000c7a bbae      	OUT  EEARL,R26
000c7b bbbf      	OUT  EEARH,R27
000c7c 9ae0      	SBI  EECR,EERE
000c7d b3ed      	IN   R30,EEDR
000c7e bfff      	OUT  SREG,R31
000c7f 91ff      	POP  R31
000c80 9508      	RET
                 
                 __EEPROMWRB:
000c81 9be1      	SBIS EECR,EEWE
000c82 c002      	RJMP __EEPROMWRB1
000c83 95a8      	WDR
000c84 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000c85 b79f      	IN   R25,SREG
000c86 94f8      	CLI
000c87 bbae      	OUT  EEARL,R26
000c88 bbbf      	OUT  EEARH,R27
000c89 9ae0      	SBI  EECR,EERE
000c8a b38d      	IN   R24,EEDR
000c8b 17e8      	CP   R30,R24
000c8c f019      	BREQ __EEPROMWRB0
000c8d bbed      	OUT  EEDR,R30
000c8e 9ae2      	SBI  EECR,EEMWE
000c8f 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000c90 bf9f      	OUT  SREG,R25
000c91 9508      	RET
                 
                 __SAVELOCR6:
000c92 935a      	ST   -Y,R21
                 __SAVELOCR5:
000c93 934a      	ST   -Y,R20
                 __SAVELOCR4:
000c94 933a      	ST   -Y,R19
                 __SAVELOCR3:
000c95 932a      	ST   -Y,R18
                 __SAVELOCR2:
000c96 931a      	ST   -Y,R17
000c97 930a      	ST   -Y,R16
000c98 9508      	RET
                 
                 __LOADLOCR6:
000c99 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000c9a 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000c9b 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000c9c 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000c9d 8119      	LDD  R17,Y+1
000c9e 8108      	LD   R16,Y
000c9f 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000ca0 0fac      	ADD  R26,R28
000ca1 1fbd      	ADC  R27,R29
                 __INITLOC0:
000ca2 9005      	LPM  R0,Z+
000ca3 920d      	ST   X+,R0
000ca4 958a      	DEC  R24
000ca5 f7e1      	BRNE __INITLOC0
000ca6 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega64 register use summary:
r0 :  15 r1 :   1 r2 :   3 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   9 r9 :   0 r10:   4 r11:   4 r12:   4 r13:  21 r14:   0 r15:  14 
r16:  66 r17:  56 r18:  39 r19:  22 r20:  15 r21:  33 r22:   4 r23:   0 
r24:  21 r25:   5 r26: 221 r27:  39 r28:  30 r29:   2 r30: 961 r31: 411 
x  :  19 y  : 745 z  :  31 
Registers used: 27 out of 35 (77.1%)

ATmega64 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   5 
adiw  :  41 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   5 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  47 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   1 brmi  :   0 brne  : 100 brpl  :   1 brsh  :  19 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 193 
cbi   :  17 cbr   :   0 clc   :   0 clh   :   0 cli   :   6 cln   :   0 
clr   :  11 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   0 
cp    :  22 cpc   :  15 cpi   : 131 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   8 ijmp  :   0 
in    :   9 inc   :   4 jmp   :  43 ld    :  44 ldd   : 175 ldi   : 563 
lds   :  16 lpm   :  15 lsl   :   0 lsr   :   0 mov   :  42 movw  :  24 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   6 out   :  41 pop   :   4 push  :   4 rcall : 109 ret   :  25 
reti  :   3 rjmp  : 144 rol   :   0 ror   :   0 sbc   :   1 sbci  :  14 
sbi   :  20 sbic  :   4 sbis  :   3 sbiw  :  26 sbr   :   0 sbrc  :   2 
sbrs  :  12 sec   :   0 seh   :   0 sei   :   4 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 450 std   : 113 sts   :  25 sub   :   1 subi  :  41 swap  :   0 
tst   :   7 wdr   :   2 
Instructions used: 59 out of 116 (50.9%)

ATmega64 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00194e   5852    626   6478   65536   9.9%
[.dseg] 0x000100 0x0007cd      0    717    717    4351  16.5%
[.eseg] 0x000000 0x000200      0    512    512    2048  25.0%

Assembly complete, 0 errors, 10 warnings
