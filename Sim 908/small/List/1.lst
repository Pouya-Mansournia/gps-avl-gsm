
AVRASM ver. 2.1.30  E:\Pouya\Sim 908\small\List\1.asm Sun May 26 17:47:48 2013

E:\Pouya\Sim 908\small\List\1.asm(1060): warning: Register r4 already defined by the .DEF directive
E:\Pouya\Sim 908\small\List\1.asm(1061): warning: Register r6 already defined by the .DEF directive
E:\Pouya\Sim 908\small\List\1.asm(1062): warning: Register r8 already defined by the .DEF directive
E:\Pouya\Sim 908\small\List\1.asm(1063): warning: Register r11 already defined by the .DEF directive
E:\Pouya\Sim 908\small\List\1.asm(1064): warning: Register r10 already defined by the .DEF directive
E:\Pouya\Sim 908\small\List\1.asm(1065): warning: Register r13 already defined by the .DEF directive
E:\Pouya\Sim 908\small\List\1.asm(1066): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Advanced
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega64
                 ;Program type             : Application
                 ;Clock frequency          : 7.372800 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Speed
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega64
                 	#pragma AVRPART MEMORY PROG_FLASH 65536
                 	#pragma AVRPART MEMORY EEPROM 2048
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _count=R4
                 	.DEF _len=R6
                 	.DEF _securityMode=R8
                 	.DEF _rx_wr_index0=R11
                 	.DEF _rx_rd_index0=R10
                 	.DEF _rx_counter0=R13
                 	.DEF _tx_wr_index0=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0165 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0197 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 01cb 	JMP  _usart0_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0210 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00004f 0000      	.DW  0x0000
                 
                 _0x53:
000050 0000
000051 0000
000052 0000
000053 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
E:\Pouya\Sim 908\small\List\1.asm(1123): warning: .cseg .db misalignment - padding zero byte
000054 0000      	.DB  0x0
                 _0xF9:
000055 0500      	.DB  LOW(_0x3),HIGH(_0x3)
                 _0x0:
000056 464f
000057 0046
000058 5441
000059 432b      	.DB  0x4F,0x46,0x46,0x0,0x41,0x54,0x2B,0x43
00005a 474d
00005b 3d44
00005c 2031
00005d 000d      	.DB  0x4D,0x47,0x44,0x3D,0x31,0x20,0xD,0x0
00005e 5441
00005f 432b
000060 474d
000061 3d44      	.DB  0x41,0x54,0x2B,0x43,0x4D,0x47,0x44,0x3D
000062 2032
000063 000d
000064 5441
000065 432b      	.DB  0x32,0x20,0xD,0x0,0x41,0x54,0x2B,0x43
000066 474d
000067 3d44
000068 2033
000069 000d      	.DB  0x4D,0x47,0x44,0x3D,0x33,0x20,0xD,0x0
00006a 5441
00006b 432b
00006c 474d
00006d 3d44      	.DB  0x41,0x54,0x2B,0x43,0x4D,0x47,0x44,0x3D
00006e 2034
00006f 000d
000070 5441
000071 432b      	.DB  0x34,0x20,0xD,0x0,0x41,0x54,0x2B,0x43
000072 474d
000073 3d44
000074 2035
000075 000d      	.DB  0x4D,0x47,0x44,0x3D,0x35,0x20,0xD,0x0
000076 5441
000077 432b
000078 474d
000079 3d44      	.DB  0x41,0x54,0x2B,0x43,0x4D,0x47,0x44,0x3D
00007a 2036
00007b 000d
00007c 5441
00007d 432b      	.DB  0x36,0x20,0xD,0x0,0x41,0x54,0x2B,0x43
00007e 474d
00007f 3d44
000080 2037
000081 000d      	.DB  0x4D,0x47,0x44,0x3D,0x37,0x20,0xD,0x0
000082 5441
000083 432b
000084 474d
000085 3d44      	.DB  0x41,0x54,0x2B,0x43,0x4D,0x47,0x44,0x3D
000086 2038
000087 000d
000088 5441
000089 432b      	.DB  0x38,0x20,0xD,0x0,0x41,0x54,0x2B,0x43
00008a 474d
00008b 3d44
00008c 2039
00008d 000d      	.DB  0x4D,0x47,0x44,0x3D,0x39,0x20,0xD,0x0
00008e 5441
00008f 432b
000090 474d
000091 3d44      	.DB  0x41,0x54,0x2B,0x43,0x4D,0x47,0x44,0x3D
000092 3031
000093 0d20
000094 4100
000095 2b54      	.DB  0x31,0x30,0x20,0xD,0x0,0x41,0x54,0x2B
000096 4d43
000097 4447
000098 313d
000099 2031      	.DB  0x43,0x4D,0x47,0x44,0x3D,0x31,0x31,0x20
00009a 000d
00009b 5441
00009c 432b
00009d 474d      	.DB  0xD,0x0,0x41,0x54,0x2B,0x43,0x4D,0x47
00009e 3d44
00009f 3231
0000a0 0d20
0000a1 4100      	.DB  0x44,0x3D,0x31,0x32,0x20,0xD,0x0,0x41
0000a2 2b54
0000a3 4d43
0000a4 5347
0000a5 223d      	.DB  0x54,0x2B,0x43,0x4D,0x47,0x53,0x3D,0x22
0000a6 3930
0000a7 3833
0000a8 3134
0000a9 3839      	.DB  0x30,0x39,0x33,0x38,0x34,0x31,0x39,0x38
0000aa 3836
0000ab 2233
0000ac 0d20
0000ad 4700      	.DB  0x36,0x38,0x33,0x22,0x20,0xD,0x0,0x47
0000ae 4d53
0000af 4f20
0000b0 004e
0000b1 6e69      	.DB  0x53,0x4D,0x20,0x4F,0x4E,0x0,0x69,0x6E
0000b2 6176
0000b3 696c
0000b4 2064
0000b5 6f63      	.DB  0x76,0x61,0x6C,0x69,0x64,0x20,0x63,0x6F
0000b6 6d6d
0000b7 6e61
0000b8 2164
0000b9 6400      	.DB  0x6D,0x6D,0x61,0x6E,0x64,0x21,0x0,0x64
0000ba 7461
0000bb 2061
0000bc 7369
0000bd 6620      	.DB  0x61,0x74,0x61,0x20,0x69,0x73,0x20,0x66
0000be 6961
0000bf 646c
0000c0 2120
0000c1 2121      	.DB  0x61,0x69,0x6C,0x64,0x20,0x21,0x21,0x21
0000c2 4100
0000c3 616c
0000c4 6d72
0000c5 4f20      	.DB  0x0,0x41,0x6C,0x61,0x72,0x6D,0x20,0x4F
0000c6 004e
0000c7 6953
0000c8 656c
0000c9 746e      	.DB  0x4E,0x0,0x53,0x69,0x6C,0x65,0x6E,0x74
0000ca 4f20
0000cb 004e
0000cc 7453
0000cd 706f      	.DB  0x20,0x4F,0x4E,0x0,0x53,0x74,0x6F,0x70
0000ce 4f20
0000cf 004e
0000d0 4553
0000d1 5543      	.DB  0x20,0x4F,0x4E,0x0,0x53,0x45,0x43,0x55
0000d2 4952
0000d3 5954
0000d4 7720
0000d5 7361      	.DB  0x52,0x49,0x54,0x59,0x20,0x77,0x61,0x73
0000d6 4f20
0000d7 004e
0000d8 4553
0000d9 5543      	.DB  0x20,0x4F,0x4E,0x0,0x53,0x45,0x43,0x55
0000da 4952
0000db 5954
0000dc 6920
0000dd 2073      	.DB  0x52,0x49,0x54,0x59,0x20,0x69,0x73,0x20
0000de 4e4f
0000df 5300
0000e0 4345
0000e1 5255      	.DB  0x4F,0x4E,0x0,0x53,0x45,0x43,0x55,0x52
0000e2 5449
0000e3 2059
0000e4 7369
0000e5 4f20      	.DB  0x49,0x54,0x59,0x20,0x69,0x73,0x20,0x4F
0000e6 4646
0000e7 5300
0000e8 4345
0000e9 5255      	.DB  0x46,0x46,0x0,0x53,0x45,0x43,0x55,0x52
0000ea 5449
0000eb 2059
0000ec 6177
0000ed 2073      	.DB  0x49,0x54,0x59,0x20,0x77,0x61,0x73,0x20
0000ee 464f
0000ef 0046
0000f0 6e69
0000f1 6176      	.DB  0x4F,0x46,0x46,0x0,0x69,0x6E,0x76,0x61
0000f2 696c
0000f3 2064
0000f4 6f63
0000f5 6d6d      	.DB  0x6C,0x69,0x64,0x20,0x63,0x6F,0x6D,0x6D
0000f6 6e61
0000f7 0064
0000f8 6f44
0000f9 447a      	.DB  0x61,0x6E,0x64,0x0,0x44,0x6F,0x7A,0x44
0000fa 0021      	.DB  0x21,0x0
                 _0x2020060:
E:\Pouya\Sim 908\small\List\1.asm(1170): warning: .cseg .db misalignment - padding zero byte
0000fb 0001      	.DB  0x1
                 _0x2020000:
0000fc 4e2d
0000fd 4e41
0000fe 4900
0000ff 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\Pouya\Sim 908\small\List\1.asm(1173): warning: .cseg .db misalignment - padding zero byte
000100 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000101 0001      	.DW  0x01
000102 0002      	.DW  0x02
000103 009e      	.DW  __REG_BIT_VARS*2
                 
000104 0004      	.DW  0x04
000105 0500      	.DW  _0x3
000106 00ac      	.DW  _0x0*2
                 
000107 0001      	.DW  0x01
000108 0504      	.DW  _0x2D
000109 00af      	.DW  _0x0*2+3
                 
00010a 0001      	.DW  0x01
00010b 0505      	.DW  _0x35
00010c 00af      	.DW  _0x0*2+3
                 
00010d 000c      	.DW  0x0C
00010e 0506      	.DW  _0x44
00010f 00b0      	.DW  _0x0*2+4
                 
000110 000c      	.DW  0x0C
000111 0512      	.DW  _0x44+12
000112 00bc      	.DW  _0x0*2+16
                 
000113 000c      	.DW  0x0C
000114 051e      	.DW  _0x44+24
000115 00c8      	.DW  _0x0*2+28
                 
000116 000c      	.DW  0x0C
000117 052a      	.DW  _0x44+36
000118 00d4      	.DW  _0x0*2+40
                 
000119 000c      	.DW  0x0C
00011a 0536      	.DW  _0x44+48
00011b 00e0      	.DW  _0x0*2+52
                 
00011c 000c      	.DW  0x0C
00011d 0542      	.DW  _0x44+60
00011e 00ec      	.DW  _0x0*2+64
                 
00011f 000c      	.DW  0x0C
000120 054e      	.DW  _0x44+72
000121 00f8      	.DW  _0x0*2+76
                 
000122 000c      	.DW  0x0C
000123 055a      	.DW  _0x44+84
000124 0104      	.DW  _0x0*2+88
                 
000125 000c      	.DW  0x0C
000126 0566      	.DW  _0x44+96
000127 0110      	.DW  _0x0*2+100
                 
000128 000d      	.DW  0x0D
000129 0572      	.DW  _0x44+108
00012a 011c      	.DW  _0x0*2+112
                 
00012b 000d      	.DW  0x0D
00012c 057f      	.DW  _0x44+121
00012d 0129      	.DW  _0x0*2+125
                 
00012e 000d      	.DW  0x0D
00012f 058c      	.DW  _0x44+134
000130 0136      	.DW  _0x0*2+138
                 
000131 000c      	.DW  0x0C
000132 0599      	.DW  _0x44+147
000133 00b0      	.DW  _0x0*2+4
                 
000134 0018      	.DW  0x18
000135 05a5      	.DW  _0x51
000136 0143      	.DW  _0x0*2+151
                 
000137 0018      	.DW  0x18
000138 05bd      	.DW  _0x52
000139 0143      	.DW  _0x0*2+151
                 
00013a 0011      	.DW  0x11
00013b 05d5      	.DW  _0x71
00013c 0162      	.DW  _0x0*2+182
                 
00013d 0012      	.DW  0x12
00013e 05e6      	.DW  _0x71+17
00013f 0173      	.DW  _0x0*2+199
                 
000140 0018      	.DW  0x18
000141 05f8      	.DW  _0x71+35
000142 0143      	.DW  _0x0*2+151
                 
000143 0018      	.DW  0x18
000144 0610      	.DW  _0x71+59
000145 0143      	.DW  _0x0*2+151
                 
000146 0018      	.DW  0x18
000147 0628      	.DW  _0x71+83
000148 0143      	.DW  _0x0*2+151
                 
000149 0018      	.DW  0x18
00014a 0640      	.DW  _0x71+107
00014b 0143      	.DW  _0x0*2+151
                 
00014c 0018      	.DW  0x18
00014d 0658      	.DW  _0x71+131
00014e 0143      	.DW  _0x0*2+151
                 
00014f 0010      	.DW  0x10
000150 0670      	.DW  _0x71+155
000151 01e0      	.DW  _0x0*2+308
                 
000152 000c      	.DW  0x0C
000153 0680      	.DW  _0xCD
000154 00b0      	.DW  _0x0*2+4
                 
000155 000c      	.DW  0x0C
000156 068c      	.DW  _0xCD+12
000157 00b0      	.DW  _0x0*2+4
                 
000158 000c      	.DW  0x0C
000159 0698      	.DW  _0xCD+24
00015a 00bc      	.DW  _0x0*2+16
                 
00015b 0018      	.DW  0x18
00015c 06a4      	.DW  _0xEE
00015d 0143      	.DW  _0x0*2+151
                 
00015e 0002      	.DW  0x02
00015f 0008      	.DW  0x08
000160 00aa      	.DW  _0xF9*2
                 
000161 0001      	.DW  0x01
000162 07b1      	.DW  __seed_G101
000163 01f6      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000164 0000      	.DW  0
                 
                 __RESET:
000165 94f8      	CLI
000166 27ee      	CLR  R30
000167 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000168 e0f1      	LDI  R31,1
000169 bff5      	OUT  MCUCR,R31
00016a bfe5      	OUT  MCUCR,R30
00016b 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
00016d e1f8      	LDI  R31,0x18
00016e bdf1      	OUT  WDTCR,R31
00016f bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000170 e08d      	LDI  R24,(14-2)+1
000171 e0a2      	LDI  R26,2
000172 27bb      	CLR  R27
                 __CLEAR_REG:
000173 93ed      	ST   X+,R30
000174 958a      	DEC  R24
000175 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000176 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000177 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000178 e0a0      	LDI  R26,LOW(__SRAM_START)
000179 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00017a 93ed      	ST   X+,R30
00017b 9701      	SBIW R24,1
00017c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00017d e0e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00017e e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00017f 9185      	LPM  R24,Z+
000180 9195      	LPM  R25,Z+
000181 9700      	SBIW R24,0
000182 f061      	BREQ __GLOBAL_INI_END
000183 91a5      	LPM  R26,Z+
000184 91b5      	LPM  R27,Z+
000185 9005      	LPM  R0,Z+
000186 9015      	LPM  R1,Z+
000187 01bf      	MOVW R22,R30
000188 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000189 9005      	LPM  R0,Z+
00018a 920d      	ST   X+,R0
00018b 9701      	SBIW R24,1
00018c f7e1      	BRNE __GLOBAL_INI_LOOP
00018d 01fb      	MOVW R30,R22
00018e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00018f efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000190 bfed      	OUT  SPL,R30
000191 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000192 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000193 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000194 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000195 940c 02b3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;///////////////////////////////////////////////////////////////////////////////
                 ;#include <mega64.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;///////////////////////////////////////////////////////////////////////////////
                 ;bit data_ready=0,trueData=0;
                 ;unsigned char caller_id[20];
                 ;char sms[50];
                 ;int count;
                 ;int len;
                 ;eeprom unsigned char sms_in_e2prom[256],setpoint_saved,gps_in_e2prom[256];
                 ;void Security(void);
                 ;void process_data(void);
                 ;void process_sms(void);
                 ;void gpspwr(void);
                 ;void CLSSMS (void);
                 ;void poweron(void);
                 ;void echooff(void);
                 ;void read_gps(void);
                 ;void Batt(void);
                 ;void getAntenna();
                 ;
                 ;char *securityMode = "OFF";
                 
                 	.DSEG
                 _0x3:
000500           	.BYTE 0x4
                 ;//////////////////////////////////////////////////////////////////////////////
                 ;#define  led_U PORTA.2
                 ;#define  led_D PORTB.5
                 ;#define  POWER PORTC.0
                 ;///////////////////////////////////////////////////////////////////////////////
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART0 Receiver buffer
                 ;#define RX_BUFFER_SIZE0 80
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#endif
                 ;
                 ;// This flag is set on USART0 Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART0 Receiver interrupt service routine
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 0050 {
                 
                 	.CSEG
                 _usart0_rx_isr:
000197 93ea      	ST   -Y,R30
000198 93fa      	ST   -Y,R31
000199 b7ef      	IN   R30,SREG
00019a 93ea      	ST   -Y,R30
                 ; 0000 0051 char status,data;
                 ; 0000 0052 status=UCSR0A;
00019b 931a      	ST   -Y,R17
00019c 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00019d b11b      	IN   R17,11
                 ; 0000 0053 data=UDR0;
00019e b10c      	IN   R16,12
                 ; 0000 0054 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00019f 2fe1      	MOV  R30,R17
0001a0 71ec      	ANDI R30,LOW(0x1C)
0001a1 f489      	BRNE _0x4
                 ; 0000 0055    {
                 ; 0000 0056    rx_buffer0[rx_wr_index0++]=data;
0001a2 2deb      	MOV  R30,R11
0001a3 94b3      	INC  R11
0001a4 e0f0      	LDI  R31,0
0001a5 53e0      	SUBI R30,LOW(-_rx_buffer0)
0001a6 4ff9      	SBCI R31,HIGH(-_rx_buffer0)
0001a7 8300      	ST   Z,R16
                 ; 0000 0057 #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0058    // special case for receiver buffer size=256
                 ; 0000 0059    if (++rx_counter0 == 0)
                 ; 0000 005A       {
                 ; 0000 005B #else
                 ; 0000 005C    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0001a8 e5e0      	LDI  R30,LOW(80)
0001a9 15eb      	CP   R30,R11
0001aa f409      	BRNE _0x5
0001ab 24bb      	CLR  R11
                 ; 0000 005D    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x5:
0001ac 94d3      	INC  R13
0001ad e5e0      	LDI  R30,LOW(80)
0001ae 15ed      	CP   R30,R13
0001af f419      	BRNE _0x6
                 ; 0000 005E       {
                 ; 0000 005F       rx_counter0=0;
0001b0 24dd      	CLR  R13
                 ; 0000 0060 #endif
                 ; 0000 0061       rx_buffer_overflow0=1;
0001b1 9468      	SET
0001b2 f822      	BLD  R2,2
                 ; 0000 0062       }
                 ; 0000 0063    }
                 _0x6:
                 ; 0000 0064 }
                 _0x4:
0001b3 9109      	LD   R16,Y+
0001b4 9119      	LD   R17,Y+
0001b5 91e9      	LD   R30,Y+
0001b6 bfef      	OUT  SREG,R30
0001b7 91f9      	LD   R31,Y+
0001b8 91e9      	LD   R30,Y+
0001b9 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART0 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 006B {
                 _getchar:
                 ; 0000 006C char data;
                 ; 0000 006D while (rx_counter0==0);
0001ba 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x7:
0001bb 20dd      	TST  R13
0001bc f3f1      	BREQ _0x7
                 ; 0000 006E data=rx_buffer0[rx_rd_index0++];
0001bd 2dea      	MOV  R30,R10
0001be 94a3      	INC  R10
0001bf e0f0      	LDI  R31,0
0001c0 53e0      	SUBI R30,LOW(-_rx_buffer0)
0001c1 4ff9      	SBCI R31,HIGH(-_rx_buffer0)
0001c2 8110      	LD   R17,Z
                 ; 0000 006F #if RX_BUFFER_SIZE0 != 256
                 ; 0000 0070 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
0001c3 e5e0      	LDI  R30,LOW(80)
0001c4 15ea      	CP   R30,R10
0001c5 f409      	BRNE _0xA
0001c6 24aa      	CLR  R10
                 ; 0000 0071 #endif
                 ; 0000 0072 #asm("cli")
                 _0xA:
0001c7 94f8      	cli
                 ; 0000 0073 --rx_counter0;
0001c8 94da      	DEC  R13
                 ; 0000 0074 #asm("sei")
0001c9 9478      	sei
0001ca c095      	RJMP _0x20A0007
                 ; 0000 0075 return data;
                 ; 0000 0076 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART0 Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 40
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART0 Transmitter interrupt service routine
                 ;interrupt [USART0_TXC] void usart0_tx_isr(void)
                 ; 0000 0086 {
                 _usart0_tx_isr:
0001cb 93aa      	ST   -Y,R26
0001cc 93ea      	ST   -Y,R30
0001cd 93fa      	ST   -Y,R31
0001ce b7ef      	IN   R30,SREG
0001cf 93ea      	ST   -Y,R30
                 ; 0000 0087 if (tx_counter0)
0001d0 91e0 0749 	LDS  R30,_tx_counter0
0001d2 30e0      	CPI  R30,0
0001d3 f0a9      	BREQ _0xB
                 ; 0000 0088    {
                 ; 0000 0089    --tx_counter0;
0001d4 50e1      	SUBI R30,LOW(1)
0001d5 93e0 0749 	STS  _tx_counter0,R30
                 ; 0000 008A    UDR0=tx_buffer0[tx_rd_index0++];
0001d7 91e0 0748 	LDS  R30,_tx_rd_index0
0001d9 5fef      	SUBI R30,-LOW(1)
0001da 93e0 0748 	STS  _tx_rd_index0,R30
0001dc 50e1      	SUBI R30,LOW(1)
0001dd e0f0      	LDI  R31,0
0001de 5ee0      	SUBI R30,LOW(-_tx_buffer0)
0001df 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
0001e0 81e0      	LD   R30,Z
0001e1 b9ec      	OUT  0xC,R30
                 ; 0000 008B #if TX_BUFFER_SIZE0 != 256
                 ; 0000 008C    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0001e2 91a0 0748 	LDS  R26,_tx_rd_index0
0001e4 32a8      	CPI  R26,LOW(0x28)
0001e5 f419      	BRNE _0xC
0001e6 e0e0      	LDI  R30,LOW(0)
0001e7 93e0 0748 	STS  _tx_rd_index0,R30
                 ; 0000 008D #endif
                 ; 0000 008E    }
                 _0xC:
                 ; 0000 008F }
                 _0xB:
0001e9 91e9      	LD   R30,Y+
0001ea bfef      	OUT  SREG,R30
0001eb 91f9      	LD   R31,Y+
0001ec 91e9      	LD   R30,Y+
0001ed 91a9      	LD   R26,Y+
0001ee 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART0 Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 0096 {
                 _putchar:
                 ; 0000 0097 while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0xD:
0001ef 91a0 0749 	LDS  R26,_tx_counter0
0001f1 32a8      	CPI  R26,LOW(0x28)
0001f2 f3e1      	BREQ _0xD
                 ; 0000 0098 #asm("cli")
0001f3 94f8      	cli
                 ; 0000 0099 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
0001f4 91e0 0749 	LDS  R30,_tx_counter0
0001f6 30e0      	CPI  R30,0
0001f7 f411      	BRNE _0x11
0001f8 995d      	SBIC 0xB,5
0001f9 c011      	RJMP _0x10
                 _0x11:
                 ; 0000 009A    {
                 ; 0000 009B    tx_buffer0[tx_wr_index0++]=c;
0001fa 2dec      	MOV  R30,R12
0001fb 94c3      	INC  R12
0001fc e0f0      	LDI  R31,0
0001fd 5ee0      	SUBI R30,LOW(-_tx_buffer0)
0001fe 4ff8      	SBCI R31,HIGH(-_tx_buffer0)
0001ff 81a8      	LD   R26,Y
000200 83a0      	STD  Z+0,R26
                 ; 0000 009C #if TX_BUFFER_SIZE0 != 256
                 ; 0000 009D    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
000201 e2e8      	LDI  R30,LOW(40)
000202 15ec      	CP   R30,R12
000203 f409      	BRNE _0x13
000204 24cc      	CLR  R12
                 ; 0000 009E #endif
                 ; 0000 009F    ++tx_counter0;
                 _0x13:
000205 91e0 0749 	LDS  R30,_tx_counter0
000207 5fef      	SUBI R30,-LOW(1)
000208 93e0 0749 	STS  _tx_counter0,R30
                 ; 0000 00A0    }
                 ; 0000 00A1 else
00020a c002      	RJMP _0x14
                 _0x10:
                 ; 0000 00A2    UDR0=c;
00020b 81e8      	LD   R30,Y
00020c b9ec      	OUT  0xC,R30
                 ; 0000 00A3 #asm("sei")
                 _0x14:
00020d 9478      	sei
                 ; 0000 00A4 }
00020e 9621      	ADIW R28,1
00020f 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;// USART1 Receiver buffer
                 ;#define RX_BUFFER_SIZE1 100
                 ;char rx_buffer1[RX_BUFFER_SIZE1];
                 ;
                 ;#if RX_BUFFER_SIZE1 <= 256
                 ;unsigned char rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#else
                 ;unsigned int rx_wr_index1,rx_rd_index1,rx_counter1;
                 ;#endif
                 ;
                 ;// This flag is set on USART1 Receiver buffer overflow
                 ;bit rx_buffer_overflow1;
                 ;
                 ;// USART1 Receiver interrupt service routine
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void)
                 ; 0000 00B8 {
                 _usart1_rx_isr:
000210 93aa      	ST   -Y,R26
000211 93ea      	ST   -Y,R30
000212 93fa      	ST   -Y,R31
000213 b7ef      	IN   R30,SREG
000214 93ea      	ST   -Y,R30
                 ; 0000 00B9 char status,data;
                 ; 0000 00BA status=UCSR1A;
000215 931a      	ST   -Y,R17
000216 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000217 9110 009b 	LDS  R17,155
                 ; 0000 00BB data=UDR1;
000219 9100 009c 	LDS  R16,156
                 ; 0000 00BC if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00021b 2fe1      	MOV  R30,R17
00021c 71ec      	ANDI R30,LOW(0x1C)
00021d f4e9      	BRNE _0x15
                 ; 0000 00BD    {
                 ; 0000 00BE    rx_buffer1[rx_wr_index1++]=data;
00021e 91e0 07ae 	LDS  R30,_rx_wr_index1
000220 5fef      	SUBI R30,-LOW(1)
000221 93e0 07ae 	STS  _rx_wr_index1,R30
000223 50e1      	SUBI R30,LOW(1)
000224 e0f0      	LDI  R31,0
000225 5be6      	SUBI R30,LOW(-_rx_buffer1)
000226 4ff8      	SBCI R31,HIGH(-_rx_buffer1)
000227 8300      	ST   Z,R16
                 ; 0000 00BF #if RX_BUFFER_SIZE1 == 256
                 ; 0000 00C0    // special case for receiver buffer size=256
                 ; 0000 00C1    if (++rx_counter1 == 0) rx_buffer_overflow1=1;
                 ; 0000 00C2 #else
                 ; 0000 00C3    if (rx_wr_index1 == RX_BUFFER_SIZE1) rx_wr_index1=0;
000228 91a0 07ae 	LDS  R26,_rx_wr_index1
00022a 36a4      	CPI  R26,LOW(0x64)
00022b f419      	BRNE _0x16
00022c e0e0      	LDI  R30,LOW(0)
00022d 93e0 07ae 	STS  _rx_wr_index1,R30
                 ; 0000 00C4    if (++rx_counter1 == RX_BUFFER_SIZE1)
                 _0x16:
00022f 91a0 07b0 	LDS  R26,_rx_counter1
000231 5faf      	SUBI R26,-LOW(1)
000232 93a0 07b0 	STS  _rx_counter1,R26
000234 36a4      	CPI  R26,LOW(0x64)
000235 f429      	BRNE _0x17
                 ; 0000 00C5       {
                 ; 0000 00C6       rx_counter1=0;
000236 e0e0      	LDI  R30,LOW(0)
000237 93e0 07b0 	STS  _rx_counter1,R30
                 ; 0000 00C7       rx_buffer_overflow1=1;
000239 9468      	SET
00023a f823      	BLD  R2,3
                 ; 0000 00C8       }
                 ; 0000 00C9 #endif
                 ; 0000 00CA    }
                 _0x17:
                 ; 0000 00CB }
                 _0x15:
00023b 9109      	LD   R16,Y+
00023c 9119      	LD   R17,Y+
00023d 91e9      	LD   R30,Y+
00023e bfef      	OUT  SREG,R30
00023f 91f9      	LD   R31,Y+
000240 91e9      	LD   R30,Y+
000241 91a9      	LD   R26,Y+
000242 9518      	RETI
                 ;
                 ;// Get a character from the USART1 Receiver buffer
                 ;#pragma used+
                 ;char getchar1(void)
                 ; 0000 00D0 {
                 _getchar1:
                 ; 0000 00D1 char data;
                 ; 0000 00D2 while (rx_counter1==0);
000243 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x18:
000244 91e0 07b0 	LDS  R30,_rx_counter1
000246 30e0      	CPI  R30,0
000247 f3e1      	BREQ _0x18
                 ; 0000 00D3 data=rx_buffer1[rx_rd_index1++];
000248 91e0 07af 	LDS  R30,_rx_rd_index1
00024a 5fef      	SUBI R30,-LOW(1)
00024b 93e0 07af 	STS  _rx_rd_index1,R30
00024d 50e1      	SUBI R30,LOW(1)
00024e e0f0      	LDI  R31,0
00024f 5be6      	SUBI R30,LOW(-_rx_buffer1)
000250 4ff8      	SBCI R31,HIGH(-_rx_buffer1)
000251 8110      	LD   R17,Z
                 ; 0000 00D4 #if RX_BUFFER_SIZE1 != 256
                 ; 0000 00D5 if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
000252 91a0 07af 	LDS  R26,_rx_rd_index1
000254 36a4      	CPI  R26,LOW(0x64)
000255 f419      	BRNE _0x1B
000256 e0e0      	LDI  R30,LOW(0)
000257 93e0 07af 	STS  _rx_rd_index1,R30
                 ; 0000 00D6 #endif
                 ; 0000 00D7 #asm("cli")
                 _0x1B:
000259 94f8      	cli
                 ; 0000 00D8 --rx_counter1;
00025a 91e0 07b0 	LDS  R30,_rx_counter1
00025c 50e1      	SUBI R30,LOW(1)
00025d 93e0 07b0 	STS  _rx_counter1,R30
                 ; 0000 00D9 #asm("sei")
00025f 9478      	sei
                 _0x20A0007:
                 ; 0000 00DA return data;
000260 2fe1      	MOV  R30,R17
000261 9119      	LD   R17,Y+
000262 9508      	RET
                 ; 0000 00DB }
                 ;#pragma used-
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;/////////////////////////
                 ;void GPSRST()
                 ; 0000 00E1 {
                 _GPSRST:
                 ; 0000 00E2 putchar ('A');
000263 e4e1      	LDI  R30,LOW(65)
000264 93ea      	ST   -Y,R30
000265 df89      	RCALL _putchar
                 ; 0000 00E3 putchar ('T');
000266 e5e4      	LDI  R30,LOW(84)
000267 93ea      	ST   -Y,R30
000268 df86      	RCALL _putchar
                 ; 0000 00E4 putchar ('+');
000269 e2eb      	LDI  R30,LOW(43)
00026a 93ea      	ST   -Y,R30
00026b df83      	RCALL _putchar
                 ; 0000 00E5 putchar ('C');
00026c e4e3      	LDI  R30,LOW(67)
00026d 93ea      	ST   -Y,R30
00026e df80      	RCALL _putchar
                 ; 0000 00E6 putchar ('G');
00026f e4e7      	LDI  R30,LOW(71)
000270 93ea      	ST   -Y,R30
000271 df7d      	RCALL _putchar
                 ; 0000 00E7 putchar ('P');
000272 e5e0      	LDI  R30,LOW(80)
000273 93ea      	ST   -Y,R30
000274 df7a      	RCALL _putchar
                 ; 0000 00E8 putchar ('S');
000275 e5e3      	LDI  R30,LOW(83)
000276 93ea      	ST   -Y,R30
000277 df77      	RCALL _putchar
                 ; 0000 00E9 putchar ('R');
000278 e5e2      	LDI  R30,LOW(82)
000279 93ea      	ST   -Y,R30
00027a df74      	RCALL _putchar
                 ; 0000 00EA putchar ('S');
00027b e5e3      	LDI  R30,LOW(83)
00027c 93ea      	ST   -Y,R30
00027d df71      	RCALL _putchar
                 ; 0000 00EB putchar ('T');
00027e e5e4      	LDI  R30,LOW(84)
00027f 93ea      	ST   -Y,R30
000280 df6e      	RCALL _putchar
                 ; 0000 00EC putchar ('=');
000281 e3ed      	LDI  R30,LOW(61)
000282 93ea      	ST   -Y,R30
000283 df6b      	RCALL _putchar
                 ; 0000 00ED putchar ('1');
000284 e3e1      	LDI  R30,LOW(49)
000285 93ea      	ST   -Y,R30
000286 df68      	RCALL _putchar
                 ; 0000 00EE delay_ms(20);
000287 e1e4      	LDI  R30,LOW(20)
000288 e0f0      	LDI  R31,HIGH(20)
000289 93fa      	ST   -Y,R31
00028a 93ea      	ST   -Y,R30
00028b 940e 0bf6 	CALL _delay_ms
                 ; 0000 00EF putchar (13);
00028d e0ed      	LDI  R30,LOW(13)
00028e 93ea      	ST   -Y,R30
00028f df5f      	RCALL _putchar
                 ; 0000 00F0 putchar (10);
000290 e0ea      	LDI  R30,LOW(10)
000291 93ea      	ST   -Y,R30
000292 df5c      	RCALL _putchar
                 ; 0000 00F1 delay_ms(5000);
000293 e8e8      	LDI  R30,LOW(5000)
000294 e1f3      	LDI  R31,HIGH(5000)
000295 c11e      	RJMP _0x20A0006
                 ; 0000 00F2 }
                 ;typedef char * CHAR;
                 ;//*******************************************************************************************************
                 ;//*******************************************************************************************************
                 ;int GPSPosition(CHAR input)
                 ; 0000 00F7 {
                 _GPSPosition:
                 ; 0000 00F8     if ( strlen(input) >= 10 )
                 ;	*input -> Y+0
000296 81e8      	LD   R30,Y
000297 81f9      	LDD  R31,Y+1
000298 93fa      	ST   -Y,R31
000299 93ea      	ST   -Y,R30
00029a 940e 0be1 	CALL _strlen
00029c 973a      	SBIW R30,10
00029d f090      	BRLO _0x1C
                 ; 0000 00F9     {
                 ; 0000 00FA         if (input[5] == 'C' || input[5] == 'c')
00029e 81a8      	LD   R26,Y
00029f 81b9      	LDD  R27,Y+1
0002a0 9615      	ADIW R26,5
0002a1 91ac      	LD   R26,X
0002a2 34a3      	CPI  R26,LOW(0x43)
0002a3 f031      	BREQ _0x1E
0002a4 81a8      	LD   R26,Y
0002a5 81b9      	LDD  R27,Y+1
0002a6 9615      	ADIW R26,5
0002a7 91ac      	LD   R26,X
0002a8 36a3      	CPI  R26,LOW(0x63)
0002a9 f419      	BRNE _0x1D
                 _0x1E:
                 ; 0000 00FB             return 1;
0002aa e0e1      	LDI  R30,LOW(1)
0002ab e0f0      	LDI  R31,HIGH(1)
0002ac c24c      	RJMP _0x20A0005
                 ; 0000 00FC         else
                 _0x1D:
                 ; 0000 00FD         {
                 ; 0000 00FE             return 0;
0002ad e0e0      	LDI  R30,LOW(0)
0002ae e0f0      	LDI  R31,HIGH(0)
0002af c249      	RJMP _0x20A0005
                 ; 0000 00FF         }
                 ; 0000 0100     }
                 ; 0000 0101     return 0;
                 _0x1C:
0002b0 e0e0      	LDI  R30,LOW(0)
0002b1 e0f0      	LDI  R31,HIGH(0)
0002b2 c246      	RJMP _0x20A0005
                 ; 0000 0102 }
                 ;
                 ;void process_gps()
                 ; 0000 0105 {
                 ; 0000 0106 
                 ; 0000 0107     char GPSData[256];
                 ; 0000 0108     unsigned char chread;
                 ; 0000 0109     unsigned int  loopcount,index=0;
                 ; 0000 010A     unsigned int  pkindex;
                 ; 0000 010B     loopcount = 0;
                 ;	GPSData -> Y+8
                 ;	chread -> R17
                 ;	loopcount -> R18,R19
                 ;	index -> R20,R21
                 ;	pkindex -> Y+6
                 ; 0000 010C     pkindex = 0;
                 ; 0000 010D     while (rx_counter1>0)
                 ; 0000 010E     {
                 ; 0000 010F         chread=getchar1();
                 ; 0000 0110         if ((chread=='$'))
                 ; 0000 0111         {
                 ; 0000 0112             loopcount++;
                 ; 0000 0113             if (loopcount == 2)
                 ; 0000 0114             {
                 ; 0000 0115                  if (GPSPosition(GPSData))
                 ; 0000 0116                  {
                 ; 0000 0117                     if (strlen(GPSData) > 10)
                 ; 0000 0118                     {
                 ; 0000 0119                         for (;pkindex >= index;index++)
                 ; 0000 011A                             gps_in_e2prom[index]=GPSData[index];
                 ; 0000 011B trueData = 1;
                 ; 0000 011C                     }
                 ; 0000 011D                     else
                 ; 0000 011E                     {
                 ; 0000 011F                         trueData = 0;
                 ; 0000 0120                     }
                 ; 0000 0121                     break;
                 ; 0000 0122                  }
                 ; 0000 0123                  else
                 ; 0000 0124                  {
                 ; 0000 0125                         strcpy(GPSData,"");
                 ; 0000 0126                         pkindex = 0;
                 ; 0000 0127                  }
                 ; 0000 0128             }
                 ; 0000 0129             else
                 ; 0000 012A             {
                 ; 0000 012B                 GPSData[pkindex] = chread;
                 ; 0000 012C             }
                 ; 0000 012D 
                 ; 0000 012E         }
                 ; 0000 012F     }
                 ; 0000 0130 
                 ; 0000 0131 }
                 
                 	.DSEG
                 _0x2D:
000504           	.BYTE 0x1
                 ;
                 ;CHAR Split (CHAR input, char tag, int Index)
                 ; 0000 0134 {
                 
                 	.CSEG
                 ; 0000 0135       CHAR tmpstr;
                 ; 0000 0136       int  CountIndex = 0;
                 ; 0000 0137       int Count;
                 ; 0000 0138       for (Count = 0 ; Count < strlen (input); Count++)
                 ;	*input -> Y+9
                 ;	tag -> Y+8
                 ;	Index -> Y+6
                 ;	*tmpstr -> R16,R17
                 ;	CountIndex -> R18,R19
                 ;	Count -> R20,R21
                 ; 0000 0139       {
                 ; 0000 013A             if (input [Count] == tag)
                 ; 0000 013B             {
                 ; 0000 013C                if (CountIndex == Index)
                 ; 0000 013D                {
                 ; 0000 013E                     return tmpstr;
                 ; 0000 013F                }
                 ; 0000 0140                else
                 ; 0000 0141                {
                 ; 0000 0142                     strcpy (tmpstr,"");
                 ; 0000 0143                     CountIndex++;
                 ; 0000 0144                }
                 ; 0000 0145             }
                 ; 0000 0146             else
                 ; 0000 0147             {
                 ; 0000 0148                 strcat(tmpstr,(CHAR)(input[Count]));
                 ; 0000 0149             }
                 ; 0000 014A       }
                 ; 0000 014B       return tmpstr;
                 ; 0000 014C }
                 
                 	.DSEG
                 _0x35:
000505           	.BYTE 0x1
                 ;
                 ;///////////////////////////////////////////////////////////////////
                 ;void main(void)
                 ; 0000 0150 {
                 
                 	.CSEG
                 _main:
                 ; 0000 0151 PORTA=0x00;
0002b3 e0e0      	LDI  R30,LOW(0)
0002b4 bbeb      	OUT  0x1B,R30
                 ; 0000 0152 DDRA=0x00;
0002b5 bbea      	OUT  0x1A,R30
                 ; 0000 0153 PORTB=0x00;
0002b6 bbe8      	OUT  0x18,R30
                 ; 0000 0154 DDRB=0x70;
0002b7 e7e0      	LDI  R30,LOW(112)
0002b8 bbe7      	OUT  0x17,R30
                 ; 0000 0155 PORTC=0x00;
0002b9 e0e0      	LDI  R30,LOW(0)
0002ba bbe5      	OUT  0x15,R30
                 ; 0000 0156 DDRC=0x07;
0002bb e0e7      	LDI  R30,LOW(7)
0002bc bbe4      	OUT  0x14,R30
                 ; 0000 0157 PORTD=0x00;
0002bd e0e0      	LDI  R30,LOW(0)
0002be bbe2      	OUT  0x12,R30
                 ; 0000 0158 DDRD=0xA0;
0002bf eae0      	LDI  R30,LOW(160)
0002c0 bbe1      	OUT  0x11,R30
                 ; 0000 0159 
                 ; 0000 015A TCNT0=0x00;
0002c1 e0e0      	LDI  R30,LOW(0)
0002c2 bfe2      	OUT  0x32,R30
                 ; 0000 015B TCCR1A=0x00;
0002c3 bdef      	OUT  0x2F,R30
                 ; 0000 015C TCCR1B=0x00;
0002c4 bdee      	OUT  0x2E,R30
                 ; 0000 015D TCCR2=0x00;
0002c5 bde5      	OUT  0x25,R30
                 ; 0000 015E TCCR3A=0x00;
0002c6 93e0 008b 	STS  139,R30
                 ; 0000 015F TCCR3B=0x00;
0002c8 93e0 008a 	STS  138,R30
                 ; 0000 0160 
                 ; 0000 0161 // External Interrupt(s) initialization
                 ; 0000 0162 EICRA=0x00;
0002ca 93e0 006a 	STS  106,R30
                 ; 0000 0163 EICRB=0x00;
0002cc bfea      	OUT  0x3A,R30
                 ; 0000 0164 EIMSK=0x00;
0002cd bfe9      	OUT  0x39,R30
                 ; 0000 0165 
                 ; 0000 0166 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0167 TIMSK=0x00;
0002ce bfe7      	OUT  0x37,R30
                 ; 0000 0168 
                 ; 0000 0169 ETIMSK=0x00;
0002cf 93e0 007d 	STS  125,R30
                 ; 0000 016A 
                 ; 0000 016B UCSR0A=0x00;
0002d1 b9eb      	OUT  0xB,R30
                 ; 0000 016C UCSR0B=0xD8;
0002d2 ede8      	LDI  R30,LOW(216)
0002d3 b9ea      	OUT  0xA,R30
                 ; 0000 016D UCSR0C=0x06;
0002d4 e0e6      	LDI  R30,LOW(6)
0002d5 93e0 0095 	STS  149,R30
                 ; 0000 016E UBRR0H=0x00;
0002d7 e0e0      	LDI  R30,LOW(0)
0002d8 93e0 0090 	STS  144,R30
                 ; 0000 016F UBRR0L=0x2F;
0002da e2ef      	LDI  R30,LOW(47)
0002db b9e9      	OUT  0x9,R30
                 ; 0000 0170 UCSR1A=0x00;
0002dc e0e0      	LDI  R30,LOW(0)
0002dd 93e0 009b 	STS  155,R30
                 ; 0000 0171 UCSR1B=0x90;
0002df e9e0      	LDI  R30,LOW(144)
0002e0 93e0 009a 	STS  154,R30
                 ; 0000 0172 UCSR1C=0x06;
0002e2 e0e6      	LDI  R30,LOW(6)
0002e3 93e0 009d 	STS  157,R30
                 ; 0000 0173 UBRR1H=0x00;
0002e5 e0e0      	LDI  R30,LOW(0)
0002e6 93e0 0098 	STS  152,R30
                 ; 0000 0174 UBRR1L=0x2F;
0002e8 e2ef      	LDI  R30,LOW(47)
0002e9 93e0 0099 	STS  153,R30
                 ; 0000 0175 
                 ; 0000 0176 ACSR=0x80;
0002eb e8e0      	LDI  R30,LOW(128)
0002ec b9e8      	OUT  0x8,R30
                 ; 0000 0177 SFIOR=0x00;
0002ed e0e0      	LDI  R30,LOW(0)
0002ee bde0      	OUT  0x20,R30
                 ; 0000 0178 
                 ; 0000 0179 // ADC initialization
                 ; 0000 017A // ADC disabled
                 ; 0000 017B ADCSRA=0x00;
0002ef b9e6      	OUT  0x6,R30
                 ; 0000 017C 
                 ; 0000 017D // SPI initialization
                 ; 0000 017E // SPI disabled
                 ; 0000 017F SPCR=0x00;
0002f0 b9ed      	OUT  0xD,R30
                 ; 0000 0180 
                 ; 0000 0181 // TWI initialization
                 ; 0000 0182 // TWI disabled
                 ; 0000 0183 TWCR=0x00;
0002f1 93e0 0074 	STS  116,R30
                 ; 0000 0184 
                 ; 0000 0185 // Global enable interrupts
                 ; 0000 0186 #asm("sei")
0002f3 9478      	sei
                 ; 0000 0187 
                 ; 0000 0188 POWER=1;
0002f4 9aa8      	SBI  0x15,0
                 ; 0000 0189 delay_ms(1500);
0002f5 edec      	LDI  R30,LOW(1500)
0002f6 e0f5      	LDI  R31,HIGH(1500)
0002f7 93fa      	ST   -Y,R31
0002f8 93ea      	ST   -Y,R30
0002f9 940e 0bf6 	CALL _delay_ms
                 ; 0000 018A POWER=0;
0002fb 98a8      	CBI  0x15,0
                 ; 0000 018B delay_ms(10000);
0002fc e1e0      	LDI  R30,LOW(10000)
0002fd e2f7      	LDI  R31,HIGH(10000)
0002fe 93fa      	ST   -Y,R31
0002ff 93ea      	ST   -Y,R30
000300 940e 0bf6 	CALL _delay_ms
                 ; 0000 018C poweron();
000302 d634      	RCALL _poweron
                 ; 0000 018D echooff();
000303 d5cf      	RCALL _echooff
                 ; 0000 018E CLSSMS();
000304 d011      	RCALL _CLSSMS
                 ; 0000 018F gpspwr();
000305 d0b3      	RCALL _gpspwr
                 ; 0000 0190 GPSRST();
000306 df5c      	RCALL _GPSRST
                 ; 0000 0191 while (rx_counter0>0)    getchar();
                 _0x3B:
000307 e0e0      	LDI  R30,LOW(0)
000308 15ed      	CP   R30,R13
000309 f410      	BRSH _0x3D
00030a deaf      	RCALL _getchar
00030b cffb      	RJMP _0x3B
                 _0x3D:
                 ; 0000 0192 while (1)
                 _0x3E:
                 ; 0000 0193       {
                 ; 0000 0194       if (rx_counter0) process_data();
00030c 20dd      	TST  R13
00030d f009      	BREQ _0x41
00030e d4b9      	RCALL _process_data
                 ; 0000 0195 
                 ; 0000 0196       if( securityMode[1] == 'N' )
                 _0x41:
00030f 01f4      	MOVW R30,R8
000310 81a1      	LDD  R26,Z+1
000311 34ae      	CPI  R26,LOW(0x4E)
000312 f409      	BRNE _0x42
                 ; 0000 0197       Security();
000313 d679      	RCALL _Security
                 ; 0000 0198       //Batt();
                 ; 0000 0199       }
                 _0x42:
000314 cff7      	RJMP _0x3E
                 ; 0000 019A }
                 _0x43:
000315 cfff      	RJMP _0x43
                 ;
                 ;//////////////////////////////////////////////
                 ;void CLSSMS ()
                 ; 0000 019E {
                 _CLSSMS:
                 ; 0000 019F         delay_ms(1000);
000316 eee8      	LDI  R30,LOW(1000)
000317 e0f3      	LDI  R31,HIGH(1000)
000318 93fa      	ST   -Y,R31
000319 93ea      	ST   -Y,R30
00031a 940e 0bf6 	CALL _delay_ms
                 ; 0000 01A0         puts("AT+CMGD=1 \r");delay_ms(1000);
                +
00031c e0e6     +LDI R30 , LOW ( _0x44 + ( 0 ) )
00031d e0f5     +LDI R31 , HIGH ( _0x44 + ( 0 ) )
                 	__POINTW1MN _0x44,0
00031e 93fa      	ST   -Y,R31
00031f 93ea      	ST   -Y,R30
000320 940e 0a15 	CALL _puts
000322 eee8      	LDI  R30,LOW(1000)
000323 e0f3      	LDI  R31,HIGH(1000)
000324 93fa      	ST   -Y,R31
000325 93ea      	ST   -Y,R30
000326 940e 0bf6 	CALL _delay_ms
                 ; 0000 01A1         puts("AT+CMGD=2 \r");delay_ms(1000);
                +
000328 e1e2     +LDI R30 , LOW ( _0x44 + ( 12 ) )
000329 e0f5     +LDI R31 , HIGH ( _0x44 + ( 12 ) )
                 	__POINTW1MN _0x44,12
00032a 93fa      	ST   -Y,R31
00032b 93ea      	ST   -Y,R30
00032c 940e 0a15 	CALL _puts
00032e eee8      	LDI  R30,LOW(1000)
00032f e0f3      	LDI  R31,HIGH(1000)
000330 93fa      	ST   -Y,R31
000331 93ea      	ST   -Y,R30
000332 940e 0bf6 	CALL _delay_ms
                 ; 0000 01A2         puts("AT+CMGD=3 \r");delay_ms(1000);
                +
000334 e1ee     +LDI R30 , LOW ( _0x44 + ( 24 ) )
000335 e0f5     +LDI R31 , HIGH ( _0x44 + ( 24 ) )
                 	__POINTW1MN _0x44,24
000336 93fa      	ST   -Y,R31
000337 93ea      	ST   -Y,R30
000338 940e 0a15 	CALL _puts
00033a eee8      	LDI  R30,LOW(1000)
00033b e0f3      	LDI  R31,HIGH(1000)
00033c 93fa      	ST   -Y,R31
00033d 93ea      	ST   -Y,R30
00033e 940e 0bf6 	CALL _delay_ms
                 ; 0000 01A3         puts("AT+CMGD=4 \r");delay_ms(1000);
                +
000340 e2ea     +LDI R30 , LOW ( _0x44 + ( 36 ) )
000341 e0f5     +LDI R31 , HIGH ( _0x44 + ( 36 ) )
                 	__POINTW1MN _0x44,36
000342 93fa      	ST   -Y,R31
000343 93ea      	ST   -Y,R30
000344 940e 0a15 	CALL _puts
000346 eee8      	LDI  R30,LOW(1000)
000347 e0f3      	LDI  R31,HIGH(1000)
000348 93fa      	ST   -Y,R31
000349 93ea      	ST   -Y,R30
00034a 940e 0bf6 	CALL _delay_ms
                 ; 0000 01A4         puts("AT+CMGD=5 \r");delay_ms(1000);
                +
00034c e3e6     +LDI R30 , LOW ( _0x44 + ( 48 ) )
00034d e0f5     +LDI R31 , HIGH ( _0x44 + ( 48 ) )
                 	__POINTW1MN _0x44,48
00034e 93fa      	ST   -Y,R31
00034f 93ea      	ST   -Y,R30
000350 940e 0a15 	CALL _puts
000352 eee8      	LDI  R30,LOW(1000)
000353 e0f3      	LDI  R31,HIGH(1000)
000354 93fa      	ST   -Y,R31
000355 93ea      	ST   -Y,R30
000356 940e 0bf6 	CALL _delay_ms
                 ; 0000 01A5         puts("AT+CMGD=6 \r");delay_ms(1000);
                +
000358 e4e2     +LDI R30 , LOW ( _0x44 + ( 60 ) )
000359 e0f5     +LDI R31 , HIGH ( _0x44 + ( 60 ) )
                 	__POINTW1MN _0x44,60
00035a 93fa      	ST   -Y,R31
00035b 93ea      	ST   -Y,R30
00035c 940e 0a15 	CALL _puts
00035e eee8      	LDI  R30,LOW(1000)
00035f e0f3      	LDI  R31,HIGH(1000)
000360 93fa      	ST   -Y,R31
000361 93ea      	ST   -Y,R30
000362 940e 0bf6 	CALL _delay_ms
                 ; 0000 01A6         puts("AT+CMGD=7 \r");delay_ms(1000);
                +
000364 e4ee     +LDI R30 , LOW ( _0x44 + ( 72 ) )
000365 e0f5     +LDI R31 , HIGH ( _0x44 + ( 72 ) )
                 	__POINTW1MN _0x44,72
000366 93fa      	ST   -Y,R31
000367 93ea      	ST   -Y,R30
000368 940e 0a15 	CALL _puts
00036a eee8      	LDI  R30,LOW(1000)
00036b e0f3      	LDI  R31,HIGH(1000)
00036c 93fa      	ST   -Y,R31
00036d 93ea      	ST   -Y,R30
00036e 940e 0bf6 	CALL _delay_ms
                 ; 0000 01A7         puts("AT+CMGD=8 \r");delay_ms(1000);
                +
000370 e5ea     +LDI R30 , LOW ( _0x44 + ( 84 ) )
000371 e0f5     +LDI R31 , HIGH ( _0x44 + ( 84 ) )
                 	__POINTW1MN _0x44,84
000372 93fa      	ST   -Y,R31
000373 93ea      	ST   -Y,R30
000374 940e 0a15 	CALL _puts
000376 eee8      	LDI  R30,LOW(1000)
000377 e0f3      	LDI  R31,HIGH(1000)
000378 93fa      	ST   -Y,R31
000379 93ea      	ST   -Y,R30
00037a 940e 0bf6 	CALL _delay_ms
                 ; 0000 01A8         puts("AT+CMGD=9 \r");delay_ms(1000);
                +
00037c e6e6     +LDI R30 , LOW ( _0x44 + ( 96 ) )
00037d e0f5     +LDI R31 , HIGH ( _0x44 + ( 96 ) )
                 	__POINTW1MN _0x44,96
00037e 93fa      	ST   -Y,R31
00037f 93ea      	ST   -Y,R30
000380 940e 0a15 	CALL _puts
000382 eee8      	LDI  R30,LOW(1000)
000383 e0f3      	LDI  R31,HIGH(1000)
000384 93fa      	ST   -Y,R31
000385 93ea      	ST   -Y,R30
000386 940e 0bf6 	CALL _delay_ms
                 ; 0000 01A9         puts("AT+CMGD=10 \r");delay_ms(1000);
                +
000388 e7e2     +LDI R30 , LOW ( _0x44 + ( 108 ) )
000389 e0f5     +LDI R31 , HIGH ( _0x44 + ( 108 ) )
                 	__POINTW1MN _0x44,108
00038a 93fa      	ST   -Y,R31
00038b 93ea      	ST   -Y,R30
00038c 940e 0a15 	CALL _puts
00038e eee8      	LDI  R30,LOW(1000)
00038f e0f3      	LDI  R31,HIGH(1000)
000390 93fa      	ST   -Y,R31
000391 93ea      	ST   -Y,R30
000392 940e 0bf6 	CALL _delay_ms
                 ; 0000 01AA         puts("AT+CMGD=11 \r");delay_ms(1000);
                +
000394 e7ef     +LDI R30 , LOW ( _0x44 + ( 121 ) )
000395 e0f5     +LDI R31 , HIGH ( _0x44 + ( 121 ) )
                 	__POINTW1MN _0x44,121
000396 93fa      	ST   -Y,R31
000397 93ea      	ST   -Y,R30
000398 940e 0a15 	CALL _puts
00039a eee8      	LDI  R30,LOW(1000)
00039b e0f3      	LDI  R31,HIGH(1000)
00039c 93fa      	ST   -Y,R31
00039d 93ea      	ST   -Y,R30
00039e 940e 0bf6 	CALL _delay_ms
                 ; 0000 01AB         puts("AT+CMGD=12 \r");delay_ms(1000);
                +
0003a0 e8ec     +LDI R30 , LOW ( _0x44 + ( 134 ) )
0003a1 e0f5     +LDI R31 , HIGH ( _0x44 + ( 134 ) )
                 	__POINTW1MN _0x44,134
0003a2 93fa      	ST   -Y,R31
0003a3 93ea      	ST   -Y,R30
0003a4 940e 0a15 	CALL _puts
0003a6 eee8      	LDI  R30,LOW(1000)
0003a7 e0f3      	LDI  R31,HIGH(1000)
0003a8 93fa      	ST   -Y,R31
0003a9 93ea      	ST   -Y,R30
0003aa 940e 0bf6 	CALL _delay_ms
                 ; 0000 01AC         puts("AT+CMGD=1 \r");delay_ms(1000);
                +
0003ac e9e9     +LDI R30 , LOW ( _0x44 + ( 147 ) )
0003ad e0f5     +LDI R31 , HIGH ( _0x44 + ( 147 ) )
                 	__POINTW1MN _0x44,147
0003ae 93fa      	ST   -Y,R31
0003af 93ea      	ST   -Y,R30
0003b0 940e 0a15 	CALL _puts
0003b2 eee8      	LDI  R30,LOW(1000)
0003b3 e0f3      	LDI  R31,HIGH(1000)
                 _0x20A0006:
0003b4 93fa      	ST   -Y,R31
0003b5 93ea      	ST   -Y,R30
0003b6 940e 0bf6 	CALL _delay_ms
                 ; 0000 01AD }
0003b8 9508      	RET
                 
                 	.DSEG
                 _0x44:
000506           	.BYTE 0x9F
                 ;//////////////////////////////////////////////////////
                 ;void gpspwr()
                 ; 0000 01B0 {
                 
                 	.CSEG
                 _gpspwr:
                 ; 0000 01B1         unsigned char ch1,ch2,flag;
                 ; 0000 01B2         while (rx_counter0>0)    getchar();
0003b9 940e 0c31 	CALL __SAVELOCR4
                 ;	ch1 -> R17
                 ;	ch2 -> R16
                 ;	flag -> R19
                 _0x45:
0003bb e0e0      	LDI  R30,LOW(0)
0003bc 15ed      	CP   R30,R13
0003bd f410      	BRSH _0x47
0003be ddfb      	RCALL _getchar
0003bf cffb      	RJMP _0x45
                 _0x47:
                 ; 0000 01B4 delay_ms(100);
0003c0 e6e4      	LDI  R30,LOW(100)
0003c1 e0f0      	LDI  R31,HIGH(100)
0003c2 93fa      	ST   -Y,R31
0003c3 93ea      	ST   -Y,R30
0003c4 940e 0bf6 	CALL _delay_ms
                 ; 0000 01B5         putchar ('A');
0003c6 e4e1      	LDI  R30,LOW(65)
0003c7 93ea      	ST   -Y,R30
0003c8 de26      	RCALL _putchar
                 ; 0000 01B6         putchar ('T');
0003c9 e5e4      	LDI  R30,LOW(84)
0003ca 93ea      	ST   -Y,R30
0003cb de23      	RCALL _putchar
                 ; 0000 01B7         putchar ('+');
0003cc e2eb      	LDI  R30,LOW(43)
0003cd 93ea      	ST   -Y,R30
0003ce de20      	RCALL _putchar
                 ; 0000 01B8         putchar ('C');
0003cf e4e3      	LDI  R30,LOW(67)
0003d0 93ea      	ST   -Y,R30
0003d1 de1d      	RCALL _putchar
                 ; 0000 01B9         putchar ('M');
0003d2 e4ed      	LDI  R30,LOW(77)
0003d3 93ea      	ST   -Y,R30
0003d4 de1a      	RCALL _putchar
                 ; 0000 01BA         putchar ('G');
0003d5 e4e7      	LDI  R30,LOW(71)
0003d6 93ea      	ST   -Y,R30
0003d7 de17      	RCALL _putchar
                 ; 0000 01BB         putchar ('F');
0003d8 e4e6      	LDI  R30,LOW(70)
0003d9 93ea      	ST   -Y,R30
0003da de14      	RCALL _putchar
                 ; 0000 01BC         putchar ('=');
0003db e3ed      	LDI  R30,LOW(61)
0003dc 93ea      	ST   -Y,R30
0003dd de11      	RCALL _putchar
                 ; 0000 01BD         putchar ('1');
0003de e3e1      	LDI  R30,LOW(49)
0003df 93ea      	ST   -Y,R30
0003e0 de0e      	RCALL _putchar
                 ; 0000 01BE         delay_ms(10);
0003e1 e0ea      	LDI  R30,LOW(10)
0003e2 e0f0      	LDI  R31,HIGH(10)
0003e3 93fa      	ST   -Y,R31
0003e4 93ea      	ST   -Y,R30
0003e5 940e 0bf6 	CALL _delay_ms
                 ; 0000 01BF         putchar (13);
0003e7 e0ed      	LDI  R30,LOW(13)
0003e8 93ea      	ST   -Y,R30
0003e9 de05      	RCALL _putchar
                 ; 0000 01C0         putchar (10);
0003ea e0ea      	LDI  R30,LOW(10)
0003eb 93ea      	ST   -Y,R30
0003ec de02      	RCALL _putchar
                 ; 0000 01C1         delay_ms(100);
0003ed e6e4      	LDI  R30,LOW(100)
0003ee e0f0      	LDI  R31,HIGH(100)
0003ef 93fa      	ST   -Y,R31
0003f0 93ea      	ST   -Y,R30
0003f1 940e 0bf6 	CALL _delay_ms
                 ; 0000 01C2         while (rx_counter0>0)
                 _0x48:
0003f3 e0e0      	LDI  R30,LOW(0)
0003f4 15ed      	CP   R30,R13
0003f5 f458      	BRSH _0x4A
                 ; 0000 01C3         {
                 ; 0000 01C4             ch1=ch2;
0003f6 2f10      	MOV  R17,R16
                 ; 0000 01C5             ch2=getchar();
0003f7 ddc2      	RCALL _getchar
0003f8 2f0e      	MOV  R16,R30
                 ; 0000 01C6             if ((ch1=='O') && (ch2=='K'))    {flag=0;break;}
0003f9 341f      	CPI  R17,79
0003fa f411      	BRNE _0x4C
0003fb 340b      	CPI  R16,75
0003fc f009      	BREQ _0x4D
                 _0x4C:
0003fd c002      	RJMP _0x4B
                 _0x4D:
0003fe e030      	LDI  R19,LOW(0)
0003ff c001      	RJMP _0x4A
                 ; 0000 01C7         }
                 _0x4B:
000400 cff2      	RJMP _0x48
                 _0x4A:
                 ; 0000 01C8         while (rx_counter0>0)    getchar();
                 _0x4E:
000401 e0e0      	LDI  R30,LOW(0)
000402 15ed      	CP   R30,R13
000403 f410      	BRSH _0x50
000404 ddb5      	RCALL _getchar
000405 cffb      	RJMP _0x4E
                 _0x50:
                 ; 0000 01C9 delay_ms(100);
000406 e6e4      	LDI  R30,LOW(100)
000407 e0f0      	LDI  R31,HIGH(100)
000408 93fa      	ST   -Y,R31
000409 93ea      	ST   -Y,R30
00040a 940e 0bf6 	CALL _delay_ms
                 ; 0000 01CA         putchar('A');
00040c e4e1      	LDI  R30,LOW(65)
00040d 93ea      	ST   -Y,R30
00040e dde0      	RCALL _putchar
                 ; 0000 01CB         delay_ms(10);
00040f e0ea      	LDI  R30,LOW(10)
000410 e0f0      	LDI  R31,HIGH(10)
000411 93fa      	ST   -Y,R31
000412 93ea      	ST   -Y,R30
000413 940e 0bf6 	CALL _delay_ms
                 ; 0000 01CC         putchar ('T');
000415 e5e4      	LDI  R30,LOW(84)
000416 93ea      	ST   -Y,R30
000417 ddd7      	RCALL _putchar
                 ; 0000 01CD         delay_ms(10);
000418 e0ea      	LDI  R30,LOW(10)
000419 e0f0      	LDI  R31,HIGH(10)
00041a 93fa      	ST   -Y,R31
00041b 93ea      	ST   -Y,R30
00041c 940e 0bf6 	CALL _delay_ms
                 ; 0000 01CE         putchar (13);
00041e e0ed      	LDI  R30,LOW(13)
00041f 93ea      	ST   -Y,R30
000420 ddce      	RCALL _putchar
                 ; 0000 01CF         putchar (10);
000421 e0ea      	LDI  R30,LOW(10)
000422 93ea      	ST   -Y,R30
000423 ddcb      	RCALL _putchar
                 ; 0000 01D0         delay_ms(80);
000424 e5e0      	LDI  R30,LOW(80)
000425 e0f0      	LDI  R31,HIGH(80)
000426 93fa      	ST   -Y,R31
000427 93ea      	ST   -Y,R30
000428 940e 0bf6 	CALL _delay_ms
                 ; 0000 01D1         putchar (13);
00042a e0ed      	LDI  R30,LOW(13)
00042b 93ea      	ST   -Y,R30
00042c ddc2      	RCALL _putchar
                 ; 0000 01D2         putchar (10);
00042d e0ea      	LDI  R30,LOW(10)
00042e 93ea      	ST   -Y,R30
00042f ddbf      	RCALL _putchar
                 ; 0000 01D3         delay_ms(20);
000430 e1e4      	LDI  R30,LOW(20)
000431 e0f0      	LDI  R31,HIGH(20)
000432 93fa      	ST   -Y,R31
000433 93ea      	ST   -Y,R30
000434 940e 0bf6 	CALL _delay_ms
                 ; 0000 01D4 ////////////////////////////////////////////////////
                 ; 0000 01D5         putchar ('A');
000436 e4e1      	LDI  R30,LOW(65)
000437 93ea      	ST   -Y,R30
000438 ddb6      	RCALL _putchar
                 ; 0000 01D6         putchar ('T');
000439 e5e4      	LDI  R30,LOW(84)
00043a 93ea      	ST   -Y,R30
00043b ddb3      	RCALL _putchar
                 ; 0000 01D7         putchar ('+');
00043c e2eb      	LDI  R30,LOW(43)
00043d 93ea      	ST   -Y,R30
00043e ddb0      	RCALL _putchar
                 ; 0000 01D8         putchar ('C');
00043f e4e3      	LDI  R30,LOW(67)
000440 93ea      	ST   -Y,R30
000441 ddad      	RCALL _putchar
                 ; 0000 01D9         putchar ('G');
000442 e4e7      	LDI  R30,LOW(71)
000443 93ea      	ST   -Y,R30
000444 ddaa      	RCALL _putchar
                 ; 0000 01DA         putchar ('P');
000445 e5e0      	LDI  R30,LOW(80)
000446 93ea      	ST   -Y,R30
000447 dda7      	RCALL _putchar
                 ; 0000 01DB         putchar ('S');
000448 e5e3      	LDI  R30,LOW(83)
000449 93ea      	ST   -Y,R30
00044a dda4      	RCALL _putchar
                 ; 0000 01DC         putchar ('P');
00044b e5e0      	LDI  R30,LOW(80)
00044c 93ea      	ST   -Y,R30
00044d dda1      	RCALL _putchar
                 ; 0000 01DD         putchar ('W');
00044e e5e7      	LDI  R30,LOW(87)
00044f 93ea      	ST   -Y,R30
000450 dd9e      	RCALL _putchar
                 ; 0000 01DE         putchar ('R');
000451 e5e2      	LDI  R30,LOW(82)
000452 93ea      	ST   -Y,R30
000453 dd9b      	RCALL _putchar
                 ; 0000 01DF         putchar ('=');
000454 e3ed      	LDI  R30,LOW(61)
000455 93ea      	ST   -Y,R30
000456 dd98      	RCALL _putchar
                 ; 0000 01E0         putchar ('1');
000457 e3e1      	LDI  R30,LOW(49)
000458 93ea      	ST   -Y,R30
000459 dd95      	RCALL _putchar
                 ; 0000 01E1         delay_ms(10);
00045a e0ea      	LDI  R30,LOW(10)
00045b e0f0      	LDI  R31,HIGH(10)
00045c 93fa      	ST   -Y,R31
00045d 93ea      	ST   -Y,R30
00045e 940e 0bf6 	CALL _delay_ms
                 ; 0000 01E2         putchar (13);
000460 e0ed      	LDI  R30,LOW(13)
000461 93ea      	ST   -Y,R30
000462 dd8c      	RCALL _putchar
                 ; 0000 01E3         putchar (10);
000463 e0ea      	LDI  R30,LOW(10)
000464 93ea      	ST   -Y,R30
000465 dd89      	RCALL _putchar
                 ; 0000 01E4         delay_ms(80);
000466 e5e0      	LDI  R30,LOW(80)
000467 e0f0      	LDI  R31,HIGH(80)
000468 93fa      	ST   -Y,R31
000469 93ea      	ST   -Y,R30
00046a 940e 0bf6 	CALL _delay_ms
                 ; 0000 01E5         delay_ms(1900);
00046c e6ec      	LDI  R30,LOW(1900)
00046d e0f7      	LDI  R31,HIGH(1900)
00046e 93fa      	ST   -Y,R31
00046f 93ea      	ST   -Y,R30
000470 940e 0bf6 	CALL _delay_ms
                 ; 0000 01E6 ///////////////////////////////////////////////////////
                 ; 0000 01E7         putchar ('A');
000472 e4e1      	LDI  R30,LOW(65)
000473 93ea      	ST   -Y,R30
000474 dd7a      	RCALL _putchar
                 ; 0000 01E8         putchar ('T');
000475 e5e4      	LDI  R30,LOW(84)
000476 93ea      	ST   -Y,R30
000477 dd77      	RCALL _putchar
                 ; 0000 01E9         putchar ('+');
000478 e2eb      	LDI  R30,LOW(43)
000479 93ea      	ST   -Y,R30
00047a dd74      	RCALL _putchar
                 ; 0000 01EA         putchar ('C');
00047b e4e3      	LDI  R30,LOW(67)
00047c 93ea      	ST   -Y,R30
00047d dd71      	RCALL _putchar
                 ; 0000 01EB         putchar ('G');
00047e e4e7      	LDI  R30,LOW(71)
00047f 93ea      	ST   -Y,R30
000480 dd6e      	RCALL _putchar
                 ; 0000 01EC         putchar ('P');
000481 e5e0      	LDI  R30,LOW(80)
000482 93ea      	ST   -Y,R30
000483 dd6b      	RCALL _putchar
                 ; 0000 01ED         putchar ('S');
000484 e5e3      	LDI  R30,LOW(83)
000485 93ea      	ST   -Y,R30
000486 dd68      	RCALL _putchar
                 ; 0000 01EE         putchar ('R');
000487 e5e2      	LDI  R30,LOW(82)
000488 93ea      	ST   -Y,R30
000489 dd65      	RCALL _putchar
                 ; 0000 01EF         putchar ('S');
00048a e5e3      	LDI  R30,LOW(83)
00048b 93ea      	ST   -Y,R30
00048c dd62      	RCALL _putchar
                 ; 0000 01F0         putchar ('T');
00048d e5e4      	LDI  R30,LOW(84)
00048e 93ea      	ST   -Y,R30
00048f dd5f      	RCALL _putchar
                 ; 0000 01F1         putchar ('=');
000490 e3ed      	LDI  R30,LOW(61)
000491 93ea      	ST   -Y,R30
000492 dd5c      	RCALL _putchar
                 ; 0000 01F2         putchar ('1');
000493 e3e1      	LDI  R30,LOW(49)
000494 93ea      	ST   -Y,R30
000495 dd59      	RCALL _putchar
                 ; 0000 01F3         delay_ms(20);
000496 e1e4      	LDI  R30,LOW(20)
000497 e0f0      	LDI  R31,HIGH(20)
000498 93fa      	ST   -Y,R31
000499 93ea      	ST   -Y,R30
00049a 940e 0bf6 	CALL _delay_ms
                 ; 0000 01F4         putchar (13);
00049c e0ed      	LDI  R30,LOW(13)
00049d 93ea      	ST   -Y,R30
00049e dd50      	RCALL _putchar
                 ; 0000 01F5         putchar (10);
00049f e0ea      	LDI  R30,LOW(10)
0004a0 93ea      	ST   -Y,R30
0004a1 dd4d      	RCALL _putchar
                 ; 0000 01F6         delay_ms(280);
0004a2 e1e8      	LDI  R30,LOW(280)
0004a3 e0f1      	LDI  R31,HIGH(280)
0004a4 93fa      	ST   -Y,R31
0004a5 93ea      	ST   -Y,R30
0004a6 940e 0bf6 	CALL _delay_ms
                 ; 0000 01F7 ////////////////////////////////////////////////////////
                 ; 0000 01F8         puts("AT+CMGS=\"09384198683\" \r");
                +
0004a8 eae5     +LDI R30 , LOW ( _0x51 + ( 0 ) )
0004a9 e0f5     +LDI R31 , HIGH ( _0x51 + ( 0 ) )
                 	__POINTW1MN _0x51,0
0004aa 93fa      	ST   -Y,R31
0004ab 93ea      	ST   -Y,R30
0004ac 940e 0a15 	CALL _puts
                 ; 0000 01F9         putchar (13);
0004ae e0ed      	LDI  R30,LOW(13)
0004af 93ea      	ST   -Y,R30
0004b0 dd3e      	RCALL _putchar
                 ; 0000 01FA         putchar (10);
0004b1 e0ea      	LDI  R30,LOW(10)
0004b2 93ea      	ST   -Y,R30
0004b3 dd3b      	RCALL _putchar
                 ; 0000 01FB         delay_ms(180);
0004b4 ebe4      	LDI  R30,LOW(180)
0004b5 e0f0      	LDI  R31,HIGH(180)
0004b6 93fa      	ST   -Y,R31
0004b7 93ea      	ST   -Y,R30
0004b8 940e 0bf6 	CALL _delay_ms
                 ; 0000 01FC         printf("GSM ON");
                +
0004ba e5eb     +LDI R30 , LOW ( 2 * _0x0 + ( 175 ) )
0004bb e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 175 ) )
                 	__POINTW1FN _0x0,175
0004bc 93fa      	ST   -Y,R31
0004bd 93ea      	ST   -Y,R30
0004be e080      	LDI  R24,0
0004bf 940e 0bba 	CALL _printf
0004c1 9622      	ADIW R28,2
                 ; 0000 01FD         delay_ms(90);
0004c2 e5ea      	LDI  R30,LOW(90)
0004c3 e0f0      	LDI  R31,HIGH(90)
0004c4 93fa      	ST   -Y,R31
0004c5 93ea      	ST   -Y,R30
0004c6 940e 0bf6 	CALL _delay_ms
                 ; 0000 01FE         putchar (26);
0004c8 e1ea      	LDI  R30,LOW(26)
0004c9 93ea      	ST   -Y,R30
0004ca dd24      	RCALL _putchar
                 ; 0000 01FF         delay_ms(200);
0004cb ece8      	LDI  R30,LOW(200)
0004cc e0f0      	LDI  R31,HIGH(200)
0004cd 93fa      	ST   -Y,R31
0004ce 93ea      	ST   -Y,R30
0004cf 940e 0bf6 	CALL _delay_ms
                 ; 0000 0200 }
0004d1 c53f      	RJMP _0x20A0002
                 
                 	.DSEG
                 _0x51:
0005a5           	.BYTE 0x18
                 ;//////////////////////////////////////////////////////////////////
                 ;typedef char * CHAR;
                 ;void SendSMS(CHAR Massage)
                 ; 0000 0204 {
                 
                 	.CSEG
                 _SendSMS:
                 ; 0000 0205 
                 ; 0000 0206         puts("AT+CMGS=\"09384198683\" \r");
                 ;	*Massage -> Y+0
                +
0004d2 ebed     +LDI R30 , LOW ( _0x52 + ( 0 ) )
0004d3 e0f5     +LDI R31 , HIGH ( _0x52 + ( 0 ) )
                 	__POINTW1MN _0x52,0
0004d4 93fa      	ST   -Y,R31
0004d5 93ea      	ST   -Y,R30
0004d6 940e 0a15 	CALL _puts
                 ; 0000 0207         putchar (13);
0004d8 e0ed      	LDI  R30,LOW(13)
0004d9 93ea      	ST   -Y,R30
0004da dd14      	RCALL _putchar
                 ; 0000 0208         putchar (10);
0004db e0ea      	LDI  R30,LOW(10)
0004dc 93ea      	ST   -Y,R30
0004dd dd11      	RCALL _putchar
                 ; 0000 0209         delay_ms(180);
0004de ebe4      	LDI  R30,LOW(180)
0004df e0f0      	LDI  R31,HIGH(180)
0004e0 93fa      	ST   -Y,R31
0004e1 93ea      	ST   -Y,R30
0004e2 940e 0bf6 	CALL _delay_ms
                 ; 0000 020A         puts(Massage);
0004e4 81e8      	LD   R30,Y
0004e5 81f9      	LDD  R31,Y+1
0004e6 93fa      	ST   -Y,R31
0004e7 93ea      	ST   -Y,R30
0004e8 940e 0a15 	CALL _puts
                 ; 0000 020B         delay_ms(90);
0004ea e5ea      	LDI  R30,LOW(90)
0004eb e0f0      	LDI  R31,HIGH(90)
0004ec 93fa      	ST   -Y,R31
0004ed 93ea      	ST   -Y,R30
0004ee 940e 0bf6 	CALL _delay_ms
                 ; 0000 020C         putchar (26);
0004f0 e1ea      	LDI  R30,LOW(26)
0004f1 93ea      	ST   -Y,R30
0004f2 dcfc      	RCALL _putchar
                 ; 0000 020D         delay_ms(200);
0004f3 ece8      	LDI  R30,LOW(200)
0004f4 e0f0      	LDI  R31,HIGH(200)
0004f5 93fa      	ST   -Y,R31
0004f6 93ea      	ST   -Y,R30
0004f7 940e 0bf6 	CALL _delay_ms
                 ; 0000 020E }
                 _0x20A0005:
0004f9 9622      	ADIW R28,2
0004fa 9508      	RET
                 
                 	.DSEG
                 _0x52:
0005bd           	.BYTE 0x18
                 ;///////////////////////////////////////////////////////////////////////////////
                 ;void process_sms(void)
                 ; 0000 0211 {
                 
                 	.CSEG
                 _process_sms:
                 ; 0000 0212     int counter=0;
                 ; 0000 0213     int faildGPS = 0;
                 ; 0000 0214     unsigned char tmp [];
                 ; 0000 0215     unsigned char pos [];
                 ; 0000 0216     unsigned char ch1,ch2,ch3,ch4,ch5,ch6,ch7,ch8,catch[5];
                 ; 0000 0217     unsigned char i,temp,sms_valid=0;
                 ; 0000 0218     unsigned int data_length, index,tagpos;
                 ; 0000 0219 
                 ; 0000 021A     int lastGetTrueCode=0;
                 ; 0000 021B 
                 ; 0000 021C     data_length=sms_in_e2prom[0];
0004fb 9766      	SBIW R28,22
0004fc e089      	LDI  R24,9
0004fd e0a0      	LDI  R26,LOW(0)
0004fe e0b0      	LDI  R27,HIGH(0)
0004ff eae0      	LDI  R30,LOW(_0x53*2)
000500 e0f0      	LDI  R31,HIGH(_0x53*2)
000501 940e 0c3d 	CALL __INITLOCB
000503 940e 0c2f 	CALL __SAVELOCR6
                 ;	counter -> R16,R17
                 ;	faildGPS -> R18,R19
                 ;	tmp -> Y+28
                 ;	pos -> Y+28
                 ;	ch1 -> R21
                 ;	ch2 -> R20
                 ;	ch3 -> Y+27
                 ;	ch4 -> Y+26
                 ;	ch5 -> Y+25
                 ;	ch6 -> Y+24
                 ;	ch7 -> Y+23
                 ;	ch8 -> Y+22
                 ;	catch -> Y+17
                 ;	i -> Y+16
                 ;	temp -> Y+15
                 ;	sms_valid -> Y+14
                 ;	data_length -> Y+12
                 ;	index -> Y+10
                 ;	tagpos -> Y+8
                 ;	lastGetTrueCode -> Y+6
                +
000505 e000     +LDI R16 , LOW ( 0 )
000506 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000507 e020     +LDI R18 , LOW ( 0 )
000508 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000509 e0a0      	LDI  R26,LOW(_sms_in_e2prom)
00050a e0b0      	LDI  R27,HIGH(_sms_in_e2prom)
00050b 940e 0c12 	CALL __EEPROMRDB
00050d e0f0      	LDI  R31,0
00050e 87ec      	STD  Y+12,R30
00050f 87fd      	STD  Y+12+1,R31
                 ; 0000 021D     if (data_length>10) data_length=10;
000510 85ac      	LDD  R26,Y+12
000511 85bd      	LDD  R27,Y+12+1
000512 971b      	SBIW R26,11
000513 f020      	BRLO _0x54
000514 e0ea      	LDI  R30,LOW(10)
000515 e0f0      	LDI  R31,HIGH(10)
000516 87ec      	STD  Y+12,R30
000517 87fd      	STD  Y+12+1,R31
                 ; 0000 021E 
                 ; 0000 021F     for (i=1;i<=data_length;i++)
                 _0x54:
000518 e0e1      	LDI  R30,LOW(1)
000519 8be8      	STD  Y+16,R30
                 _0x56:
00051a 85ec      	LDD  R30,Y+12
00051b 85fd      	LDD  R31,Y+12+1
00051c 89a8      	LDD  R26,Y+16
00051d e0b0      	LDI  R27,0
00051e 17ea      	CP   R30,R26
00051f 07fb      	CPC  R31,R27
000520 f410      	BRSH PC+3
000521 940c 05cd 	JMP _0x57
                 ; 0000 0220     {
                 ; 0000 0221         ch1=ch2;
000523 2f54      	MOV  R21,R20
                 ; 0000 0222         ch2=ch3;
000524 8d4b      	LDD  R20,Y+27
                 ; 0000 0223         ch3=ch4;
000525 8dea      	LDD  R30,Y+26
000526 8feb      	STD  Y+27,R30
                 ; 0000 0224         ch4=ch5;
000527 8de9      	LDD  R30,Y+25
000528 8fea      	STD  Y+26,R30
                 ; 0000 0225         ch5=ch6;
000529 8de8      	LDD  R30,Y+24
00052a 8fe9      	STD  Y+25,R30
                 ; 0000 0226         ch6=ch7;
00052b 89ef      	LDD  R30,Y+23
00052c 8fe8      	STD  Y+24,R30
                 ; 0000 0227         ch7=ch8;
00052d 89ee      	LDD  R30,Y+22
00052e 8bef      	STD  Y+23,R30
                 ; 0000 0228         ch8=sms_in_e2prom[i];
00052f 89a8      	LDD  R26,Y+16
000530 e0b0      	LDI  R27,0
000531 50a0      	SUBI R26,LOW(-_sms_in_e2prom)
000532 40b0      	SBCI R27,HIGH(-_sms_in_e2prom)
000533 940e 0c12 	CALL __EEPROMRDB
000535 8bee      	STD  Y+22,R30
                 ; 0000 0229         if ((ch8>='a')&&(ch8<='z')) ch8-=32;
000536 89ae      	LDD  R26,Y+22
000537 36a1      	CPI  R26,LOW(0x61)
000538 f010      	BRLO _0x59
000539 37ab      	CPI  R26,LOW(0x7B)
00053a f008      	BRLO _0x5A
                 _0x59:
00053b c004      	RJMP _0x58
                 _0x5A:
00053c 89ee      	LDD  R30,Y+22
00053d e0f0      	LDI  R31,0
00053e 97b0      	SBIW R30,32
00053f 8bee      	STD  Y+22,R30
                 ; 0000 022A 
                 ; 0000 022B         if ((ch1=='P') && (ch2=='1') && (ch3=='3') && (ch4=='9') && (ch5=='1'))    {sms_valid=1;break;}
                 _0x58:
000540 3550      	CPI  R21,80
000541 f459      	BRNE _0x5C
000542 3341      	CPI  R20,49
000543 f449      	BRNE _0x5C
000544 8dab      	LDD  R26,Y+27
000545 33a3      	CPI  R26,LOW(0x33)
000546 f431      	BRNE _0x5C
000547 8daa      	LDD  R26,Y+26
000548 33a9      	CPI  R26,LOW(0x39)
000549 f419      	BRNE _0x5C
00054a 8da9      	LDD  R26,Y+25
00054b 33a1      	CPI  R26,LOW(0x31)
00054c f009      	BREQ _0x5D
                 _0x5C:
00054d c003      	RJMP _0x5B
                 _0x5D:
00054e e0e1      	LDI  R30,LOW(1)
00054f 87ee      	STD  Y+14,R30
000550 c07c      	RJMP _0x57
                 ; 0000 022C         if ((ch4=='A') && (ch5=='L') && (ch6=='A') && (ch7=='R') && (ch8=='M'))    {sms_valid=2;break;}
                 _0x5B:
000551 8daa      	LDD  R26,Y+26
000552 34a1      	CPI  R26,LOW(0x41)
000553 f461      	BRNE _0x5F
000554 8da9      	LDD  R26,Y+25
000555 34ac      	CPI  R26,LOW(0x4C)
000556 f449      	BRNE _0x5F
000557 8da8      	LDD  R26,Y+24
000558 34a1      	CPI  R26,LOW(0x41)
000559 f431      	BRNE _0x5F
00055a 89af      	LDD  R26,Y+23
00055b 35a2      	CPI  R26,LOW(0x52)
00055c f419      	BRNE _0x5F
00055d 89ae      	LDD  R26,Y+22
00055e 34ad      	CPI  R26,LOW(0x4D)
00055f f009      	BREQ _0x60
                 _0x5F:
000560 c003      	RJMP _0x5E
                 _0x60:
000561 e0e2      	LDI  R30,LOW(2)
000562 87ee      	STD  Y+14,R30
000563 c069      	RJMP _0x57
                 ; 0000 022D         if ((ch3=='S') && (ch4=='I') && (ch5=='L') && (ch6=='E') && (ch7=='N') && (ch8=='T'))    {sms_valid=3;break;}
                 _0x5E:
000564 8dab      	LDD  R26,Y+27
000565 35a3      	CPI  R26,LOW(0x53)
000566 f479      	BRNE _0x62
000567 8daa      	LDD  R26,Y+26
000568 34a9      	CPI  R26,LOW(0x49)
000569 f461      	BRNE _0x62
00056a 8da9      	LDD  R26,Y+25
00056b 34ac      	CPI  R26,LOW(0x4C)
00056c f449      	BRNE _0x62
00056d 8da8      	LDD  R26,Y+24
00056e 34a5      	CPI  R26,LOW(0x45)
00056f f431      	BRNE _0x62
000570 89af      	LDD  R26,Y+23
000571 34ae      	CPI  R26,LOW(0x4E)
000572 f419      	BRNE _0x62
000573 89ae      	LDD  R26,Y+22
000574 35a4      	CPI  R26,LOW(0x54)
000575 f009      	BREQ _0x63
                 _0x62:
000576 c003      	RJMP _0x61
                 _0x63:
000577 e0e3      	LDI  R30,LOW(3)
000578 87ee      	STD  Y+14,R30
000579 c053      	RJMP _0x57
                 ; 0000 022E         if ((ch5=='S') && (ch6=='T') && (ch7=='O') && (ch8=='P'))    {sms_valid=4;break;}
                 _0x61:
00057a 8da9      	LDD  R26,Y+25
00057b 35a3      	CPI  R26,LOW(0x53)
00057c f449      	BRNE _0x65
00057d 8da8      	LDD  R26,Y+24
00057e 35a4      	CPI  R26,LOW(0x54)
00057f f431      	BRNE _0x65
000580 89af      	LDD  R26,Y+23
000581 34af      	CPI  R26,LOW(0x4F)
000582 f419      	BRNE _0x65
000583 89ae      	LDD  R26,Y+22
000584 35a0      	CPI  R26,LOW(0x50)
000585 f009      	BREQ _0x66
                 _0x65:
000586 c003      	RJMP _0x64
                 _0x66:
000587 e0e4      	LDI  R30,LOW(4)
000588 87ee      	STD  Y+14,R30
000589 c043      	RJMP _0x57
                 ; 0000 022F         if ((ch4=='S') && (ch5=='E') && (ch6=='C') && (ch7=='O') && (ch8=='N'))    {sms_valid=5;break;}
                 _0x64:
00058a 8daa      	LDD  R26,Y+26
00058b 35a3      	CPI  R26,LOW(0x53)
00058c f461      	BRNE _0x68
00058d 8da9      	LDD  R26,Y+25
00058e 34a5      	CPI  R26,LOW(0x45)
00058f f449      	BRNE _0x68
000590 8da8      	LDD  R26,Y+24
000591 34a3      	CPI  R26,LOW(0x43)
000592 f431      	BRNE _0x68
000593 89af      	LDD  R26,Y+23
000594 34af      	CPI  R26,LOW(0x4F)
000595 f419      	BRNE _0x68
000596 89ae      	LDD  R26,Y+22
000597 34ae      	CPI  R26,LOW(0x4E)
000598 f009      	BREQ _0x69
                 _0x68:
000599 c003      	RJMP _0x67
                 _0x69:
00059a e0e5      	LDI  R30,LOW(5)
00059b 87ee      	STD  Y+14,R30
00059c c030      	RJMP _0x57
                 ; 0000 0230         if ((ch3=='S') && (ch4=='E') && (ch5=='C') && (ch6=='O') && (ch7=='F') && (ch8=='F'))    {sms_valid=6;break;}
                 _0x67:
00059d 8dab      	LDD  R26,Y+27
00059e 35a3      	CPI  R26,LOW(0x53)
00059f f479      	BRNE _0x6B
0005a0 8daa      	LDD  R26,Y+26
0005a1 34a5      	CPI  R26,LOW(0x45)
0005a2 f461      	BRNE _0x6B
0005a3 8da9      	LDD  R26,Y+25
0005a4 34a3      	CPI  R26,LOW(0x43)
0005a5 f449      	BRNE _0x6B
0005a6 8da8      	LDD  R26,Y+24
0005a7 34af      	CPI  R26,LOW(0x4F)
0005a8 f431      	BRNE _0x6B
0005a9 89af      	LDD  R26,Y+23
0005aa 34a6      	CPI  R26,LOW(0x46)
0005ab f419      	BRNE _0x6B
0005ac 89ae      	LDD  R26,Y+22
0005ad 34a6      	CPI  R26,LOW(0x46)
0005ae f009      	BREQ _0x6C
                 _0x6B:
0005af c003      	RJMP _0x6A
                 _0x6C:
0005b0 e0e6      	LDI  R30,LOW(6)
0005b1 87ee      	STD  Y+14,R30
0005b2 c01a      	RJMP _0x57
                 ; 0000 0231         if ((ch3=='G') && (ch4=='E') && (ch5=='T') && (ch6=='A') && (ch7=='N') && (ch8=='T'))    {sms_valid=7;break;}
                 _0x6A:
0005b3 8dab      	LDD  R26,Y+27
0005b4 34a7      	CPI  R26,LOW(0x47)
0005b5 f479      	BRNE _0x6E
0005b6 8daa      	LDD  R26,Y+26
0005b7 34a5      	CPI  R26,LOW(0x45)
0005b8 f461      	BRNE _0x6E
0005b9 8da9      	LDD  R26,Y+25
0005ba 35a4      	CPI  R26,LOW(0x54)
0005bb f449      	BRNE _0x6E
0005bc 8da8      	LDD  R26,Y+24
0005bd 34a1      	CPI  R26,LOW(0x41)
0005be f431      	BRNE _0x6E
0005bf 89af      	LDD  R26,Y+23
0005c0 34ae      	CPI  R26,LOW(0x4E)
0005c1 f419      	BRNE _0x6E
0005c2 89ae      	LDD  R26,Y+22
0005c3 35a4      	CPI  R26,LOW(0x54)
0005c4 f009      	BREQ _0x6F
                 _0x6E:
0005c5 c003      	RJMP _0x6D
                 _0x6F:
0005c6 e0e7      	LDI  R30,LOW(7)
0005c7 87ee      	STD  Y+14,R30
0005c8 c004      	RJMP _0x57
                 ; 0000 0232     }
                 _0x6D:
0005c9 89e8      	LDD  R30,Y+16
0005ca 5fef      	SUBI R30,-LOW(1)
0005cb 8be8      	STD  Y+16,R30
0005cc cf4d      	RJMP _0x56
                 _0x57:
                 ; 0000 0233 
                 ; 0000 0234     if (!sms_valid)
0005cd 85ee      	LDD  R30,Y+14
0005ce 30e0      	CPI  R30,0
0005cf f469      	BRNE _0x70
                 ; 0000 0235     {
                 ; 0000 0236         CLSSMS();
0005d0 dd45      	RCALL _CLSSMS
                 ; 0000 0237         delay_ms(1000);
0005d1 eee8      	LDI  R30,LOW(1000)
0005d2 e0f3      	LDI  R31,HIGH(1000)
0005d3 93fa      	ST   -Y,R31
0005d4 93ea      	ST   -Y,R30
0005d5 940e 0bf6 	CALL _delay_ms
                 ; 0000 0238         SendSMS("invalid command!");
                +
0005d7 ede5     +LDI R30 , LOW ( _0x71 + ( 0 ) )
0005d8 e0f5     +LDI R31 , HIGH ( _0x71 + ( 0 ) )
                 	__POINTW1MN _0x71,0
0005d9 93fa      	ST   -Y,R31
0005da 93ea      	ST   -Y,R30
0005db def6      	RCALL _SendSMS
                 ; 0000 0239         return;
0005dc c1e7      	RJMP _0x20A0004
                 ; 0000 023A     }
                 ; 0000 023B 
                 ; 0000 023C 
                 ; 0000 023D     switch (sms_valid)
                 _0x70:
0005dd 85ee      	LDD  R30,Y+14
0005de e0f0      	LDI  R31,0
                 ; 0000 023E     {
                 ; 0000 023F         case 1:
0005df 30e1      	CPI  R30,LOW(0x1)
0005e0 e0a0      	LDI  R26,HIGH(0x1)
0005e1 07fa      	CPC  R31,R26
0005e2 f011      	BREQ PC+3
0005e3 940c 0692 	JMP _0x75
                 ; 0000 0240         counter = 0;
                +
0005e5 e000     +LDI R16 , LOW ( 0 )
0005e6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0241         faildGPS = 0;
                +
0005e7 e020     +LDI R18 , LOW ( 0 )
0005e8 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 0242         index  = -1;
0005e9 efef      	LDI  R30,LOW(65535)
0005ea efff      	LDI  R31,HIGH(65535)
0005eb 87ea      	STD  Y+10,R30
0005ec 87fb      	STD  Y+10+1,R31
                 ; 0000 0243         tagpos = 0;
0005ed e0e0      	LDI  R30,LOW(0)
0005ee 87e8      	STD  Y+8,R30
0005ef 87e9      	STD  Y+8+1,R30
                 ; 0000 0244         lastGetTrueCode=0;
0005f0 83ee      	STD  Y+6,R30
0005f1 83ef      	STD  Y+6+1,R30
                 ; 0000 0245         delay_ms(1000);
0005f2 eee8      	LDI  R30,LOW(1000)
0005f3 e0f3      	LDI  R31,HIGH(1000)
0005f4 93fa      	ST   -Y,R31
0005f5 93ea      	ST   -Y,R30
0005f6 940e 0bf6 	CALL _delay_ms
                 ; 0000 0246 
                 ; 0000 0247         while (rx_counter1>0) getchar1();
                 _0x76:
0005f8 91a0 07b0 	LDS  R26,_rx_counter1
0005fa 30a1      	CPI  R26,LOW(0x1)
0005fb f010      	BRLO _0x78
0005fc dc46      	RCALL _getchar1
0005fd cffa      	RJMP _0x76
                 _0x78:
                 ; 0000 024B while (1)
                 _0x79:
                 ; 0000 024C         {
                 ; 0000 024D             ch1=getchar1();
0005fe dc44      	RCALL _getchar1
0005ff 2f5e      	MOV  R21,R30
                 ; 0000 024E 
                 ; 0000 024F             switch( lastGetTrueCode )
000600 81ee      	LDD  R30,Y+6
000601 81ff      	LDD  R31,Y+6+1
                 ; 0000 0250             {
                 ; 0000 0251                 case 0:
000602 9730      	SBIW R30,0
000603 f439      	BRNE _0x7F
                 ; 0000 0252                     if( ch1 == 'A' )
000604 3451      	CPI  R21,65
000605 f421      	BRNE _0x80
                 ; 0000 0253                         lastGetTrueCode = 1;
000606 e0e1      	LDI  R30,LOW(1)
000607 e0f0      	LDI  R31,HIGH(1)
000608 83ee      	STD  Y+6,R30
000609 83ff      	STD  Y+6+1,R31
                 ; 0000 0254                 break;
                 _0x80:
00060a c038      	RJMP _0x7E
                 ; 0000 0255                 case 1:
                 _0x7F:
00060b 30e1      	CPI  R30,LOW(0x1)
00060c e0a0      	LDI  R26,HIGH(0x1)
00060d 07fa      	CPC  R31,R26
00060e f439      	BRNE _0x81
                 ; 0000 0256                     if( ch1 == 'N' )
00060f 345e      	CPI  R21,78
000610 f421      	BRNE _0x82
                 ; 0000 0257                         lastGetTrueCode = 2;
000611 e0e2      	LDI  R30,LOW(2)
000612 e0f0      	LDI  R31,HIGH(2)
000613 83ee      	STD  Y+6,R30
000614 83ff      	STD  Y+6+1,R31
                 ; 0000 0258                 break;
                 _0x82:
000615 c02d      	RJMP _0x7E
                 ; 0000 0259                 case 2:
                 _0x81:
000616 30e2      	CPI  R30,LOW(0x2)
000617 e0a0      	LDI  R26,HIGH(0x2)
000618 07fa      	CPC  R31,R26
000619 f439      	BRNE _0x83
                 ; 0000 025A                     if( ch1 == ',' )
00061a 325c      	CPI  R21,44
00061b f421      	BRNE _0x84
                 ; 0000 025B                         lastGetTrueCode = 3;
00061c e0e3      	LDI  R30,LOW(3)
00061d e0f0      	LDI  R31,HIGH(3)
00061e 83ee      	STD  Y+6,R30
00061f 83ff      	STD  Y+6+1,R31
                 ; 0000 025C                 break;
                 _0x84:
000620 c022      	RJMP _0x7E
                 ; 0000 025D                 case 3:
                 _0x83:
000621 30e3      	CPI  R30,LOW(0x3)
000622 e0a0      	LDI  R26,HIGH(0x3)
000623 07fa      	CPC  R31,R26
000624 f439      	BRNE _0x85
                 ; 0000 025E                     if( ch1 == ',' )
000625 325c      	CPI  R21,44
000626 f421      	BRNE _0x86
                 ; 0000 025F                         lastGetTrueCode = 4;
000627 e0e4      	LDI  R30,LOW(4)
000628 e0f0      	LDI  R31,HIGH(4)
000629 83ee      	STD  Y+6,R30
00062a 83ff      	STD  Y+6+1,R31
                 ; 0000 0260                 break;
                 _0x86:
00062b c017      	RJMP _0x7E
                 ; 0000 0261                 case 4:
                 _0x85:
00062c 30e4      	CPI  R30,LOW(0x4)
00062d e0a0      	LDI  R26,HIGH(0x4)
00062e 07fa      	CPC  R31,R26
00062f f449      	BRNE _0x87
                 ; 0000 0262                     if( ch1 == 'E' || ch1 == 'W' )
000630 3455      	CPI  R21,69
000631 f011      	BREQ _0x89
000632 3557      	CPI  R21,87
000633 f421      	BRNE _0x88
                 _0x89:
                 ; 0000 0263                         lastGetTrueCode = 5;
000634 e0e5      	LDI  R30,LOW(5)
000635 e0f0      	LDI  R31,HIGH(5)
000636 83ee      	STD  Y+6,R30
000637 83ff      	STD  Y+6+1,R31
                 ; 0000 0264                 break;
                 _0x88:
000638 c00a      	RJMP _0x7E
                 ; 0000 0265                 case 5:
                 _0x87:
000639 30e5      	CPI  R30,LOW(0x5)
00063a e0a0      	LDI  R26,HIGH(0x5)
00063b 07fa      	CPC  R31,R26
00063c f431      	BRNE _0x7E
                 ; 0000 0266                     if( ch1 == ',' )
00063d 325c      	CPI  R21,44
00063e f421      	BRNE _0x8C
                 ; 0000 0267                         lastGetTrueCode = 6;
00063f e0e6      	LDI  R30,LOW(6)
000640 e0f0      	LDI  R31,HIGH(6)
000641 83ee      	STD  Y+6,R30
000642 83ff      	STD  Y+6+1,R31
                 ; 0000 0268                 break;
                 _0x8C:
                 ; 0000 0269             }
                 _0x7E:
                 ; 0000 026A 
                 ; 0000 026B             if (ch1 == '$' && tagpos )
000643 3254      	CPI  R21,36
000644 f421      	BRNE _0x8E
000645 85e8      	LDD  R30,Y+8
000646 85f9      	LDD  R31,Y+8+1
000647 9730      	SBIW R30,0
000648 f409      	BRNE _0x8F
                 _0x8E:
000649 c019      	RJMP _0x8D
                 _0x8F:
                 ; 0000 026C             {
                 ; 0000 026D                     if(GPSPosition(pos) && lastGetTrueCode == 6)
00064a 01fe      	MOVW R30,R28
00064b 967c      	ADIW R30,28
00064c 93fa      	ST   -Y,R31
00064d 93ea      	ST   -Y,R30
00064e dc47      	RCALL _GPSPosition
00064f 9730      	SBIW R30,0
000650 f021      	BREQ _0x91
000651 81ae      	LDD  R26,Y+6
000652 81bf      	LDD  R27,Y+6+1
000653 9716      	SBIW R26,6
000654 f009      	BREQ _0x92
                 _0x91:
000655 c003      	RJMP _0x90
                 _0x92:
                 ; 0000 026E                     {
                 ; 0000 026F                         faildGPS = 0;
                +
000656 e020     +LDI R18 , LOW ( 0 )
000657 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 0270                         break;
000658 c02d      	RJMP _0x7B
                 ; 0000 0271                     }
                 ; 0000 0272                     else
                 _0x90:
                 ; 0000 0273                     {
                 ; 0000 0274                         counter++;
                +
000659 5f0f     +SUBI R16 , LOW ( - 1 )
00065a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0275                         index  = 0;
00065b e0e0      	LDI  R30,LOW(0)
00065c 87ea      	STD  Y+10,R30
00065d 87eb      	STD  Y+10+1,R30
                 ; 0000 0276                         tagpos = 0;
00065e 87e8      	STD  Y+8,R30
00065f 87e9      	STD  Y+8+1,R30
                 ; 0000 0277                         lastGetTrueCode = 0;
000660 83ee      	STD  Y+6,R30
000661 83ef      	STD  Y+6+1,R30
                 ; 0000 0278                     }
                 ; 0000 0279             }
                 ; 0000 027A             else if (ch1 == '$')
000662 c014      	RJMP _0x94
                 _0x8D:
000663 3254      	CPI  R21,36
000664 f469      	BRNE _0x95
                 ; 0000 027B             {
                 ; 0000 027C                 counter++;
                +
000665 5f0f     +SUBI R16 , LOW ( - 1 )
000666 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 027D                 tagpos++;
000667 85e8      	LDD  R30,Y+8
000668 85f9      	LDD  R31,Y+8+1
000669 9631      	ADIW R30,1
00066a 87e8      	STD  Y+8,R30
00066b 87f9      	STD  Y+8+1,R31
                 ; 0000 027E                 index = 0;
00066c e0e0      	LDI  R30,LOW(0)
00066d 87ea      	STD  Y+10,R30
00066e 87eb      	STD  Y+10+1,R30
                 ; 0000 027F                 lastGetTrueCode = 0;
00066f 83ee      	STD  Y+6,R30
000670 83ef      	STD  Y+6+1,R30
                 ; 0000 0280             }
                 ; 0000 0281             else
000671 c005      	RJMP _0x96
                 _0x95:
                 ; 0000 0282                 index++;
000672 85ea      	LDD  R30,Y+10
000673 85fb      	LDD  R31,Y+10+1
000674 9631      	ADIW R30,1
000675 87ea      	STD  Y+10,R30
000676 87fb      	STD  Y+10+1,R31
                 ; 0000 0283 
                 ; 0000 0284             if( counter > 500 )
                 _0x96:
                 _0x94:
                +
000677 3f05     +CPI R16 , LOW ( 501 )
000678 e0e1     +LDI R30 , HIGH ( 501 )
000679 071e     +CPC R17 , R30
                 	__CPWRN 16,17,501
00067a f01c      	BRLT _0x97
                 ; 0000 0285             {
                 ; 0000 0286                 faildGPS = 1;
                +
00067b e021     +LDI R18 , LOW ( 1 )
00067c e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 0287                 break;
00067d c008      	RJMP _0x7B
                 ; 0000 0288             }
                 ; 0000 0289 
                 ; 0000 028A             pos[index] = ch1;
                 _0x97:
00067e 85ea      	LDD  R30,Y+10
00067f 85fb      	LDD  R31,Y+10+1
000680 01de      	MOVW R26,R28
000681 965c      	ADIW R26,28
000682 0fea      	ADD  R30,R26
000683 1ffb      	ADC  R31,R27
000684 8350      	ST   Z,R21
                 ; 0000 028B         }
000685 cf78      	RJMP _0x79
                 _0x7B:
                 ; 0000 028C 
                 ; 0000 028D             if( faildGPS )
000686 2e02      	MOV  R0,R18
000687 2a03      	OR   R0,R19
000688 f019      	BREQ _0x98
                 ; 0000 028E             {
                 ; 0000 028F                 SendSMS("data is faild !!!");
                +
000689 eee6     +LDI R30 , LOW ( _0x71 + ( 17 ) )
00068a e0f5     +LDI R31 , HIGH ( _0x71 + ( 17 ) )
                 	__POINTW1MN _0x71,17
00068b c002      	RJMP _0xF6
                 ; 0000 0290             }
                 ; 0000 0291             else
                 _0x98:
                 ; 0000 0292             {
                 ; 0000 0293                 SendSMS(pos);
00068c 01fe      	MOVW R30,R28
00068d 967c      	ADIW R30,28
                 _0xF6:
00068e 93fa      	ST   -Y,R31
00068f 93ea      	ST   -Y,R30
000690 de41      	RCALL _SendSMS
                 ; 0000 0294             }
                 ; 0000 0295 
                 ; 0000 0296 
                 ; 0000 0297             //SendSMSToNum(caller_id,pos);
                 ; 0000 0298 
                 ; 0000 0299         break;
000691 c132      	RJMP _0x74
                 ; 0000 029A         case 2:
                 _0x75:
000692 30e2      	CPI  R30,LOW(0x2)
000693 e0a0      	LDI  R26,HIGH(0x2)
000694 07fa      	CPC  R31,R26
000695 f581      	BRNE _0x9A
                 ; 0000 029B 
                 ; 0000 029C             delay_ms(2000);
000696 ede0      	LDI  R30,LOW(2000)
000697 e0f7      	LDI  R31,HIGH(2000)
000698 93fa      	ST   -Y,R31
000699 93ea      	ST   -Y,R30
00069a 940e 0bf6 	CALL _delay_ms
                 ; 0000 029D             puts("AT+CMGS=\"09384198683\" \r");
                +
00069c efe8     +LDI R30 , LOW ( _0x71 + ( 35 ) )
00069d e0f5     +LDI R31 , HIGH ( _0x71 + ( 35 ) )
                 	__POINTW1MN _0x71,35
00069e 93fa      	ST   -Y,R31
00069f 93ea      	ST   -Y,R30
0006a0 940e 0a15 	CALL _puts
                 ; 0000 029E             putchar (13);
0006a2 e0ed      	LDI  R30,LOW(13)
0006a3 93ea      	ST   -Y,R30
0006a4 db4a      	RCALL _putchar
                 ; 0000 029F             putchar (10);
0006a5 e0ea      	LDI  R30,LOW(10)
0006a6 93ea      	ST   -Y,R30
0006a7 db47      	RCALL _putchar
                 ; 0000 02A0             delay_ms(180);
0006a8 ebe4      	LDI  R30,LOW(180)
0006a9 e0f0      	LDI  R31,HIGH(180)
0006aa 93fa      	ST   -Y,R31
0006ab 93ea      	ST   -Y,R30
0006ac 940e 0bf6 	CALL _delay_ms
                 ; 0000 02A1             printf("Alarm ON");
                +
0006ae e8e5     +LDI R30 , LOW ( 2 * _0x0 + ( 217 ) )
0006af e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 217 ) )
                 	__POINTW1FN _0x0,217
0006b0 93fa      	ST   -Y,R31
0006b1 93ea      	ST   -Y,R30
0006b2 e080      	LDI  R24,0
0006b3 940e 0bba 	CALL _printf
0006b5 9622      	ADIW R28,2
                 ; 0000 02A2             delay_ms(90);
0006b6 e5ea      	LDI  R30,LOW(90)
0006b7 e0f0      	LDI  R31,HIGH(90)
0006b8 93fa      	ST   -Y,R31
0006b9 93ea      	ST   -Y,R30
0006ba 940e 0bf6 	CALL _delay_ms
                 ; 0000 02A3             putchar (26);
0006bc e1ea      	LDI  R30,LOW(26)
0006bd 93ea      	ST   -Y,R30
0006be db30      	RCALL _putchar
                 ; 0000 02A4             delay_ms(200);
0006bf ece8      	LDI  R30,LOW(200)
0006c0 e0f0      	LDI  R31,HIGH(200)
0006c1 93fa      	ST   -Y,R31
0006c2 93ea      	ST   -Y,R30
0006c3 940e 0bf6 	CALL _delay_ms
                 ; 0000 02A5 
                 ; 0000 02A6         break;
0006c5 c0fe      	RJMP _0x74
                 ; 0000 02A7         case 3:
                 _0x9A:
0006c6 30e3      	CPI  R30,LOW(0x3)
0006c7 e0a0      	LDI  R26,HIGH(0x3)
0006c8 07fa      	CPC  R31,R26
0006c9 f579      	BRNE _0x9B
                 ; 0000 02A8 
                 ; 0000 02A9             delay_ms(2000);
0006ca ede0      	LDI  R30,LOW(2000)
0006cb e0f7      	LDI  R31,HIGH(2000)
0006cc 93fa      	ST   -Y,R31
0006cd 93ea      	ST   -Y,R30
0006ce 940e 0bf6 	CALL _delay_ms
                 ; 0000 02AA             puts("AT+CMGS=\"09384198683\" \r");
                +
0006d0 e1e0     +LDI R30 , LOW ( _0x71 + ( 59 ) )
0006d1 e0f6     +LDI R31 , HIGH ( _0x71 + ( 59 ) )
                 	__POINTW1MN _0x71,59
0006d2 93fa      	ST   -Y,R31
0006d3 93ea      	ST   -Y,R30
0006d4 d340      	RCALL _puts
                 ; 0000 02AB             putchar (13);
0006d5 e0ed      	LDI  R30,LOW(13)
0006d6 93ea      	ST   -Y,R30
0006d7 db17      	RCALL _putchar
                 ; 0000 02AC             putchar (10);
0006d8 e0ea      	LDI  R30,LOW(10)
0006d9 93ea      	ST   -Y,R30
0006da db14      	RCALL _putchar
                 ; 0000 02AD             delay_ms(180);
0006db ebe4      	LDI  R30,LOW(180)
0006dc e0f0      	LDI  R31,HIGH(180)
0006dd 93fa      	ST   -Y,R31
0006de 93ea      	ST   -Y,R30
0006df 940e 0bf6 	CALL _delay_ms
                 ; 0000 02AE             printf("Silent ON");
                +
0006e1 e8ee     +LDI R30 , LOW ( 2 * _0x0 + ( 226 ) )
0006e2 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 226 ) )
                 	__POINTW1FN _0x0,226
0006e3 93fa      	ST   -Y,R31
0006e4 93ea      	ST   -Y,R30
0006e5 e080      	LDI  R24,0
0006e6 940e 0bba 	CALL _printf
0006e8 9622      	ADIW R28,2
                 ; 0000 02AF             delay_ms(90);
0006e9 e5ea      	LDI  R30,LOW(90)
0006ea e0f0      	LDI  R31,HIGH(90)
0006eb 93fa      	ST   -Y,R31
0006ec 93ea      	ST   -Y,R30
0006ed 940e 0bf6 	CALL _delay_ms
                 ; 0000 02B0             putchar (26);
0006ef e1ea      	LDI  R30,LOW(26)
0006f0 93ea      	ST   -Y,R30
0006f1 dafd      	RCALL _putchar
                 ; 0000 02B1             delay_ms(200);
0006f2 ece8      	LDI  R30,LOW(200)
0006f3 e0f0      	LDI  R31,HIGH(200)
0006f4 93fa      	ST   -Y,R31
0006f5 93ea      	ST   -Y,R30
0006f6 940e 0bf6 	CALL _delay_ms
                 ; 0000 02B2         break;
0006f8 c0cb      	RJMP _0x74
                 ; 0000 02B3         case 4:
                 _0x9B:
0006f9 30e4      	CPI  R30,LOW(0x4)
0006fa e0a0      	LDI  R26,HIGH(0x4)
0006fb 07fa      	CPC  R31,R26
0006fc f579      	BRNE _0x9C
                 ; 0000 02B4 
                 ; 0000 02B5             delay_ms(2000);
0006fd ede0      	LDI  R30,LOW(2000)
0006fe e0f7      	LDI  R31,HIGH(2000)
0006ff 93fa      	ST   -Y,R31
000700 93ea      	ST   -Y,R30
000701 940e 0bf6 	CALL _delay_ms
                 ; 0000 02B6             puts("AT+CMGS=\"09384198683\" \r");
                +
000703 e2e8     +LDI R30 , LOW ( _0x71 + ( 83 ) )
000704 e0f6     +LDI R31 , HIGH ( _0x71 + ( 83 ) )
                 	__POINTW1MN _0x71,83
000705 93fa      	ST   -Y,R31
000706 93ea      	ST   -Y,R30
000707 d30d      	RCALL _puts
                 ; 0000 02B7             putchar (13);
000708 e0ed      	LDI  R30,LOW(13)
000709 93ea      	ST   -Y,R30
00070a dae4      	RCALL _putchar
                 ; 0000 02B8             putchar (10);
00070b e0ea      	LDI  R30,LOW(10)
00070c 93ea      	ST   -Y,R30
00070d dae1      	RCALL _putchar
                 ; 0000 02B9             delay_ms(180);
00070e ebe4      	LDI  R30,LOW(180)
00070f e0f0      	LDI  R31,HIGH(180)
000710 93fa      	ST   -Y,R31
000711 93ea      	ST   -Y,R30
000712 940e 0bf6 	CALL _delay_ms
                 ; 0000 02BA             printf("Stop ON");
                +
000714 e9e8     +LDI R30 , LOW ( 2 * _0x0 + ( 236 ) )
000715 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 236 ) )
                 	__POINTW1FN _0x0,236
000716 93fa      	ST   -Y,R31
000717 93ea      	ST   -Y,R30
000718 e080      	LDI  R24,0
000719 940e 0bba 	CALL _printf
00071b 9622      	ADIW R28,2
                 ; 0000 02BB             delay_ms(90);
00071c e5ea      	LDI  R30,LOW(90)
00071d e0f0      	LDI  R31,HIGH(90)
00071e 93fa      	ST   -Y,R31
00071f 93ea      	ST   -Y,R30
000720 940e 0bf6 	CALL _delay_ms
                 ; 0000 02BC             putchar (26);
000722 e1ea      	LDI  R30,LOW(26)
000723 93ea      	ST   -Y,R30
000724 daca      	RCALL _putchar
                 ; 0000 02BD             delay_ms(200);
000725 ece8      	LDI  R30,LOW(200)
000726 e0f0      	LDI  R31,HIGH(200)
000727 93fa      	ST   -Y,R31
000728 93ea      	ST   -Y,R30
000729 940e 0bf6 	CALL _delay_ms
                 ; 0000 02BE         break;
00072b c098      	RJMP _0x74
                 ; 0000 02BF         case 5:
                 _0x9C:
00072c 30e5      	CPI  R30,LOW(0x5)
00072d e0a0      	LDI  R26,HIGH(0x5)
00072e 07fa      	CPC  R31,R26
00072f f5e9      	BRNE _0x9D
                 ; 0000 02C0 
                 ; 0000 02C1             delay_ms(2000);
000730 ede0      	LDI  R30,LOW(2000)
000731 e0f7      	LDI  R31,HIGH(2000)
000732 93fa      	ST   -Y,R31
000733 93ea      	ST   -Y,R30
000734 940e 0bf6 	CALL _delay_ms
                 ; 0000 02C2             puts("AT+CMGS=\"09384198683\" \r");
                +
000736 e4e0     +LDI R30 , LOW ( _0x71 + ( 107 ) )
000737 e0f6     +LDI R31 , HIGH ( _0x71 + ( 107 ) )
                 	__POINTW1MN _0x71,107
000738 93fa      	ST   -Y,R31
000739 93ea      	ST   -Y,R30
00073a d2da      	RCALL _puts
                 ; 0000 02C3             putchar (13);
00073b e0ed      	LDI  R30,LOW(13)
00073c 93ea      	ST   -Y,R30
00073d dab1      	RCALL _putchar
                 ; 0000 02C4             putchar (10);
00073e e0ea      	LDI  R30,LOW(10)
00073f 93ea      	ST   -Y,R30
000740 daae      	RCALL _putchar
                 ; 0000 02C5             delay_ms(180);
000741 ebe4      	LDI  R30,LOW(180)
000742 e0f0      	LDI  R31,HIGH(180)
000743 93fa      	ST   -Y,R31
000744 93ea      	ST   -Y,R30
000745 940e 0bf6 	CALL _delay_ms
                 ; 0000 02C6             if( securityMode[1] == 'N' )
000747 01f4      	MOVW R30,R8
000748 81a1      	LDD  R26,Z+1
000749 34ae      	CPI  R26,LOW(0x4E)
00074a f419      	BRNE _0x9E
                 ; 0000 02C7                 printf("SECURITY was ON");
                +
00074b eae0     +LDI R30 , LOW ( 2 * _0x0 + ( 244 ) )
00074c e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 244 ) )
                 	__POINTW1FN _0x0,244
00074d c002      	RJMP _0xF7
                 ; 0000 02C8             else
                 _0x9E:
                 ; 0000 02C9                 printf("SECURITY is ON");
                +
00074e ebe0     +LDI R30 , LOW ( 2 * _0x0 + ( 260 ) )
00074f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 260 ) )
                 	__POINTW1FN _0x0,260
                 _0xF7:
000750 93fa      	ST   -Y,R31
000751 93ea      	ST   -Y,R30
000752 e080      	LDI  R24,0
000753 940e 0bba 	CALL _printf
000755 9622      	ADIW R28,2
                 ; 0000 02CA             delay_ms(90);
000756 e5ea      	LDI  R30,LOW(90)
000757 e0f0      	LDI  R31,HIGH(90)
000758 93fa      	ST   -Y,R31
000759 93ea      	ST   -Y,R30
00075a 940e 0bf6 	CALL _delay_ms
                 ; 0000 02CB             putchar (26);
00075c e1ea      	LDI  R30,LOW(26)
00075d 93ea      	ST   -Y,R30
00075e da90      	RCALL _putchar
                 ; 0000 02CC             delay_ms(200);
00075f ece8      	LDI  R30,LOW(200)
000760 e0f0      	LDI  R31,HIGH(200)
000761 93fa      	ST   -Y,R31
000762 93ea      	ST   -Y,R30
000763 940e 0bf6 	CALL _delay_ms
                 ; 0000 02CD             securityMode[0] = 'O';
000765 01d4      	MOVW R26,R8
000766 e4ef      	LDI  R30,LOW(79)
000767 93ec      	ST   X,R30
                 ; 0000 02CE             securityMode[1] = 'N';
000768 01f4      	MOVW R30,R8
000769 9631      	ADIW R30,1
00076a e4ae      	LDI  R26,LOW(78)
00076b 83a0      	STD  Z+0,R26
                 ; 0000 02CF         break;
00076c c057      	RJMP _0x74
                 ; 0000 02D0         case 6:
                 _0x9D:
00076d 30e6      	CPI  R30,LOW(0x6)
00076e e0a0      	LDI  R26,HIGH(0x6)
00076f 07fa      	CPC  R31,R26
000770 f011      	BREQ PC+3
000771 940c 07b3 	JMP _0xA0
                 ; 0000 02D1 
                 ; 0000 02D2             delay_ms(2000);
000773 ede0      	LDI  R30,LOW(2000)
000774 e0f7      	LDI  R31,HIGH(2000)
000775 93fa      	ST   -Y,R31
000776 93ea      	ST   -Y,R30
000777 940e 0bf6 	CALL _delay_ms
                 ; 0000 02D3             puts("AT+CMGS=\"09384198683\" \r");
                +
000779 e5e8     +LDI R30 , LOW ( _0x71 + ( 131 ) )
00077a e0f6     +LDI R31 , HIGH ( _0x71 + ( 131 ) )
                 	__POINTW1MN _0x71,131
00077b 93fa      	ST   -Y,R31
00077c 93ea      	ST   -Y,R30
00077d d297      	RCALL _puts
                 ; 0000 02D4             putchar (13);
00077e e0ed      	LDI  R30,LOW(13)
00077f 93ea      	ST   -Y,R30
000780 da6e      	RCALL _putchar
                 ; 0000 02D5             putchar (10);
000781 e0ea      	LDI  R30,LOW(10)
000782 93ea      	ST   -Y,R30
000783 da6b      	RCALL _putchar
                 ; 0000 02D6             delay_ms(180);
000784 ebe4      	LDI  R30,LOW(180)
000785 e0f0      	LDI  R31,HIGH(180)
000786 93fa      	ST   -Y,R31
000787 93ea      	ST   -Y,R30
000788 940e 0bf6 	CALL _delay_ms
                 ; 0000 02D7             if( securityMode[1] == 'N' )
00078a 01f4      	MOVW R30,R8
00078b 81a1      	LDD  R26,Z+1
00078c 34ae      	CPI  R26,LOW(0x4E)
00078d f419      	BRNE _0xA1
                 ; 0000 02D8                 printf("SECURITY is OFF");
                +
00078e ebef     +LDI R30 , LOW ( 2 * _0x0 + ( 275 ) )
00078f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 275 ) )
                 	__POINTW1FN _0x0,275
000790 c002      	RJMP _0xF8
                 ; 0000 02D9             else
                 _0xA1:
                 ; 0000 02DA                 printf("SECURITY was OFF");
                +
000791 ecef     +LDI R30 , LOW ( 2 * _0x0 + ( 291 ) )
000792 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 291 ) )
                 	__POINTW1FN _0x0,291
                 _0xF8:
000793 93fa      	ST   -Y,R31
000794 93ea      	ST   -Y,R30
000795 e080      	LDI  R24,0
000796 940e 0bba 	CALL _printf
000798 9622      	ADIW R28,2
                 ; 0000 02DB             delay_ms(90);
000799 e5ea      	LDI  R30,LOW(90)
00079a e0f0      	LDI  R31,HIGH(90)
00079b 93fa      	ST   -Y,R31
00079c 93ea      	ST   -Y,R30
00079d 940e 0bf6 	CALL _delay_ms
                 ; 0000 02DC             putchar (26);
00079f e1ea      	LDI  R30,LOW(26)
0007a0 93ea      	ST   -Y,R30
0007a1 da4d      	RCALL _putchar
                 ; 0000 02DD             delay_ms(200);
0007a2 ece8      	LDI  R30,LOW(200)
0007a3 e0f0      	LDI  R31,HIGH(200)
0007a4 93fa      	ST   -Y,R31
0007a5 93ea      	ST   -Y,R30
0007a6 940e 0bf6 	CALL _delay_ms
                 ; 0000 02DE             securityMode[0] = 'O';
0007a8 01d4      	MOVW R26,R8
0007a9 e4ef      	LDI  R30,LOW(79)
0007aa 93ec      	ST   X,R30
                 ; 0000 02DF             securityMode[1] = 'F';
0007ab 01f4      	MOVW R30,R8
0007ac 9631      	ADIW R30,1
0007ad e4a6      	LDI  R26,LOW(70)
0007ae 83a0      	STD  Z+0,R26
                 ; 0000 02E0             securityMode[2] = 'F';
0007af 01f4      	MOVW R30,R8
0007b0 9632      	ADIW R30,2
0007b1 83a0      	STD  Z+0,R26
                 ; 0000 02E1         break;
0007b2 c011      	RJMP _0x74
                 ; 0000 02E2         case 7:
                 _0xA0:
0007b3 30e7      	CPI  R30,LOW(0x7)
0007b4 e0a0      	LDI  R26,HIGH(0x7)
0007b5 07fa      	CPC  R31,R26
0007b6 f441      	BRNE _0xA4
                 ; 0000 02E3             delay_ms(2000);
0007b7 ede0      	LDI  R30,LOW(2000)
0007b8 e0f7      	LDI  R31,HIGH(2000)
0007b9 93fa      	ST   -Y,R31
0007ba 93ea      	ST   -Y,R30
0007bb 940e 0bf6 	CALL _delay_ms
                 ; 0000 02E4             getAntenna();
0007bd d20f      	RCALL _getAntenna
                 ; 0000 02E5         break;
0007be c005      	RJMP _0x74
                 ; 0000 02E6         default:
                 _0xA4:
                 ; 0000 02E7             SendSMS("invalid command");
                +
0007bf e7e0     +LDI R30 , LOW ( _0x71 + ( 155 ) )
0007c0 e0f6     +LDI R31 , HIGH ( _0x71 + ( 155 ) )
                 	__POINTW1MN _0x71,155
0007c1 93fa      	ST   -Y,R31
0007c2 93ea      	ST   -Y,R30
0007c3 dd0e      	RCALL _SendSMS
                 ; 0000 02E8         break;
                 ; 0000 02E9         }
                 _0x74:
                 ; 0000 02EA 
                 ; 0000 02EB }
                 _0x20A0004:
0007c4 940e 0c36 	CALL __LOADLOCR6
0007c6 966c      	ADIW R28,28
0007c7 9508      	RET
                 
                 	.DSEG
                 _0x71:
0005d5           	.BYTE 0xAB
                 ;///////////////////////////////////////////////////////////////////////////////
                 ;void process_data(void)
                 ; 0000 02EE {
                 
                 	.CSEG
                 _process_data:
                 ; 0000 02EF     unsigned char ch1,ch2,ch3,ch4,ch5,ch6;
                 ; 0000 02F0     unsigned char i=0,memory_index,temp,sms_ready=0;
                 ; 0000 02F1     data_ready=0;
0007c8 9724      	SBIW R28,4
0007c9 e0e0      	LDI  R30,LOW(0)
0007ca 83e8      	ST   Y,R30
0007cb 83e9      	STD  Y+1,R30
0007cc 83ea      	STD  Y+2,R30
0007cd 83eb      	STD  Y+3,R30
0007ce 940e 0c2f 	CALL __SAVELOCR6
                 ;	ch1 -> R17
                 ;	ch2 -> R16
                 ;	ch3 -> R19
                 ;	ch4 -> R18
                 ;	ch5 -> R21
                 ;	ch6 -> R20
                 ;	i -> Y+9
                 ;	memory_index -> Y+8
                 ;	temp -> Y+7
                 ;	sms_ready -> Y+6
0007d0 94e8      	CLT
0007d1 f820      	BLD  R2,0
                 ; 0000 02F2     delay_ms(1000);
0007d2 eee8      	LDI  R30,LOW(1000)
0007d3 e0f3      	LDI  R31,HIGH(1000)
0007d4 93fa      	ST   -Y,R31
0007d5 93ea      	ST   -Y,R30
0007d6 940e 0bf6 	CALL _delay_ms
                 ; 0000 02F3 
                 ; 0000 02F4 
                 ; 0000 02F5     while (rx_counter0>0)
                 _0xA5:
0007d8 e0e0      	LDI  R30,LOW(0)
0007d9 15ed      	CP   R30,R13
0007da f520      	BRSH _0xA7
                 ; 0000 02F6     {
                 ; 0000 02F7         ch1=ch2;
0007db 2f10      	MOV  R17,R16
                 ; 0000 02F8         ch2=ch3;
0007dc 2f03      	MOV  R16,R19
                 ; 0000 02F9         ch3=ch4;
0007dd 2f32      	MOV  R19,R18
                 ; 0000 02FA         ch4=ch5;
0007de 2f25      	MOV  R18,R21
                 ; 0000 02FB         ch5=ch6;
0007df 2f54      	MOV  R21,R20
                 ; 0000 02FC         ch6=getchar();
0007e0 940e 01ba 	CALL _getchar
0007e2 2f4e      	MOV  R20,R30
                 ; 0000 02FD         //buzzer=1;delay_ms(50);
                 ; 0000 02FE         //buzzer=0;delay_ms(50);
                 ; 0000 02FF         if ((ch1=='+') && (ch2=='C') && (ch3=='M') && (ch4=='T') && (ch5=='I') && (ch6==':'))    {led_U=!led_U; delay_ms(100);sms_ready=1;break;}
0007e3 321b      	CPI  R17,43
0007e4 f451      	BRNE _0xA9
0007e5 3403      	CPI  R16,67
0007e6 f441      	BRNE _0xA9
0007e7 343d      	CPI  R19,77
0007e8 f431      	BRNE _0xA9
0007e9 3524      	CPI  R18,84
0007ea f421      	BRNE _0xA9
0007eb 3459      	CPI  R21,73
0007ec f411      	BRNE _0xA9
0007ed 334a      	CPI  R20,58
0007ee f009      	BREQ _0xAA
                 _0xA9:
0007ef c00e      	RJMP _0xA8
                 _0xAA:
0007f0 9bda      	SBIS 0x1B,2
0007f1 c002      	RJMP _0xAB
0007f2 98da      	CBI  0x1B,2
0007f3 c001      	RJMP _0xAC
                 _0xAB:
0007f4 9ada      	SBI  0x1B,2
                 _0xAC:
0007f5 e6e4      	LDI  R30,LOW(100)
0007f6 e0f0      	LDI  R31,HIGH(100)
0007f7 93fa      	ST   -Y,R31
0007f8 93ea      	ST   -Y,R30
0007f9 940e 0bf6 	CALL _delay_ms
0007fb e0e1      	LDI  R30,LOW(1)
0007fc 83ee      	STD  Y+6,R30
0007fd c001      	RJMP _0xA7
                 ; 0000 0300     }
                 _0xA8:
0007fe cfd9      	RJMP _0xA5
                 _0xA7:
                 ; 0000 0301     if (!sms_ready)    return;
0007ff 81ee      	LDD  R30,Y+6
000800 30e0      	CPI  R30,0
000801 f409      	BRNE _0xAD
000802 c0cc      	RJMP _0x20A0003
                 ; 0000 0302 
                 ; 0000 0303    delay_ms(1000);
                 _0xAD:
000803 eee8      	LDI  R30,LOW(1000)
000804 e0f3      	LDI  R31,HIGH(1000)
000805 93fa      	ST   -Y,R31
000806 93ea      	ST   -Y,R30
000807 940e 0bf6 	CALL _delay_ms
                 ; 0000 0304 /*
                 ; 0000 0305     while(getchar()!=',');
                 ; 0000 0306     char1=getchar();
                 ; 0000 0307     //char2=getchar();
                 ; 0000 0308     //char3=getchar();
                 ; 0000 0309 
                 ; 0000 030A         puts("AT+CMGS=\"09384198683\" \r");
                 ; 0000 030B         putchar (13);
                 ; 0000 030C         putchar (10);
                 ; 0000 030D         delay_ms(180);
                 ; 0000 030E         putchar(char1);delay_ms(50);
                 ; 0000 030F         //putchar(char2);delay_ms(50);
                 ; 0000 0310         //putchar(char3);delay_ms(50);
                 ; 0000 0311         putchar('.');delay_ms(50);
                 ; 0000 0312         delay_ms(90);
                 ; 0000 0313         putchar (26);
                 ; 0000 0314         delay_ms(200);
                 ; 0000 0315 
                 ; 0000 0316         delay_ms(15000);
                 ; 0000 0317         delay_ms(2000);
                 ; 0000 0318 
                 ; 0000 0319  */
                 ; 0000 031A     while (rx_counter0>0)    getchar();
                 _0xAE:
000809 e0e0      	LDI  R30,LOW(0)
00080a 15ed      	CP   R30,R13
00080b f418      	BRSH _0xB0
00080c 940e 01ba 	CALL _getchar
00080e cffa      	RJMP _0xAE
                 _0xB0:
                 ; 0000 031C putchar('A');
00080f e4e1      	LDI  R30,LOW(65)
000810 93ea      	ST   -Y,R30
000811 940e 01ef 	CALL _putchar
                 ; 0000 031D     putchar('T');//delay_ms(50);
000813 e5e4      	LDI  R30,LOW(84)
000814 93ea      	ST   -Y,R30
000815 940e 01ef 	CALL _putchar
                 ; 0000 031E     putchar('+');//delay_ms(50);
000817 e2eb      	LDI  R30,LOW(43)
000818 93ea      	ST   -Y,R30
000819 940e 01ef 	CALL _putchar
                 ; 0000 031F     putchar('C');//delay_ms(50);
00081b e4e3      	LDI  R30,LOW(67)
00081c 93ea      	ST   -Y,R30
00081d 940e 01ef 	CALL _putchar
                 ; 0000 0320     putchar('M');//delay_ms(50);
00081f e4ed      	LDI  R30,LOW(77)
000820 93ea      	ST   -Y,R30
000821 940e 01ef 	CALL _putchar
                 ; 0000 0321     putchar('G');//delay_ms(50);
000823 e4e7      	LDI  R30,LOW(71)
000824 93ea      	ST   -Y,R30
000825 940e 01ef 	CALL _putchar
                 ; 0000 0322     putchar('R');//delay_ms(50);
000827 e5e2      	LDI  R30,LOW(82)
000828 93ea      	ST   -Y,R30
000829 940e 01ef 	CALL _putchar
                 ; 0000 0323     putchar('=');//delay_ms(50);
00082b e3ed      	LDI  R30,LOW(61)
00082c 93ea      	ST   -Y,R30
00082d 940e 01ef 	CALL _putchar
                 ; 0000 0324     putchar('1');//delay_ms(50);
00082f e3e1      	LDI  R30,LOW(49)
000830 93ea      	ST   -Y,R30
000831 940e 01ef 	CALL _putchar
                 ; 0000 0325     putchar(13);//delay_ms(50);
000833 e0ed      	LDI  R30,LOW(13)
000834 93ea      	ST   -Y,R30
000835 940e 01ef 	CALL _putchar
                 ; 0000 0326     putchar(10);//delay_ms(50);
000837 e0ea      	LDI  R30,LOW(10)
000838 93ea      	ST   -Y,R30
000839 940e 01ef 	CALL _putchar
                 ; 0000 0327     delay_ms(6000);
00083b e7e0      	LDI  R30,LOW(6000)
00083c e1f7      	LDI  R31,HIGH(6000)
00083d 93fa      	ST   -Y,R31
00083e 93ea      	ST   -Y,R30
00083f 940e 0bf6 	CALL _delay_ms
                 ; 0000 0328 
                 ; 0000 0329     for (i=0;i<3;i++)    while(getchar()!='"');
000841 e0e0      	LDI  R30,LOW(0)
000842 87e9      	STD  Y+9,R30
                 _0xB2:
000843 85a9      	LDD  R26,Y+9
000844 30a3      	CPI  R26,LOW(0x3)
000845 f440      	BRSH _0xB3
                 _0xB4:
000846 940e 01ba 	CALL _getchar
000848 32e2      	CPI  R30,LOW(0x22)
000849 f7e1      	BRNE _0xB4
00084a 85e9      	LDD  R30,Y+9
00084b 5fef      	SUBI R30,-LOW(1)
00084c 87e9      	STD  Y+9,R30
00084d cff5      	RJMP _0xB2
                 _0xB3:
                 ; 0000 032A 
                 ; 0000 032B //    alarm=1;delay_ms(1000);alarm=0;
                 ; 0000 032C 
                 ; 0000 032D 
                 ; 0000 032E     for (i=0;i<20;i++) caller_id[i]=0;
00084e e0e0      	LDI  R30,LOW(0)
00084f 87e9      	STD  Y+9,R30
                 _0xB8:
000850 85a9      	LDD  R26,Y+9
000851 31a4      	CPI  R26,LOW(0x14)
000852 f450      	BRSH _0xB9
000853 85e9      	LDD  R30,Y+9
000854 e0f0      	LDI  R31,0
000855 54e4      	SUBI R30,LOW(-_caller_id)
000856 4ff9      	SBCI R31,HIGH(-_caller_id)
000857 e0a0      	LDI  R26,LOW(0)
000858 83a0      	STD  Z+0,R26
000859 85e9      	LDD  R30,Y+9
00085a 5fef      	SUBI R30,-LOW(1)
00085b 87e9      	STD  Y+9,R30
00085c cff3      	RJMP _0xB8
                 _0xB9:
                 ; 0000 032F for (i=1;i<20;i++)
00085d e0e1      	LDI  R30,LOW(1)
00085e 87e9      	STD  Y+9,R30
                 _0xBB:
00085f 85a9      	LDD  R26,Y+9
000860 31a4      	CPI  R26,LOW(0x14)
000861 f478      	BRSH _0xBC
                 ; 0000 0330     {
                 ; 0000 0331         temp=getchar();
000862 940e 01ba 	CALL _getchar
000864 83ef      	STD  Y+7,R30
                 ; 0000 0332         if (temp=='"') break;
000865 81af      	LDD  R26,Y+7
000866 32a2      	CPI  R26,LOW(0x22)
000867 f049      	BREQ _0xBC
                 ; 0000 0333         caller_id[i]=temp;
000868 85e9      	LDD  R30,Y+9
000869 e0f0      	LDI  R31,0
00086a 54e4      	SUBI R30,LOW(-_caller_id)
00086b 4ff9      	SBCI R31,HIGH(-_caller_id)
00086c 83a0      	STD  Z+0,R26
                 ; 0000 0334     }
00086d 85e9      	LDD  R30,Y+9
00086e 5fef      	SUBI R30,-LOW(1)
00086f 87e9      	STD  Y+9,R30
000870 cfee      	RJMP _0xBB
                 _0xBC:
                 ; 0000 0335     caller_id[0]=i-1;
000871 85e9      	LDD  R30,Y+9
000872 e0f0      	LDI  R31,0
000873 9731      	SBIW R30,1
000874 93e0 06bc 	STS  _caller_id,R30
                 ; 0000 0336     delay_ms(1000);
000876 eee8      	LDI  R30,LOW(1000)
000877 e0f3      	LDI  R31,HIGH(1000)
000878 93fa      	ST   -Y,R31
000879 93ea      	ST   -Y,R30
00087a 940e 0bf6 	CALL _delay_ms
                 ; 0000 0337 
                 ; 0000 0338     while (rx_counter0!=0)
                 _0xBE:
00087c 20dd      	TST  R13
00087d f059      	BREQ _0xC0
                 ; 0000 0339     {
                 ; 0000 033A         ch1=ch2;
00087e 2f10      	MOV  R17,R16
                 ; 0000 033B         ch2=getchar();
00087f 940e 01ba 	CALL _getchar
000881 2f0e      	MOV  R16,R30
                 ; 0000 033C         if ((ch1==13)&&(ch2==10)) break;
000882 301d      	CPI  R17,13
000883 f411      	BRNE _0xC2
000884 300a      	CPI  R16,10
000885 f009      	BREQ _0xC3
                 _0xC2:
000886 c001      	RJMP _0xC1
                 _0xC3:
000887 c001      	RJMP _0xC0
                 ; 0000 033D     }
                 _0xC1:
000888 cff3      	RJMP _0xBE
                 _0xC0:
                 ; 0000 033E 
                 ; 0000 033F     i=0;
000889 e0e0      	LDI  R30,LOW(0)
00088a 87e9      	STD  Y+9,R30
                 ; 0000 0340     while (1)
                 _0xC4:
                 ; 0000 0341     {
                 ; 0000 0342         ch1=ch2;
00088b 2f10      	MOV  R17,R16
                 ; 0000 0343         ch2=getchar();
00088c 940e 01ba 	CALL _getchar
00088e 2f0e      	MOV  R16,R30
                 ; 0000 0344         if ((ch1='O')&&(ch2=='K')) break;
00088f e4ef      	LDI  R30,LOW(79)
000890 2f1e      	MOV  R17,R30
000891 30e0      	CPI  R30,0
000892 f011      	BREQ _0xC8
000893 340b      	CPI  R16,75
000894 f009      	BREQ _0xC9
                 _0xC8:
000895 c001      	RJMP _0xC7
                 _0xC9:
000896 c00b      	RJMP _0xC6
                 ; 0000 0345 
                 ; 0000 0346         sms_in_e2prom[++i]=ch2;
                 _0xC7:
000897 85e9      	LDD  R30,Y+9
000898 5fef      	SUBI R30,-LOW(1)
000899 87e9      	STD  Y+9,R30
00089a e0f0      	LDI  R31,0
00089b 50e0      	SUBI R30,LOW(-_sms_in_e2prom)
00089c 40f0      	SBCI R31,HIGH(-_sms_in_e2prom)
00089d 01df      	MOVW R26,R30
00089e 2fe0      	MOV  R30,R16
00089f 940e 0c1e 	CALL __EEPROMWRB
                 ; 0000 0347     }
0008a1 cfe9      	RJMP _0xC4
                 _0xC6:
                 ; 0000 0348     sms_in_e2prom[0]=i;
0008a2 85e9      	LDD  R30,Y+9
0008a3 e0a0      	LDI  R26,LOW(_sms_in_e2prom)
0008a4 e0b0      	LDI  R27,HIGH(_sms_in_e2prom)
0008a5 940e 0c1e 	CALL __EEPROMWRB
                 ; 0000 0349     while (rx_counter0>0)    getchar();
                 _0xCA:
0008a7 e0e0      	LDI  R30,LOW(0)
0008a8 15ed      	CP   R30,R13
0008a9 f418      	BRSH _0xCC
0008aa 940e 01ba 	CALL _getchar
0008ac cffa      	RJMP _0xCA
                 _0xCC:
                 ; 0000 034D puts("AT+CMGD=1 \r");delay_ms(1000);
                +
0008ad e8e0     +LDI R30 , LOW ( _0xCD + ( 0 ) )
0008ae e0f6     +LDI R31 , HIGH ( _0xCD + ( 0 ) )
                 	__POINTW1MN _0xCD,0
0008af 93fa      	ST   -Y,R31
0008b0 93ea      	ST   -Y,R30
0008b1 d163      	RCALL _puts
0008b2 eee8      	LDI  R30,LOW(1000)
0008b3 e0f3      	LDI  R31,HIGH(1000)
0008b4 93fa      	ST   -Y,R31
0008b5 93ea      	ST   -Y,R30
0008b6 940e 0bf6 	CALL _delay_ms
                 ; 0000 034E     puts("AT+CMGD=1 \r");delay_ms(1000);
                +
0008b8 e8ec     +LDI R30 , LOW ( _0xCD + ( 12 ) )
0008b9 e0f6     +LDI R31 , HIGH ( _0xCD + ( 12 ) )
                 	__POINTW1MN _0xCD,12
0008ba 93fa      	ST   -Y,R31
0008bb 93ea      	ST   -Y,R30
0008bc d158      	RCALL _puts
0008bd eee8      	LDI  R30,LOW(1000)
0008be e0f3      	LDI  R31,HIGH(1000)
0008bf 93fa      	ST   -Y,R31
0008c0 93ea      	ST   -Y,R30
0008c1 940e 0bf6 	CALL _delay_ms
                 ; 0000 034F     puts("AT+CMGD=2 \r");delay_ms(1000);
                +
0008c3 e9e8     +LDI R30 , LOW ( _0xCD + ( 24 ) )
0008c4 e0f6     +LDI R31 , HIGH ( _0xCD + ( 24 ) )
                 	__POINTW1MN _0xCD,24
0008c5 93fa      	ST   -Y,R31
0008c6 93ea      	ST   -Y,R30
0008c7 d14d      	RCALL _puts
0008c8 eee8      	LDI  R30,LOW(1000)
0008c9 e0f3      	LDI  R31,HIGH(1000)
0008ca 93fa      	ST   -Y,R31
0008cb 93ea      	ST   -Y,R30
0008cc 940e 0bf6 	CALL _delay_ms
                 ; 0000 0350     process_sms();
0008ce dc2c      	RCALL _process_sms
                 ; 0000 0351 
                 ; 0000 0352 
                 ; 0000 0353 }
                 _0x20A0003:
0008cf 940e 0c36 	CALL __LOADLOCR6
0008d1 962a      	ADIW R28,10
0008d2 9508      	RET
                 
                 	.DSEG
                 _0xCD:
000680           	.BYTE 0x24
                 ;///////////////////////////////////////////////////////////////////////////////
                 ;void echooff(void)
                 ; 0000 0356 {
                 
                 	.CSEG
                 _echooff:
0008d3 92ff      	PUSH R15
                 ; 0000 0357 bit flag=1;
                 ; 0000 0358 char ch1,ch2;
                 ; 0000 0359 while (flag)
0008d4 931a      	ST   -Y,R17
0008d5 930a      	ST   -Y,R16
                 ;	flag -> R15.0
                 ;	ch1 -> R17
                 ;	ch2 -> R16
0008d6 e0e1      	LDI  R30,LOW(1)
0008d7 2efe      	MOV  R15,R30
                 _0xCE:
0008d8 fef0      	SBRS R15,0
0008d9 c059      	RJMP _0xD0
                 ; 0000 035A     {
                 ; 0000 035B     putchar ('A');delay_ms(50);
0008da e4e1      	LDI  R30,LOW(65)
0008db 93ea      	ST   -Y,R30
0008dc 940e 01ef 	CALL _putchar
0008de e3e2      	LDI  R30,LOW(50)
0008df e0f0      	LDI  R31,HIGH(50)
0008e0 93fa      	ST   -Y,R31
0008e1 93ea      	ST   -Y,R30
0008e2 940e 0bf6 	CALL _delay_ms
                 ; 0000 035C     putchar ('T');delay_ms(50);
0008e4 e5e4      	LDI  R30,LOW(84)
0008e5 93ea      	ST   -Y,R30
0008e6 940e 01ef 	CALL _putchar
0008e8 e3e2      	LDI  R30,LOW(50)
0008e9 e0f0      	LDI  R31,HIGH(50)
0008ea 93fa      	ST   -Y,R31
0008eb 93ea      	ST   -Y,R30
0008ec 940e 0bf6 	CALL _delay_ms
                 ; 0000 035D     putchar ('E');delay_ms(50);
0008ee e4e5      	LDI  R30,LOW(69)
0008ef 93ea      	ST   -Y,R30
0008f0 940e 01ef 	CALL _putchar
0008f2 e3e2      	LDI  R30,LOW(50)
0008f3 e0f0      	LDI  R31,HIGH(50)
0008f4 93fa      	ST   -Y,R31
0008f5 93ea      	ST   -Y,R30
0008f6 940e 0bf6 	CALL _delay_ms
                 ; 0000 035E     putchar ('0');delay_ms(50);
0008f8 e3e0      	LDI  R30,LOW(48)
0008f9 93ea      	ST   -Y,R30
0008fa 940e 01ef 	CALL _putchar
0008fc e3e2      	LDI  R30,LOW(50)
0008fd e0f0      	LDI  R31,HIGH(50)
0008fe 93fa      	ST   -Y,R31
0008ff 93ea      	ST   -Y,R30
000900 940e 0bf6 	CALL _delay_ms
                 ; 0000 035F     putchar (13);delay_ms(50);
000902 e0ed      	LDI  R30,LOW(13)
000903 93ea      	ST   -Y,R30
000904 940e 01ef 	CALL _putchar
000906 e3e2      	LDI  R30,LOW(50)
000907 e0f0      	LDI  R31,HIGH(50)
000908 93fa      	ST   -Y,R31
000909 93ea      	ST   -Y,R30
00090a 940e 0bf6 	CALL _delay_ms
                 ; 0000 0360     putchar (10);delay_ms(50);
00090c e0ea      	LDI  R30,LOW(10)
00090d 93ea      	ST   -Y,R30
00090e 940e 01ef 	CALL _putchar
000910 e3e2      	LDI  R30,LOW(50)
000911 e0f0      	LDI  R31,HIGH(50)
000912 93fa      	ST   -Y,R31
000913 93ea      	ST   -Y,R30
000914 940e 0bf6 	CALL _delay_ms
                 ; 0000 0361     delay_ms(500);
000916 efe4      	LDI  R30,LOW(500)
000917 e0f1      	LDI  R31,HIGH(500)
000918 93fa      	ST   -Y,R31
000919 93ea      	ST   -Y,R30
00091a 940e 0bf6 	CALL _delay_ms
                 ; 0000 0362     while (rx_counter0>0)
                 _0xD1:
00091c e0e0      	LDI  R30,LOW(0)
00091d 15ed      	CP   R30,R13
00091e f468      	BRSH _0xD3
                 ; 0000 0363         {
                 ; 0000 0364         ch1=ch2;
00091f 2f10      	MOV  R17,R16
                 ; 0000 0365         ch2=getchar();
000920 940e 01ba 	CALL _getchar
000922 2f0e      	MOV  R16,R30
                 ; 0000 0366         if ((ch1=='O') && (ch2=='K'))    {flag=0;break;}
000923 341f      	CPI  R17,79
000924 f411      	BRNE _0xD5
000925 340b      	CPI  R16,75
000926 f009      	BREQ _0xD6
                 _0xD5:
000927 c003      	RJMP _0xD4
                 _0xD6:
000928 94e8      	CLT
000929 f8f0      	BLD  R15,0
00092a c001      	RJMP _0xD3
                 ; 0000 0367         }
                 _0xD4:
00092b cff0      	RJMP _0xD1
                 _0xD3:
                 ; 0000 0368     while (rx_counter0>0)    getchar();
                 _0xD7:
00092c e0e0      	LDI  R30,LOW(0)
00092d 15ed      	CP   R30,R13
00092e f418      	BRSH _0xD9
00092f 940e 01ba 	CALL _getchar
000931 cffa      	RJMP _0xD7
                 _0xD9:
                 ; 0000 0369 }
000932 cfa5      	RJMP _0xCE
                 _0xD0:
                 ; 0000 036A }
000933 9109      	LD   R16,Y+
000934 9119      	LD   R17,Y+
000935 90ff      	POP  R15
000936 9508      	RET
                 ;///////////////////////////////////////////////////////////////////////////////
                 ;void poweron(void)
                 ; 0000 036D {
                 _poweron:
000937 92ff      	PUSH R15
                 ; 0000 036E     unsigned char i,ch1,ch2;
                 ; 0000 036F     bit flag=1;
                 ; 0000 0370 
                 ; 0000 0371     while (rx_counter0>0)    getchar();
000938 940e 0c31 	CALL __SAVELOCR4
                 ;	i -> R17
                 ;	ch1 -> R16
                 ;	ch2 -> R19
                 ;	flag -> R15.0
00093a e0e1      	LDI  R30,LOW(1)
00093b 2efe      	MOV  R15,R30
                 _0xDA:
00093c e0e0      	LDI  R30,LOW(0)
00093d 15ed      	CP   R30,R13
00093e f418      	BRSH _0xDC
00093f 940e 01ba 	CALL _getchar
000941 cffa      	RJMP _0xDA
                 _0xDC:
                 ; 0000 0373 while (flag)
                 _0xDD:
000942 fef0      	SBRS R15,0
000943 c044      	RJMP _0xDF
                 ; 0000 0374         {
                 ; 0000 0375             putchar('A');delay_ms(50);
000944 e4e1      	LDI  R30,LOW(65)
000945 93ea      	ST   -Y,R30
000946 940e 01ef 	CALL _putchar
000948 e3e2      	LDI  R30,LOW(50)
000949 e0f0      	LDI  R31,HIGH(50)
00094a 93fa      	ST   -Y,R31
00094b 93ea      	ST   -Y,R30
00094c 940e 0bf6 	CALL _delay_ms
                 ; 0000 0376             putchar('T');delay_ms(50);
00094e e5e4      	LDI  R30,LOW(84)
00094f 93ea      	ST   -Y,R30
000950 940e 01ef 	CALL _putchar
000952 e3e2      	LDI  R30,LOW(50)
000953 e0f0      	LDI  R31,HIGH(50)
000954 93fa      	ST   -Y,R31
000955 93ea      	ST   -Y,R30
000956 940e 0bf6 	CALL _delay_ms
                 ; 0000 0377             putchar(13);delay_ms(50);
000958 e0ed      	LDI  R30,LOW(13)
000959 93ea      	ST   -Y,R30
00095a 940e 01ef 	CALL _putchar
00095c e3e2      	LDI  R30,LOW(50)
00095d e0f0      	LDI  R31,HIGH(50)
00095e 93fa      	ST   -Y,R31
00095f 93ea      	ST   -Y,R30
000960 940e 0bf6 	CALL _delay_ms
                 ; 0000 0378             putchar (10);delay_ms(50);
000962 e0ea      	LDI  R30,LOW(10)
000963 93ea      	ST   -Y,R30
000964 940e 01ef 	CALL _putchar
000966 e3e2      	LDI  R30,LOW(50)
000967 e0f0      	LDI  R31,HIGH(50)
000968 93fa      	ST   -Y,R31
000969 93ea      	ST   -Y,R30
00096a 940e 0bf6 	CALL _delay_ms
                 ; 0000 0379 
                 ; 0000 037A             delay_ms(500);
00096c efe4      	LDI  R30,LOW(500)
00096d e0f1      	LDI  R31,HIGH(500)
00096e 93fa      	ST   -Y,R31
00096f 93ea      	ST   -Y,R30
000970 940e 0bf6 	CALL _delay_ms
                 ; 0000 037B             while (rx_counter0>0)
                 _0xE0:
000972 e0e0      	LDI  R30,LOW(0)
000973 15ed      	CP   R30,R13
000974 f468      	BRSH _0xE2
                 ; 0000 037C             {
                 ; 0000 037D                 ch1=ch2;
000975 2f03      	MOV  R16,R19
                 ; 0000 037E                 ch2=getchar();
000976 940e 01ba 	CALL _getchar
000978 2f3e      	MOV  R19,R30
                 ; 0000 037F                 if ((ch1=='O') && (ch2=='K'))    {flag=0;break;}
000979 340f      	CPI  R16,79
00097a f411      	BRNE _0xE4
00097b 343b      	CPI  R19,75
00097c f009      	BREQ _0xE5
                 _0xE4:
00097d c003      	RJMP _0xE3
                 _0xE5:
00097e 94e8      	CLT
00097f f8f0      	BLD  R15,0
000980 c001      	RJMP _0xE2
                 ; 0000 0380 
                 ; 0000 0381             }
                 _0xE3:
000981 cff0      	RJMP _0xE0
                 _0xE2:
                 ; 0000 0382             while (rx_counter0) getchar();
                 _0xE6:
000982 20dd      	TST  R13
000983 f019      	BREQ _0xE8
000984 940e 01ba 	CALL _getchar
000986 cffb      	RJMP _0xE6
                 _0xE8:
                 ; 0000 0383 }
000987 cfba      	RJMP _0xDD
                 _0xDF:
                 ; 0000 0384 ///////////////////////////////////////////////////////////////
                 ; 0000 0385 }
000988 940e 0c38 	CALL __LOADLOCR4
00098a 9624      	ADIW R28,4
00098b 90ff      	POP  R15
00098c 9508      	RET
                 ;void Security(void)
                 ; 0000 0387 {
                 _Security:
                 ; 0000 0388 if((PINC.5==0 || PINC.6==0 ) && securityMode[1] == 'N')  ///////Dozdgir//////
00098d e0a0      	LDI  R26,0
00098e 999d      	SBIC 0x13,5
00098f e0a1      	LDI  R26,1
000990 30a0      	CPI  R26,LOW(0x0)
000991 f029      	BREQ _0xEA
000992 e0a0      	LDI  R26,0
000993 999e      	SBIC 0x13,6
000994 e0a1      	LDI  R26,1
000995 30a0      	CPI  R26,LOW(0x0)
000996 f421      	BRNE _0xEC
                 _0xEA:
000997 01f4      	MOVW R30,R8
000998 81a1      	LDD  R26,Z+1
000999 34ae      	CPI  R26,LOW(0x4E)
00099a f009      	BREQ _0xED
                 _0xEC:
00099b c030      	RJMP _0xE9
                 _0xED:
                 ; 0000 0389  {
                 ; 0000 038A   delay_ms(8000);
00099c e4e0      	LDI  R30,LOW(8000)
00099d e1ff      	LDI  R31,HIGH(8000)
00099e 93fa      	ST   -Y,R31
00099f 93ea      	ST   -Y,R30
0009a0 940e 0bf6 	CALL _delay_ms
                 ; 0000 038B   puts("AT+CMGS=\"09384198683\" \r");
                +
0009a2 eae4     +LDI R30 , LOW ( _0xEE + ( 0 ) )
0009a3 e0f6     +LDI R31 , HIGH ( _0xEE + ( 0 ) )
                 	__POINTW1MN _0xEE,0
0009a4 93fa      	ST   -Y,R31
0009a5 93ea      	ST   -Y,R30
0009a6 d06e      	RCALL _puts
                 ; 0000 038C   putchar (13);
0009a7 e0ed      	LDI  R30,LOW(13)
0009a8 93ea      	ST   -Y,R30
0009a9 940e 01ef 	CALL _putchar
                 ; 0000 038D   putchar (10);
0009ab e0ea      	LDI  R30,LOW(10)
0009ac 93ea      	ST   -Y,R30
0009ad 940e 01ef 	CALL _putchar
                 ; 0000 038E   delay_ms(180);
0009af ebe4      	LDI  R30,LOW(180)
0009b0 e0f0      	LDI  R31,HIGH(180)
0009b1 93fa      	ST   -Y,R31
0009b2 93ea      	ST   -Y,R30
0009b3 940e 0bf6 	CALL _delay_ms
                 ; 0000 038F   printf("DozD!");
                +
0009b5 efe0     +LDI R30 , LOW ( 2 * _0x0 + ( 324 ) )
0009b6 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 324 ) )
                 	__POINTW1FN _0x0,324
0009b7 93fa      	ST   -Y,R31
0009b8 93ea      	ST   -Y,R30
0009b9 e080      	LDI  R24,0
0009ba d1ff      	RCALL _printf
0009bb 9622      	ADIW R28,2
                 ; 0000 0390   delay_ms(90);
0009bc e5ea      	LDI  R30,LOW(90)
0009bd e0f0      	LDI  R31,HIGH(90)
0009be 93fa      	ST   -Y,R31
0009bf 93ea      	ST   -Y,R30
0009c0 940e 0bf6 	CALL _delay_ms
                 ; 0000 0391   putchar (26);
0009c2 e1ea      	LDI  R30,LOW(26)
0009c3 93ea      	ST   -Y,R30
0009c4 940e 01ef 	CALL _putchar
                 ; 0000 0392   delay_ms(200);
0009c6 ece8      	LDI  R30,LOW(200)
0009c7 e0f0      	LDI  R31,HIGH(200)
0009c8 93fa      	ST   -Y,R31
0009c9 93ea      	ST   -Y,R30
0009ca 940e 0bf6 	CALL _delay_ms
                 ; 0000 0393  }
                 ; 0000 0394 };
                 _0xE9:
0009cc 9508      	RET
                 
                 	.DSEG
                 _0xEE:
0006a4           	.BYTE 0x18
                 ;void getAntenna()
                 ; 0000 0396 {
                 
                 	.CSEG
                 _getAntenna:
                 ; 0000 0397     int index = 0;
                 ; 0000 0398     unsigned char antenna [];
                 ; 0000 0399     unsigned char ch1;
                 ; 0000 039A 
                 ; 0000 039B     while (rx_counter0>0)    getchar();
0009cd 940e 0c31 	CALL __SAVELOCR4
                 ;	index -> R16,R17
                 ;	antenna -> Y+4
                 ;	ch1 -> R19
                +
0009cf e000     +LDI R16 , LOW ( 0 )
0009d0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xEF:
0009d1 e0e0      	LDI  R30,LOW(0)
0009d2 15ed      	CP   R30,R13
0009d3 f418      	BRSH _0xF1
0009d4 940e 01ba 	CALL _getchar
0009d6 cffa      	RJMP _0xEF
                 _0xF1:
                 ; 0000 039C putchar('A');
0009d7 e4e1      	LDI  R30,LOW(65)
0009d8 93ea      	ST   -Y,R30
0009d9 940e 01ef 	CALL _putchar
                 ; 0000 039D     putchar('T');
0009db e5e4      	LDI  R30,LOW(84)
0009dc 93ea      	ST   -Y,R30
0009dd 940e 01ef 	CALL _putchar
                 ; 0000 039E     putchar('+');
0009df e2eb      	LDI  R30,LOW(43)
0009e0 93ea      	ST   -Y,R30
0009e1 940e 01ef 	CALL _putchar
                 ; 0000 039F     putchar('C');
0009e3 e4e3      	LDI  R30,LOW(67)
0009e4 93ea      	ST   -Y,R30
0009e5 940e 01ef 	CALL _putchar
                 ; 0000 03A0     putchar('S');
0009e7 e5e3      	LDI  R30,LOW(83)
0009e8 93ea      	ST   -Y,R30
0009e9 940e 01ef 	CALL _putchar
                 ; 0000 03A1     putchar('Q');
0009eb e5e1      	LDI  R30,LOW(81)
0009ec 93ea      	ST   -Y,R30
0009ed 940e 01ef 	CALL _putchar
                 ; 0000 03A2     putchar(13);
0009ef e0ed      	LDI  R30,LOW(13)
0009f0 93ea      	ST   -Y,R30
0009f1 940e 01ef 	CALL _putchar
                 ; 0000 03A3     putchar(10);
0009f3 e0ea      	LDI  R30,LOW(10)
0009f4 93ea      	ST   -Y,R30
0009f5 940e 01ef 	CALL _putchar
                 ; 0000 03A4     delay_ms(1000);
0009f7 eee8      	LDI  R30,LOW(1000)
0009f8 e0f3      	LDI  R31,HIGH(1000)
0009f9 93fa      	ST   -Y,R31
0009fa 93ea      	ST   -Y,R30
0009fb 940e 0bf6 	CALL _delay_ms
                 ; 0000 03A5 
                 ; 0000 03A6     while (rx_counter0>0)
                 _0xF2:
0009fd e0e0      	LDI  R30,LOW(0)
0009fe 15ed      	CP   R30,R13
0009ff f460      	BRSH _0xF4
                 ; 0000 03A7     {
                 ; 0000 03A8         ch1 = getchar();
000a00 940e 01ba 	CALL _getchar
000a02 2f3e      	MOV  R19,R30
                 ; 0000 03A9         antenna[index] = ch1;
000a03 01f8      	MOVW R30,R16
000a04 01de      	MOVW R26,R28
000a05 9614      	ADIW R26,4
000a06 0fea      	ADD  R30,R26
000a07 1ffb      	ADC  R31,R27
000a08 8330      	ST   Z,R19
                 ; 0000 03AA         index++;
                +
000a09 5f0f     +SUBI R16 , LOW ( - 1 )
000a0a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 03AB     }
000a0b cff1      	RJMP _0xF2
                 _0xF4:
                 ; 0000 03AC 
                 ; 0000 03AD     SendSMS(antenna);
000a0c 01fe      	MOVW R30,R28
000a0d 9634      	ADIW R30,4
000a0e 93fa      	ST   -Y,R31
000a0f 93ea      	ST   -Y,R30
000a10 dac1      	RCALL _SendSMS
                 ; 0000 03AE };
                 _0x20A0002:
000a11 940e 0c38 	CALL __LOADLOCR4
000a13 9624      	ADIW R28,4
000a14 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _puts:
000a15 931a      	ST   -Y,R17
                 _0x2000003:
000a16 81a9      	LDD  R26,Y+1
000a17 81ba      	LDD  R27,Y+1+1
000a18 91ed      	LD   R30,X+
000a19 83a9      	STD  Y+1,R26
000a1a 83ba      	STD  Y+1+1,R27
000a1b 2f1e      	MOV  R17,R30
000a1c 30e0      	CPI  R30,0
000a1d f021      	BREQ _0x2000005
000a1e 931a      	ST   -Y,R17
000a1f 940e 01ef 	CALL _putchar
000a21 cff4      	RJMP _0x2000003
                 _0x2000005:
000a22 e0ea      	LDI  R30,LOW(10)
000a23 93ea      	ST   -Y,R30
000a24 940e 01ef 	CALL _putchar
000a26 8118      	LDD  R17,Y+0
000a27 c00b      	RJMP _0x20A0001
                 _put_usart_G100:
000a28 81ea      	LDD  R30,Y+2
000a29 93ea      	ST   -Y,R30
000a2a 940e 01ef 	CALL _putchar
000a2c 81a8      	LD   R26,Y
000a2d 81b9      	LDD  R27,Y+1
000a2e 91ed      	LD   R30,X+
000a2f 91fd      	LD   R31,X+
000a30 9631      	ADIW R30,1
000a31 93fe      	ST   -X,R31
000a32 93ee      	ST   -X,R30
                 _0x20A0001:
000a33 9623      	ADIW R28,3
000a34 9508      	RET
                 __print_G100:
000a35 9726      	SBIW R28,6
000a36 940e 0c2f 	CALL __SAVELOCR6
000a38 e010      	LDI  R17,0
000a39 85ac      	LDD  R26,Y+12
000a3a 85bd      	LDD  R27,Y+12+1
000a3b e0e0      	LDI  R30,LOW(0)
000a3c e0f0      	LDI  R31,HIGH(0)
000a3d 93ed      	ST   X+,R30
000a3e 93fc      	ST   X,R31
                 _0x2000016:
000a3f 89ea      	LDD  R30,Y+18
000a40 89fb      	LDD  R31,Y+18+1
000a41 9631      	ADIW R30,1
000a42 8bea      	STD  Y+18,R30
000a43 8bfb      	STD  Y+18+1,R31
000a44 9731      	SBIW R30,1
000a45 91e4      	LPM  R30,Z
000a46 2f2e      	MOV  R18,R30
000a47 30e0      	CPI  R30,0
000a48 f411      	BRNE PC+3
000a49 940c 0bb2 	JMP _0x2000018
000a4b 2fe1      	MOV  R30,R17
000a4c 30e0      	CPI  R30,0
000a4d f469      	BRNE _0x200001C
000a4e 3225      	CPI  R18,37
000a4f f411      	BRNE _0x200001D
000a50 e011      	LDI  R17,LOW(1)
000a51 c008      	RJMP _0x200001E
                 _0x200001D:
000a52 932a      	ST   -Y,R18
000a53 85ed      	LDD  R30,Y+13
000a54 85fe      	LDD  R31,Y+13+1
000a55 93fa      	ST   -Y,R31
000a56 93ea      	ST   -Y,R30
000a57 89e9      	LDD  R30,Y+17
000a58 89fa      	LDD  R31,Y+17+1
000a59 9509      	ICALL
                 _0x200001E:
000a5a c156      	RJMP _0x200001B
                 _0x200001C:
000a5b 30e1      	CPI  R30,LOW(0x1)
000a5c f4d9      	BRNE _0x200001F
000a5d 3225      	CPI  R18,37
000a5e f449      	BRNE _0x2000020
000a5f 932a      	ST   -Y,R18
000a60 85ed      	LDD  R30,Y+13
000a61 85fe      	LDD  R31,Y+13+1
000a62 93fa      	ST   -Y,R31
000a63 93ea      	ST   -Y,R30
000a64 89e9      	LDD  R30,Y+17
000a65 89fa      	LDD  R31,Y+17+1
000a66 9509      	ICALL
000a67 c148      	RJMP _0x20000C9
                 _0x2000020:
000a68 e012      	LDI  R17,LOW(2)
000a69 e040      	LDI  R20,LOW(0)
000a6a e000      	LDI  R16,LOW(0)
000a6b 322d      	CPI  R18,45
000a6c f411      	BRNE _0x2000021
000a6d e001      	LDI  R16,LOW(1)
000a6e c142      	RJMP _0x200001B
                 _0x2000021:
000a6f 322b      	CPI  R18,43
000a70 f411      	BRNE _0x2000022
000a71 e24b      	LDI  R20,LOW(43)
000a72 c13e      	RJMP _0x200001B
                 _0x2000022:
000a73 3220      	CPI  R18,32
000a74 f411      	BRNE _0x2000023
000a75 e240      	LDI  R20,LOW(32)
000a76 c13a      	RJMP _0x200001B
                 _0x2000023:
000a77 c002      	RJMP _0x2000024
                 _0x200001F:
000a78 30e2      	CPI  R30,LOW(0x2)
000a79 f439      	BRNE _0x2000025
                 _0x2000024:
000a7a e050      	LDI  R21,LOW(0)
000a7b e013      	LDI  R17,LOW(3)
000a7c 3320      	CPI  R18,48
000a7d f411      	BRNE _0x2000026
000a7e 6800      	ORI  R16,LOW(128)
000a7f c131      	RJMP _0x200001B
                 _0x2000026:
000a80 c004      	RJMP _0x2000027
                 _0x2000025:
000a81 30e3      	CPI  R30,LOW(0x3)
000a82 f011      	BREQ PC+3
000a83 940c 0bb1 	JMP _0x200001B
                 _0x2000027:
000a85 3320      	CPI  R18,48
000a86 f010      	BRLO _0x200002A
000a87 332a      	CPI  R18,58
000a88 f008      	BRLO _0x200002B
                 _0x200002A:
000a89 c007      	RJMP _0x2000029
                 _0x200002B:
000a8a e0aa      	LDI  R26,LOW(10)
000a8b 9f5a      	MUL  R21,R26
000a8c 2d50      	MOV  R21,R0
000a8d 2fe2      	MOV  R30,R18
000a8e 53e0      	SUBI R30,LOW(48)
000a8f 0f5e      	ADD  R21,R30
000a90 c120      	RJMP _0x200001B
                 _0x2000029:
000a91 2fe2      	MOV  R30,R18
000a92 36e3      	CPI  R30,LOW(0x63)
000a93 f479      	BRNE _0x200002F
000a94 89e8      	LDD  R30,Y+16
000a95 89f9      	LDD  R31,Y+16+1
000a96 9734      	SBIW R30,4
000a97 8be8      	STD  Y+16,R30
000a98 8bf9      	STD  Y+16+1,R31
000a99 81a4      	LDD  R26,Z+4
000a9a 93aa      	ST   -Y,R26
000a9b 85ed      	LDD  R30,Y+13
000a9c 85fe      	LDD  R31,Y+13+1
000a9d 93fa      	ST   -Y,R31
000a9e 93ea      	ST   -Y,R30
000a9f 89e9      	LDD  R30,Y+17
000aa0 89fa      	LDD  R31,Y+17+1
000aa1 9509      	ICALL
000aa2 c10d      	RJMP _0x2000030
                 _0x200002F:
000aa3 37e3      	CPI  R30,LOW(0x73)
000aa4 f491      	BRNE _0x2000032
000aa5 89e8      	LDD  R30,Y+16
000aa6 89f9      	LDD  R31,Y+16+1
000aa7 9734      	SBIW R30,4
000aa8 8be8      	STD  Y+16,R30
000aa9 8bf9      	STD  Y+16+1,R31
000aaa 89a8      	LDD  R26,Y+16
000aab 89b9      	LDD  R27,Y+16+1
000aac 9614      	ADIW R26,4
000aad 940e 0c0a 	CALL __GETW1P
000aaf 83ee      	STD  Y+6,R30
000ab0 83ff      	STD  Y+6+1,R31
000ab1 93fa      	ST   -Y,R31
000ab2 93ea      	ST   -Y,R30
000ab3 940e 0be1 	CALL _strlen
000ab5 2f1e      	MOV  R17,R30
000ab6 c014      	RJMP _0x2000033
                 _0x2000032:
000ab7 37e0      	CPI  R30,LOW(0x70)
000ab8 f4b1      	BRNE _0x2000035
000ab9 89e8      	LDD  R30,Y+16
000aba 89f9      	LDD  R31,Y+16+1
000abb 9734      	SBIW R30,4
000abc 8be8      	STD  Y+16,R30
000abd 8bf9      	STD  Y+16+1,R31
000abe 89a8      	LDD  R26,Y+16
000abf 89b9      	LDD  R27,Y+16+1
000ac0 9614      	ADIW R26,4
000ac1 940e 0c0a 	CALL __GETW1P
000ac3 83ee      	STD  Y+6,R30
000ac4 83ff      	STD  Y+6+1,R31
000ac5 93fa      	ST   -Y,R31
000ac6 93ea      	ST   -Y,R30
000ac7 940e 0beb 	CALL _strlenf
000ac9 2f1e      	MOV  R17,R30
000aca 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000acb 6002      	ORI  R16,LOW(2)
000acc 770f      	ANDI R16,LOW(127)
000acd e030      	LDI  R19,LOW(0)
000ace c043      	RJMP _0x2000036
                 _0x2000035:
000acf 36e4      	CPI  R30,LOW(0x64)
000ad0 f011      	BREQ _0x2000039
000ad1 36e9      	CPI  R30,LOW(0x69)
000ad2 f411      	BRNE _0x200003A
                 _0x2000039:
000ad3 6004      	ORI  R16,LOW(4)
000ad4 c002      	RJMP _0x200003B
                 _0x200003A:
000ad5 37e5      	CPI  R30,LOW(0x75)
000ad6 f431      	BRNE _0x200003C
                 _0x200003B:
000ad7 e8ec      	LDI  R30,LOW(_tbl10_G100*2)
000ad8 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000ad9 83ee      	STD  Y+6,R30
000ada 83ff      	STD  Y+6+1,R31
000adb e015      	LDI  R17,LOW(5)
000adc c00d      	RJMP _0x200003D
                 _0x200003C:
000add 35e8      	CPI  R30,LOW(0x58)
000ade f411      	BRNE _0x200003F
000adf 6008      	ORI  R16,LOW(8)
000ae0 c004      	RJMP _0x2000040
                 _0x200003F:
000ae1 37e8      	CPI  R30,LOW(0x78)
000ae2 f011      	BREQ PC+3
000ae3 940c 0bb0 	JMP _0x2000071
                 _0x2000040:
000ae5 e9e6      	LDI  R30,LOW(_tbl16_G100*2)
000ae6 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000ae7 83ee      	STD  Y+6,R30
000ae8 83ff      	STD  Y+6+1,R31
000ae9 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000aea ff02      	SBRS R16,2
000aeb c01a      	RJMP _0x2000042
000aec 89e8      	LDD  R30,Y+16
000aed 89f9      	LDD  R31,Y+16+1
000aee 9734      	SBIW R30,4
000aef 8be8      	STD  Y+16,R30
000af0 8bf9      	STD  Y+16+1,R31
000af1 89a8      	LDD  R26,Y+16
000af2 89b9      	LDD  R27,Y+16+1
000af3 9614      	ADIW R26,4
000af4 940e 0c0a 	CALL __GETW1P
000af6 87ea      	STD  Y+10,R30
000af7 87fb      	STD  Y+10+1,R31
000af8 85ab      	LDD  R26,Y+11
000af9 23aa      	TST  R26
000afa f42a      	BRPL _0x2000043
000afb 940e 0c06 	CALL __ANEGW1
000afd 87ea      	STD  Y+10,R30
000afe 87fb      	STD  Y+10+1,R31
000aff e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000b00 3040      	CPI  R20,0
000b01 f011      	BREQ _0x2000044
000b02 5f1f      	SUBI R17,-LOW(1)
000b03 c001      	RJMP _0x2000045
                 _0x2000044:
000b04 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000b05 c00c      	RJMP _0x2000046
                 _0x2000042:
000b06 89e8      	LDD  R30,Y+16
000b07 89f9      	LDD  R31,Y+16+1
000b08 9734      	SBIW R30,4
000b09 8be8      	STD  Y+16,R30
000b0a 8bf9      	STD  Y+16+1,R31
000b0b 89a8      	LDD  R26,Y+16
000b0c 89b9      	LDD  R27,Y+16+1
000b0d 9614      	ADIW R26,4
000b0e 940e 0c0a 	CALL __GETW1P
000b10 87ea      	STD  Y+10,R30
000b11 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
000b12 fd00      	SBRC R16,0
000b13 c017      	RJMP _0x2000047
                 _0x2000048:
000b14 1715      	CP   R17,R21
000b15 f4a8      	BRSH _0x200004A
000b16 ff07      	SBRS R16,7
000b17 c008      	RJMP _0x200004B
000b18 ff02      	SBRS R16,2
000b19 c004      	RJMP _0x200004C
000b1a 7f0b      	ANDI R16,LOW(251)
000b1b 2f24      	MOV  R18,R20
000b1c 5011      	SUBI R17,LOW(1)
000b1d c001      	RJMP _0x200004D
                 _0x200004C:
000b1e e320      	LDI  R18,LOW(48)
                 _0x200004D:
000b1f c001      	RJMP _0x200004E
                 _0x200004B:
000b20 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000b21 932a      	ST   -Y,R18
000b22 85ed      	LDD  R30,Y+13
000b23 85fe      	LDD  R31,Y+13+1
000b24 93fa      	ST   -Y,R31
000b25 93ea      	ST   -Y,R30
000b26 89e9      	LDD  R30,Y+17
000b27 89fa      	LDD  R31,Y+17+1
000b28 9509      	ICALL
000b29 5051      	SUBI R21,LOW(1)
000b2a cfe9      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000b2b 2f31      	MOV  R19,R17
000b2c ff01      	SBRS R16,1
000b2d c01d      	RJMP _0x200004F
                 _0x2000050:
000b2e 3030      	CPI  R19,0
000b2f f0d1      	BREQ _0x2000052
000b30 ff03      	SBRS R16,3
000b31 c006      	RJMP _0x2000053
000b32 81ee      	LDD  R30,Y+6
000b33 81ff      	LDD  R31,Y+6+1
000b34 9125      	LPM  R18,Z+
000b35 83ee      	STD  Y+6,R30
000b36 83ff      	STD  Y+6+1,R31
000b37 c005      	RJMP _0x2000054
                 _0x2000053:
000b38 81ae      	LDD  R26,Y+6
000b39 81bf      	LDD  R27,Y+6+1
000b3a 912d      	LD   R18,X+
000b3b 83ae      	STD  Y+6,R26
000b3c 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000b3d 932a      	ST   -Y,R18
000b3e 85ed      	LDD  R30,Y+13
000b3f 85fe      	LDD  R31,Y+13+1
000b40 93fa      	ST   -Y,R31
000b41 93ea      	ST   -Y,R30
000b42 89e9      	LDD  R30,Y+17
000b43 89fa      	LDD  R31,Y+17+1
000b44 9509      	ICALL
000b45 3050      	CPI  R21,0
000b46 f009      	BREQ _0x2000055
000b47 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000b48 5031      	SUBI R19,LOW(1)
000b49 cfe4      	RJMP _0x2000050
                 _0x2000052:
000b4a c056      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000b4b e320      	LDI  R18,LOW(48)
000b4c 81ee      	LDD  R30,Y+6
000b4d 81ff      	LDD  R31,Y+6+1
000b4e 940e 0c0e 	CALL __GETW1PF
000b50 87e8      	STD  Y+8,R30
000b51 87f9      	STD  Y+8+1,R31
000b52 81ee      	LDD  R30,Y+6
000b53 81ff      	LDD  R31,Y+6+1
000b54 9632      	ADIW R30,2
000b55 83ee      	STD  Y+6,R30
000b56 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000b57 85e8      	LDD  R30,Y+8
000b58 85f9      	LDD  R31,Y+8+1
000b59 85aa      	LDD  R26,Y+10
000b5a 85bb      	LDD  R27,Y+10+1
000b5b 17ae      	CP   R26,R30
000b5c 07bf      	CPC  R27,R31
000b5d f050      	BRLO _0x200005C
000b5e 5f2f      	SUBI R18,-LOW(1)
000b5f 85a8      	LDD  R26,Y+8
000b60 85b9      	LDD  R27,Y+8+1
000b61 85ea      	LDD  R30,Y+10
000b62 85fb      	LDD  R31,Y+10+1
000b63 1bea      	SUB  R30,R26
000b64 0bfb      	SBC  R31,R27
000b65 87ea      	STD  Y+10,R30
000b66 87fb      	STD  Y+10+1,R31
000b67 cfef      	RJMP _0x200005A
                 _0x200005C:
000b68 332a      	CPI  R18,58
000b69 f028      	BRLO _0x200005D
000b6a ff03      	SBRS R16,3
000b6b c002      	RJMP _0x200005E
000b6c 5f29      	SUBI R18,-LOW(7)
000b6d c001      	RJMP _0x200005F
                 _0x200005E:
000b6e 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000b6f fd04      	SBRC R16,4
000b70 c01f      	RJMP _0x2000061
000b71 3321      	CPI  R18,49
000b72 f420      	BRSH _0x2000063
000b73 85a8      	LDD  R26,Y+8
000b74 85b9      	LDD  R27,Y+8+1
000b75 9711      	SBIW R26,1
000b76 f409      	BRNE _0x2000062
                 _0x2000063:
000b77 c009      	RJMP _0x20000CA
                 _0x2000062:
000b78 1753      	CP   R21,R19
000b79 f010      	BRLO _0x2000067
000b7a ff00      	SBRS R16,0
000b7b c001      	RJMP _0x2000068
                 _0x2000067:
000b7c c01e      	RJMP _0x2000066
                 _0x2000068:
000b7d e220      	LDI  R18,LOW(32)
000b7e ff07      	SBRS R16,7
000b7f c010      	RJMP _0x2000069
000b80 e320      	LDI  R18,LOW(48)
                 _0x20000CA:
000b81 6100      	ORI  R16,LOW(16)
000b82 ff02      	SBRS R16,2
000b83 c00c      	RJMP _0x200006A
000b84 7f0b      	ANDI R16,LOW(251)
000b85 934a      	ST   -Y,R20
000b86 85ed      	LDD  R30,Y+13
000b87 85fe      	LDD  R31,Y+13+1
000b88 93fa      	ST   -Y,R31
000b89 93ea      	ST   -Y,R30
000b8a 89e9      	LDD  R30,Y+17
000b8b 89fa      	LDD  R31,Y+17+1
000b8c 9509      	ICALL
000b8d 3050      	CPI  R21,0
000b8e f009      	BREQ _0x200006B
000b8f 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000b90 932a      	ST   -Y,R18
000b91 85ed      	LDD  R30,Y+13
000b92 85fe      	LDD  R31,Y+13+1
000b93 93fa      	ST   -Y,R31
000b94 93ea      	ST   -Y,R30
000b95 89e9      	LDD  R30,Y+17
000b96 89fa      	LDD  R31,Y+17+1
000b97 9509      	ICALL
000b98 3050      	CPI  R21,0
000b99 f009      	BREQ _0x200006C
000b9a 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000b9b 5031      	SUBI R19,LOW(1)
000b9c 85a8      	LDD  R26,Y+8
000b9d 85b9      	LDD  R27,Y+8+1
000b9e 9712      	SBIW R26,2
000b9f f008      	BRLO _0x2000059
000ba0 cfaa      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000ba1 ff00      	SBRS R16,0
000ba2 c00d      	RJMP _0x200006D
                 _0x200006E:
000ba3 3050      	CPI  R21,0
000ba4 f059      	BREQ _0x2000070
000ba5 5051      	SUBI R21,LOW(1)
000ba6 e2e0      	LDI  R30,LOW(32)
000ba7 93ea      	ST   -Y,R30
000ba8 85ed      	LDD  R30,Y+13
000ba9 85fe      	LDD  R31,Y+13+1
000baa 93fa      	ST   -Y,R31
000bab 93ea      	ST   -Y,R30
000bac 89e9      	LDD  R30,Y+17
000bad 89fa      	LDD  R31,Y+17+1
000bae 9509      	ICALL
000baf cff3      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
000bb0 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000bb1 ce8d      	RJMP _0x2000016
                 _0x2000018:
000bb2 85ac      	LDD  R26,Y+12
000bb3 85bd      	LDD  R27,Y+12+1
000bb4 940e 0c0a 	CALL __GETW1P
000bb6 940e 0c36 	CALL __LOADLOCR6
000bb8 9664      	ADIW R28,20
000bb9 9508      	RET
                 _printf:
000bba 92ff      	PUSH R15
000bbb 2ef8      	MOV  R15,R24
000bbc 9726      	SBIW R28,6
000bbd 931a      	ST   -Y,R17
000bbe 930a      	ST   -Y,R16
000bbf 01de      	MOVW R26,R28
000bc0 9614      	ADIW R26,4
000bc1 940e 0c02 	CALL __ADDW2R15
000bc3 018d      	MOVW R16,R26
000bc4 e0e0      	LDI  R30,LOW(0)
000bc5 83ec      	STD  Y+4,R30
000bc6 83ed      	STD  Y+4+1,R30
000bc7 83ee      	STD  Y+6,R30
000bc8 83ef      	STD  Y+6+1,R30
000bc9 01de      	MOVW R26,R28
000bca 9618      	ADIW R26,8
000bcb 940e 0c02 	CALL __ADDW2R15
000bcd 940e 0c0a 	CALL __GETW1P
000bcf 93fa      	ST   -Y,R31
000bd0 93ea      	ST   -Y,R30
000bd1 931a      	ST   -Y,R17
000bd2 930a      	ST   -Y,R16
000bd3 e2e8      	LDI  R30,LOW(_put_usart_G100)
000bd4 e0fa      	LDI  R31,HIGH(_put_usart_G100)
000bd5 93fa      	ST   -Y,R31
000bd6 93ea      	ST   -Y,R30
000bd7 01fe      	MOVW R30,R28
000bd8 9638      	ADIW R30,8
000bd9 93fa      	ST   -Y,R31
000bda 93ea      	ST   -Y,R30
000bdb de59      	RCALL __print_G100
000bdc 8119      	LDD  R17,Y+1
000bdd 8108      	LDD  R16,Y+0
000bde 9628      	ADIW R28,8
000bdf 90ff      	POP  R15
000be0 9508      	RET
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
000be1 91a9          ld   r26,y+
000be2 91b9          ld   r27,y+
000be3 27ee          clr  r30
000be4 27ff          clr  r31
                 strlen0:
000be5 916d          ld   r22,x+
000be6 2366          tst  r22
000be7 f011          breq strlen1
000be8 9631          adiw r30,1
000be9 cffb          rjmp strlen0
                 strlen1:
000bea 9508          ret
                 _strlenf:
000beb 27aa          clr  r26
000bec 27bb          clr  r27
000bed 91e9          ld   r30,y+
000bee 91f9          ld   r31,y+
                 strlenf0:
000bef 9005      	lpm  r0,z+
000bf0 2000          tst  r0
000bf1 f011          breq strlenf1
000bf2 9611          adiw r26,1
000bf3 cffb          rjmp strlenf0
                 strlenf1:
000bf4 01fd          movw r30,r26
000bf5 9508          ret
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _caller_id:
0006bc           	.BYTE 0x14
                 
                 	.ESEG
                 _sms_in_e2prom:
000000           	.BYTE 0x100
                 _gps_in_e2prom:
000100           	.BYTE 0x100
                 
                 	.DSEG
                 _rx_buffer0:
0006d0           	.BYTE 0x50
                 _tx_buffer0:
000720           	.BYTE 0x28
                 _tx_rd_index0:
000748           	.BYTE 0x1
                 _tx_counter0:
000749           	.BYTE 0x1
                 _rx_buffer1:
00074a           	.BYTE 0x64
                 _rx_wr_index1:
0007ae           	.BYTE 0x1
                 _rx_rd_index1:
0007af           	.BYTE 0x1
                 _rx_counter1:
0007b0           	.BYTE 0x1
                 __seed_G101:
0007b1           	.BYTE 0x4
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
000bf6 91e9      	ld   r30,y+
000bf7 91f9      	ld   r31,y+
000bf8 9630      	adiw r30,0
000bf9 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000bfa e383     +LDI R24 , LOW ( 0x733 )
000bfb e097     +LDI R25 , HIGH ( 0x733 )
                +__DELAY_USW_LOOP :
000bfc 9701     +SBIW R24 , 1
000bfd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x733
000bfe 95a8      	wdr
000bff 9731      	sbiw r30,1
000c00 f7c9      	brne __delay_ms0
                 __delay_ms1:
000c01 9508      	ret
                 
                 __ADDW2R15:
000c02 2400      	CLR  R0
000c03 0daf      	ADD  R26,R15
000c04 1db0      	ADC  R27,R0
000c05 9508      	RET
                 
                 __ANEGW1:
000c06 95f1      	NEG  R31
000c07 95e1      	NEG  R30
000c08 40f0      	SBCI R31,0
000c09 9508      	RET
                 
                 __GETW1P:
000c0a 91ed      	LD   R30,X+
000c0b 91fc      	LD   R31,X
000c0c 9711      	SBIW R26,1
000c0d 9508      	RET
                 
                 __GETW1PF:
000c0e 9005      	LPM  R0,Z+
000c0f 91f4      	LPM  R31,Z
000c10 2de0      	MOV  R30,R0
000c11 9508      	RET
                 
                 __EEPROMRDB:
000c12 99e1      	SBIC EECR,EEWE
000c13 cffe      	RJMP __EEPROMRDB
000c14 93ff      	PUSH R31
000c15 b7ff      	IN   R31,SREG
000c16 94f8      	CLI
000c17 bbae      	OUT  EEARL,R26
000c18 bbbf      	OUT  EEARH,R27
000c19 9ae0      	SBI  EECR,EERE
000c1a b3ed      	IN   R30,EEDR
000c1b bfff      	OUT  SREG,R31
000c1c 91ff      	POP  R31
000c1d 9508      	RET
                 
                 __EEPROMWRB:
000c1e 9be1      	SBIS EECR,EEWE
000c1f c002      	RJMP __EEPROMWRB1
000c20 95a8      	WDR
000c21 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000c22 b79f      	IN   R25,SREG
000c23 94f8      	CLI
000c24 bbae      	OUT  EEARL,R26
000c25 bbbf      	OUT  EEARH,R27
000c26 9ae0      	SBI  EECR,EERE
000c27 b38d      	IN   R24,EEDR
000c28 17e8      	CP   R30,R24
000c29 f019      	BREQ __EEPROMWRB0
000c2a bbed      	OUT  EEDR,R30
000c2b 9ae2      	SBI  EECR,EEMWE
000c2c 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000c2d bf9f      	OUT  SREG,R25
000c2e 9508      	RET
                 
                 __SAVELOCR6:
000c2f 935a      	ST   -Y,R21
                 __SAVELOCR5:
000c30 934a      	ST   -Y,R20
                 __SAVELOCR4:
000c31 933a      	ST   -Y,R19
                 __SAVELOCR3:
000c32 932a      	ST   -Y,R18
                 __SAVELOCR2:
000c33 931a      	ST   -Y,R17
000c34 930a      	ST   -Y,R16
000c35 9508      	RET
                 
                 __LOADLOCR6:
000c36 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000c37 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000c38 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000c39 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000c3a 8119      	LDD  R17,Y+1
000c3b 8108      	LD   R16,Y
000c3c 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000c3d 0fac      	ADD  R26,R28
000c3e 1fbd      	ADC  R27,R29
                 __INITLOC0:
000c3f 9005      	LPM  R0,Z+
000c40 920d      	ST   X+,R0
000c41 958a      	DEC  R24
000c42 f7e1      	BRNE __INITLOC0
000c43 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega64 register use summary:
r0 :  15 r1 :   1 r2 :   3 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   9 r9 :   0 r10:   4 r11:   4 r12:   4 r13:  21 r14:   0 r15:  14 
r16:  66 r17:  56 r18:  39 r19:  22 r20:  15 r21:  33 r22:   4 r23:   0 
r24:  21 r25:   5 r26: 221 r27:  39 r28:  30 r29:   2 r30: 949 r31: 399 
x  :  19 y  : 733 z  :  31 
Registers used: 27 out of 35 (77.1%)

ATmega64 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   5 
adiw  :  41 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   5 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  46 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   1 brmi  :   0 brne  : 101 brpl  :   1 brsh  :  19 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 185 
cbi   :   2 cbr   :   0 clc   :   0 clh   :   0 cli   :   6 cln   :   0 
clr   :  11 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   0 
cp    :  22 cpc   :  15 cpi   : 131 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   8 ijmp  :   0 
in    :   9 inc   :   4 jmp   :  42 ld    :  44 ldd   : 175 ldi   : 551 
lds   :  16 lpm   :  15 lsl   :   0 lsr   :   0 mov   :  42 movw  :  24 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   6 out   :  41 pop   :   4 push  :   4 rcall : 111 ret   :  25 
reti  :   3 rjmp  : 141 rol   :   0 ror   :   0 sbc   :   1 sbci  :  14 
sbi   :   6 sbic  :   4 sbis  :   2 sbiw  :  26 sbr   :   0 sbrc  :   2 
sbrs  :  12 sec   :   0 seh   :   0 sei   :   4 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 438 std   : 113 sts   :  25 sub   :   1 subi  :  41 swap  :   0 
tst   :   7 wdr   :   2 
Instructions used: 59 out of 116 (50.9%)

ATmega64 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001888   5706    574   6280   65536   9.6%
[.dseg] 0x000100 0x0007b5      0    693    693    4351  15.9%
[.eseg] 0x000000 0x000200      0    512    512    2048  25.0%

Assembly complete, 0 errors, 10 warnings
